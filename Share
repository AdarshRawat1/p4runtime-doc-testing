Great — fresh start is the best way to get this clean and modular! Here's a step-by-step plan for setting up Plotly.js modularly with your Blazor Server (.NET 6) project using your Oracle data:

---

### ✅ 1. **Project Folder Structure Recommendation**
Keep it clean and modular like this:

```
Star/
│
├── Pages/
│   ├── Index.razor                # Main landing page (can host charts)
│   ├── FeatureUsage.razor         # Example chart page (modular)
│
├── Shared/
│   └── Charts/
│       └── PlotlyChart.razor      # Reusable Plotly component
│
├── wwwroot/
│   └── js/
│       ├── plotly/
│       │   └── plotly.min.js      # From Plotly.js 3.0.1
│       └── plotlyInterop.js       # Custom JS interop file
│
├── Models/
│   └── FeatureUsage.cs            # Models for chart data
│
├── Services/
│   ├── OracleDataService.cs       # Your existing Oracle fetch logic
│   └── IOracleDataService.cs
```

---

### ✅ 2. **Add the Interop JS**

📁 `wwwroot/js/plotlyInterop.js`:

```js
window.renderPlotlyBarChart = (chartId, chartData) => {
    var trace = {
        x: chartData.labels,
        y: chartData.values,
        type: 'bar',
        marker: { color: 'rgba(54, 162, 235, 0.6)' }
    };

    var layout = {
        title: chartData.title,
        xaxis: { title: chartData.xLabel },
        yaxis: { title: chartData.yLabel }
    };

    Plotly.newPlot(chartId, [trace], layout);
};
```

---

### ✅ 3. **Reference JS in `_Layout.cshtml`**

📄 `Pages/_Layout.cshtml` (inside `<body>` before `</body>`):

```html
<script src="~/js/plotly/plotly.min.js"></script>
<script src="~/js/plotlyInterop.js"></script>
```

---

### ✅ 4. **Reusable PlotlyChart Component**

📄 `Shared/Charts/PlotlyChart.razor`:

```razor
@inject IJSRuntime JSRuntime

<div class="mb-5">
    <h5>@Title</h5>
    <div id="@ChartId" style="width:100%; height:400px;"></div>
</div>

@code {
    [Parameter] public string ChartId { get; set; } = "myPlot";
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public List<string> Labels { get; set; } = new();
    [Parameter] public List<double> Values { get; set; } = new();
    [Parameter] public string XLabel { get; set; } = "";
    [Parameter] public string YLabel { get; set; } = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var chartData = new
            {
                labels = Labels,
                values = Values,
                title = Title,
                xLabel = XLabel,
                yLabel = YLabel
            };

            await JSRuntime.InvokeVoidAsync("renderPlotlyBarChart", ChartId, chartData);
        }
    }
}
```

---

### ✅ 5. **FeatureUsage Page Example**

📄 `Pages/FeatureUsage.razor`:

```razor
@page "/feature-usage"
@inject Star.Services.IOracleDataService DataService

<h3>Feature Usage in Last 30 Days</h3>

@if (IsLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else
{
    <PlotlyChart ChartId="featureUsageChart"
                 Title="Feature Usage in Last 30 Days"
                 Labels="Labels"
                 Values="Values"
                 XLabel="Feature"
                 YLabel="Count" />
}

@code {
    private bool IsLoading = true;
    private string? ErrorMessage;
    private List<string> Labels = new();
    private List<double> Values = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var data = await DataService.GetFeatureUsageAsync();
            Labels = data.Select(f => f.Feature).ToList();
            Values = data.Select(f => (double)f.UsageCount).ToList();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }
}
```

---

### ✅ 6. **Register `PlotlyChart` Namespace**

In `_Imports.razor`, add:

```razor
@using Star.Shared.Charts
```

---

Let’s start with this `FeatureUsage` page. Once this is confirmed working, we can build additional charts (next query) in their own pages or components the same way.

Ready to test this setup? Let me know if you'd like a `.razor` + `.js` pack zipped too.
