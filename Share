if df.empty:
    fig = plt.figure(figsize=(8,4))
    ax  = fig.add_subplot(111)
    ax.text(0.5, 0.5, 'No data', ha='center', va='center', fontsize=14)
    ax.axis('off')
    plt.savefig(outp)
    return


Below is the **8-step, end-to-end integration** for your three charts, using your exact titles and without renaming them. You can copy each block into your project.

---

## 1. Model

```csharp
// Models/OtcTop5RecBreaksCount.cs
namespace StarTrends.Models
{
    public class OtcTop5RecBreaksCount
    {
        public string Product     { get; set; }
        public int    RecBreaks   { get; set; }
        public string BreakReason { get; set; }
    }
}

// Models/MtmContractsBookedCount.cs
namespace StarTrends.Models
{
    public class MtmContractsBookedCount
    {
        public DateTime Week            { get; set; }
        public int      ContractsBooked { get; set; }
    }
}

// Models/OtcContractsBookedVsAvgCount.cs
namespace StarTrends.Models
{
    public class OtcContractsBookedVsAvgCount
    {
        public DateTime Week        { get; set; }
        public int      DealsBooked { get; set; }
        public double   AvgDeals    { get; set; }
    }
}
```

---

## 2. Data Service Interface

```csharp
// Services/IOracleDataService.cs
using StarTrends.Models;

public interface IOracleDataService
{
    // … existing …

    Task<IEnumerable<OtcTop5RecBreaksCount>> GetOtcTop5RecBreaksAsync(DateTime fromDate, DateTime toDate);
    Task<IEnumerable<MtmContractsBookedCount>> GetMtmContractsBookedAsync(DateTime fromDate, DateTime toDate);
    Task<IEnumerable<OtcContractsBookedVsAvgCount>> GetOtcContractsBookedVsAvgAsync(DateTime fromDate, DateTime toDate);
}
```

---

## 3. Data Service Implementation

```csharp
// Services/OracleDataService.cs
using Oracle.ManagedDataAccess.Client;
using StarTrends.Models;

public class OracleDataService : IOracleDataService
{
    private readonly string _conn;
    public OracleDataService(IConfiguration cfg) => _conn = cfg.GetConnectionString("Oracle");

    public async Task<IEnumerable<OtcTop5RecBreaksCount>> GetOtcTop5RecBreaksAsync(DateTime fromDate, DateTime toDate)
    {
        const string sql = @"
WITH recbreaks AS (
  SELECT c.prd_typ_name AS Product,
         CASE
           WHEN r.rec_brk_reason='TST' THEN 'Tech Problem - STP'
           WHEN r.rec_brk_reason='RTE' THEN 'Tech Problem - Rec'
           WHEN r.rec_brk_reason='MOE' THEN 'Manual Error - MO'
           WHEN r.rec_brk_reason='FOE' THEN 'DC Error - FO'
           WHEN r.rec_brk_reason='FID' THEN 'Fixings Discrepancy'
           WHEN r.rec_brk_reason='CDS' THEN 'Calendar Data STAR'
           WHEN r.rec_brk_reason='CDM' THEN 'Calendar Data Import'
           ELSE r.rec_brk_reason
         END AS BreakReason,
         COUNT(*) AS RecBreaks
  FROM star_rec_hist r
  JOIN star_contract PARTITION(product_oth) c ON c.con_no=r.con_no
  WHERE r.lst_mod_dt BETWEEN :fromDate AND :toDate
    AND r.rec_src='INT' AND r.rec_sts='DIF'
    AND r.rec_brk_reason NOT IN('UNR','RFB')
  GROUP BY c.prd_typ_name,
           CASE
             WHEN r.rec_brk_reason='TST' THEN 'Tech Problem - STP'
             WHEN r.rec_brk_reason='RTE' THEN 'Tech Problem - Rec'
             WHEN r.rec_brk_reason='MOE' THEN 'Manual Error - MO'
             WHEN r.rec_brk_reason='FOE' THEN 'DC Error - FO'
             WHEN r.rec_brk_reason='FID' THEN 'Fixings Discrepancy'
             WHEN r.rec_brk_reason='CDS' THEN 'Calendar Data STAR'
             WHEN r.rec_brk_reason='CDM' THEN 'Calendar Data Import'
             ELSE r.rec_brk_reason
           END
),
top5 AS (
  SELECT Product
  FROM (
    SELECT Product, SUM(RecBreaks) AS Total
    FROM recbreaks
    GROUP BY Product
    ORDER BY Total DESC
  ) WHERE ROWNUM<=5
)
SELECT r.Product, r.RecBreaks, r.BreakReason
FROM recbreaks r
JOIN top5 t ON t.Product=r.Product
ORDER BY r.Product, r.BreakReason";

        var outp = new List<OtcTop5RecBreaksCount>();
        await using var conn = new OracleConnection(_conn);
        await conn.OpenAsync();
        await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
        cmd.Parameters.Add("fromDate", OracleDbType.Date).Value = fromDate;
        cmd.Parameters.Add("toDate",   OracleDbType.Date).Value = toDate;
        await using var rdr = await cmd.ExecuteReaderAsync();
        while (await rdr.ReadAsync())
        {
            outp.Add(new OtcTop5RecBreaksCount
            {
                Product     = rdr.GetString   ("Product"),
                RecBreaks   = rdr.GetInt32    ("RecBreaks"),
                BreakReason = rdr.GetString   ("BreakReason")
            });
        }
        return outp;
    }

    public async Task<IEnumerable<MtmContractsBookedCount>> GetMtmContractsBookedAsync(DateTime fromDate, DateTime toDate)
    {
        const string sql = @"
SELECT TRUNC(c.inp_dt,'DAY') AS Week,
       COUNT(*)             AS ContractsBooked
FROM star_contract PARTITION(product_oth) c
JOIN star_mtm m ON m.con_no=c.con_no AND m.lgcl_del_flg='N'
WHERE c.inp_dt BETWEEN :fromDate AND :toDate
  AND c.mrr_typ_cod IN(0,1,6)
GROUP BY TRUNC(c.inp_dt,'DAY')
ORDER BY TRUNC(c.inp_dt,'DAY')";

        var outp = new List<MtmContractsBookedCount>();
        await using var conn = new OracleConnection(_conn);
        await conn.OpenAsync();
        await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
        cmd.Parameters.Add("fromDate", OracleDbType.Date).Value = fromDate;
        cmd.Parameters.Add("toDate",   OracleDbType.Date).Value = toDate;
        await using var rdr = await cmd.ExecuteReaderAsync();
        while (await rdr.ReadAsync())
        {
            outp.Add(new MtmContractsBookedCount
            {
                Week            = rdr.GetDateTime("Week"),
                ContractsBooked = rdr.GetInt32   ("ContractsBooked")
            });
        }
        return outp;
    }

    public async Task<IEnumerable<OtcContractsBookedVsAvgCount>> GetOtcContractsBookedVsAvgAsync(DateTime fromDate, DateTime toDate)
    {
        const string sql = @"
WITH weekly AS (
  SELECT TRUNC(c.inp_dt,'DAY') AS Week,
         COUNT(*)             AS DealsBooked
  FROM star_contract PARTITION(product_oth) c
  WHERE c.inp_dt BETWEEN :fromDate AND :toDate
    AND c.mrr_typ_cod IN(0,1,6)
  GROUP BY TRUNC(c.inp_dt,'DAY')
)
SELECT
  Week,
  DealsBooked,
  ROUND(AVG(DealsBooked) OVER (
    ORDER BY Week
    ROWS BETWEEN 3 PRECEDING AND CURRENT ROW
  ),2) AS AvgDeals
FROM weekly
ORDER BY Week";

        var outp = new List<OtcContractsBookedVsAvgCount>();
        await using var conn = new OracleConnection(_conn);
        await conn.OpenAsync();
        await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
        cmd.Parameters.Add("fromDate", OracleDbType.Date).Value = fromDate;
        cmd.Parameters.Add("toDate",   OracleDbType.Date).Value = toDate;
        await using var rdr = await cmd.ExecuteReaderAsync();
        while (await rdr.ReadAsync())
        {
            outp.Add(new OtcContractsBookedVsAvgCount
            {
                Week        = rdr.GetDateTime("Week"),
                DealsBooked = rdr.GetInt32   ("DealsBooked"),
                AvgDeals    = rdr.GetDouble  ("AvgDeals")
            });
        }
        return outp;
    }
}
```

---

## 4. Chart Generator Interface

```csharp
// Services/IChartGeneratorService.cs
using StarTrends.Models;

public interface IChartGeneratorService
{
    // … existing …

    Task<string> GenerateOtcTop5RecBreaksChartAsync(IEnumerable<OtcTop5RecBreaksCount> data);
    Task<string> GenerateMtmContractsBookedChartAsync(IEnumerable<MtmContractsBookedCount> data);
    Task<string> GenerateOtcContractsBookedVsAvgChartAsync(IEnumerable<OtcContractsBookedVsAvgCount> data);
}
```

---

## 5. Chart Generator Implementation

```csharp
// Services/ChartGeneratorService.cs
using System.Diagnostics;
using StarTrends.Models;

public class ChartGeneratorService : IChartGeneratorService
{
    // … ctor & fields …

    public async Task<string> GenerateOtcTop5RecBreaksChartAsync(IEnumerable<OtcTop5RecBreaksCount> data)
    {
        var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
        var csvPath = Path.Combine(_csvDir, $"otc_top5_rec_breaks_{ts}.csv");
        var pngPath = Path.Combine(_chartDir, $"otc_top5_rec_breaks_{ts}.png");

        await File.WriteAllTextAsync(csvPath,
            "Product,RecBreaks,BreakReason\n" +
            string.Join("\n", data.Select(d =>
                $"{d.Product},{d.RecBreaks},{d.BreakReason}"))
        );

        var script = Path.Combine(_scriptDir, "generate_otc_top5_rec_breaks_chart.py");
        var psi = new ProcessStartInfo("python",
                $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
        {
            RedirectStandardError = true,
            UseShellExecute       = false
        };

        using var proc = Process.Start(psi)
                         ?? throw new InvalidOperationException("Cannot start Python");
        var err = await proc.StandardError.ReadToEndAsync();
        await proc.WaitForExitAsync();
        if (!string.IsNullOrEmpty(err)) _log.LogError(err);

        return $"/charts/{Path.GetFileName(pngPath)}";
    }

    public async Task<string> GenerateMtmContractsBookedChartAsync(IEnumerable<MtmContractsBookedCount> data)
    {
        var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
        var csvPath = Path.Combine(_csvDir, $"mtm_contracts_booked_{ts}.csv");
        var pngPath = Path.Combine(_chartDir, $"mtm_contracts_booked_{ts}.png");

        await File.WriteAllTextAsync(csvPath,
            "Week,ContractsBooked\n" +
            string.Join("\n", data.Select(d =>
                $"{d.Week:yyyy-MM-dd},{d.ContractsBooked}"))
        );

        var script = Path.Combine(_scriptDir, "generate_mtm_contracts_booked_chart.py");
        var psi = new ProcessStartInfo("python",
                $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
        {
            RedirectStandardError = true,
            UseShellExecute       = false
        };

        using var proc = Process.Start(psi)
                         ?? throw new InvalidOperationException("Cannot start Python");
        var err = await proc.StandardError.ReadToEndAsync();
        await proc.WaitForExitAsync();
        if (!string.IsNullOrEmpty(err)) _log.LogError(err);

        return $"/charts/{Path.GetFileName(pngPath)}";
    }

    public async Task<string> GenerateOtcContractsBookedVsAvgChartAsync(IEnumerable<OtcContractsBookedVsAvgCount> data)
    {
        var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
        var csvPath = Path.Combine(_csvDir, $"otc_contracts_booked_vs_avg_{ts}.csv");
        var pngPath = Path.Combine(_chartDir, $"otc_contracts_booked_vs_avg_{ts}.png");

        await File.WriteAllTextAsync(csvPath,
            "Week,DealsBooked,AvgDeals\n" +
            string.Join("\n", data.Select(d =>
                $"{d.Week:yyyy-MM-dd},{d.DealsBooked},{d.AvgDeals:F2}"))
        );

        var script = Path.Combine(_scriptDir, "generate_otc_contracts_booked_vs_avg_chart.py");
        var psi = new ProcessStartInfo("python",
                $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
        {
            RedirectStandardError = true,
            UseShellExecute       = false
        };

        using var proc = Process.Start(psi)
                         ?? throw new InvalidOperationException("Cannot start Python");
        var err = await proc.StandardError.ReadToEndAsync();
        await proc.WaitForExitAsync();
        if (!string.IsNullOrEmpty(err)) _log.LogError(err);

        return $"/charts/{Path.GetFileName(pngPath)}";
    }
}
```

---

## 6. Python Scripts

Save each UTF-8 in `ChartUpdater/PythonScripts/`:

### a) `generate_otc_top5_rec_breaks_chart.py`

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# OTC top 5 products causing intra-day rec breaks excluding unrec'd and false breaks (Past 4 weeks)

import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def main(inp, outp):
    df = pd.read_csv(inp)
    if df.empty:
        fig = plt.figure(figsize=(8,4)); ax=fig.add_subplot(111)
        ax.text(0.5,0.5,'No data',ha='center',va='center',fontsize=14); ax.axis('off')
        plt.savefig(outp); return

    products = df['Product'].unique()
    reasons  = df['BreakReason'].unique()
    Xpos     = np.arange(len(products))
    Ypos     = np.arange(len(reasons))

    Z = []
    for r in reasons:
        Z.append([df.query("Product==@p and BreakReason==@r")['RecBreaks'].sum()
                  for p in products])

    X, Y = np.meshgrid(Xpos, Ypos)
    Z     = np.array(Z)

    fig = plt.figure(figsize=(12,6))
    ax  = fig.add_subplot(111, projection='3d')
    ax.bar3d(X.flatten(), Y.flatten(), np.zeros_like(Z).flatten(),
             0.5, 0.5, Z.flatten())

    ax.set_xticks(Xpos); ax.set_xticklabels(products, rotation=45, ha='right')
    ax.set_yticks(Ypos); ax.set_yticklabels(reasons)
    ax.set_zlabel('Rec Breaks')
    ax.set_title("OTC top 5 products causing intra-day rec breaks excluding unrec'd and false breaks (Past 4 weeks)")
    plt.tight_layout(); plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3:
        print("Usage: python generate_otc_top5_rec_breaks_chart.py <in.csv> <out.png>", file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

### b) `generate_mtm_contracts_booked_chart.py`

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# MTM contracts booked per week in last 4 years excluding synthetics

import sys
import pandas as pd
import matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Week'])
    if df.empty:
        fig=plt.figure(figsize=(8,4)); ax=fig.add_subplot(111)
        ax.text(0.5,0.5,'No data',ha='center',va='center',fontsize=14); ax.axis('off')
        plt.savefig(outp); return

    fig=plt.figure(figsize=(10,5)); ax=fig.add_subplot(111)
    ax.plot(df['Week'], df['ContractsBooked'], marker='o', linestyle='-')
    ax.set_title('MTM contracts booked per week in last 4 years excluding synthetics')
    ax.set_ylabel('Contracts Booked')
    plt.xticks(rotation=45,ha='right'); plt.tight_layout(); plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3:
        print("Usage: python generate_mtm_contracts_booked_chart.py <in.csv> <out.png>", file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

### c) `generate_otc_contracts_booked_vs_avg_chart.py`

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# OTC contracts booked per week excludes synthetics

import sys
import pandas as pd
import matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Week'])
    if df.empty:
        fig=plt.figure(figsize=(8,4)); ax=fig.add_subplot(111)
        ax.text(0.5,0.5,'No data',ha='center',va='center',fontsize=14); ax.axis('off')
        plt.savefig(outp); return

    df = df.sort_values('Week')
    df['AvgDeals'] = df['DealsBooked'].rolling(window=4, min_periods=1).mean()

    fig=plt.figure(figsize=(10,6)); ax=fig.add_subplot(111)
    ax.plot(df['Week'], df['DealsBooked'], label='Deals booked', marker='o')
    ax.plot(df['Week'], df['AvgDeals'],    label='Avg', linestyle='--')
    ax.set_title('OTC contracts booked per week excludes synthetics')
    ax.set_ylabel('Contracts')
    ax.legend()
    plt.xticks(rotation=45,ha='right'); plt.tight_layout(); plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3:
        print("Usage: python generate_otc_contracts_booked_vs_avg_chart.py <in.csv> <out.png>", file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

---

## 7. Worker Integration

```csharp
// in ChartUpdaterWorker.ExecuteAsync
var top5Data = await oracle.GetOtcTop5RecBreaksAsync(
                    DateTime.UtcNow.AddDays(-28),
                    DateTime.UtcNow.AddDays(-1));
var top5Url  = await chartGen.GenerateOtcTop5RecBreaksChartAsync(top5Data);
metadata["otc_top5_rec_breaks"] = new { ImageUrl = top5Url, LastUpdated = DateTime.UtcNow };

var mtmData  = await oracle.GetMtmContractsBookedAsync(
                    DateTime.UtcNow.AddYears(-4),
                    DateTime.UtcNow.AddDays(-1));
var mtmUrl   = await chartGen.GenerateMtmContractsBookedChartAsync(mtmData);
metadata["mtm_contracts_booked"] = new { ImageUrl = mtmUrl,   LastUpdated = DateTime.UtcNow };

var vsAvgData = await oracle.GetOtcContractsBookedVsAvgAsync(
                     DateTime.UtcNow.AddYears(-4),
                     DateTime.UtcNow.AddDays(-1));
var vsAvgUrl  = await chartGen.GenerateOtcContractsBookedVsAvgChartAsync(vsAvgData);
metadata["otc_contracts_booked_vs_avg"] = new { ImageUrl = vsAvgUrl, LastUpdated = DateTime.UtcNow };
```

---

## 8. UI Component

```razor
@page "/charts"
<h3>Dashboard Charts</h3>

<ChartBox GraphId="otc_top5_rec_breaks"
          Title="OTC top 5 products causing intra-day rec breaks excluding unrec'd and false breaks (Past 4 weeks)" />

<ChartBox GraphId="mtm_contracts_booked"
          Title="MTM contracts booked per week in last 4 years excluding synthetics" />

<ChartBox GraphId="otc_contracts_booked_vs_avg"
          Title="OTC contracts booked per week excludes synthetics" />
```

---

That is your full 8-step integration—**models**, **data service**, **chart generator**, **Python scripts**, **worker wiring**, and **UI**—with **exactly** your requested graph titles.
