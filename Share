Absolutely! Let's now hook up Plotly.js to display the data from your GetFeatureUsageAsync() method using JS interop.


---

✅ Final Setup: Plotly.js for GetFeatureUsageAsync()

We’ll follow a similar pattern and use the existing method from your IOracleDataService.


---

1. Chart Placeholder in Razor Page

Add this to your Razor page (e.g., Pages/Counter.razor or make a new one like FeatureUsageChart.razor):

@page "/feature-usage"
@inject IOracleDataService OracleDataService
@inject IJSRuntime JSRuntime

<h3>Feature Usage Chart</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(error))
{
    <div class="text-danger">@error</div>
}
else
{
    <div id="featureUsageChart" style="width:100%; height:400px;"></div>
}

@code {
    private bool isLoading = true;
    private string? error;
    private List<string> labels = new();
    private List<int> values = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var data = await OracleDataService.GetFeatureUsageAsync();
            labels = data.Select(f => f.Feature).ToList();
            values = data.Select(f => f.UsageCount).ToList();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && string.IsNullOrEmpty(error))
        {
            var chartData = new
            {
                labels = labels,
                values = values,
                title = "Feature Usage in Last 30 Days",
                xLabel = "Feature",
                yLabel = "Count"
            };

            await JSRuntime.InvokeVoidAsync("renderPlotlyBarChart", "featureUsageChart", chartData);
        }
    }
}


---

2. JavaScript Interop File (plotlyInterop.js)

Already present? Then you’re good.

If not, create:

wwwroot/js/plotlyInterop.js

Paste:

window.renderPlotlyBarChart = (elementId, chartData) => {
    const trace = {
        x: chartData.labels,
        y: chartData.values,
        type: 'bar',
        marker: {
            color: 'rgba(54, 162, 235, 0.6)',
            line: {
                color: 'rgba(54, 162, 235, 1.0)',
                width: 1
            }
        }
    };

    const layout = {
        title: chartData.title,
        xaxis: { title: chartData.xLabel },
        yaxis: { title: chartData.yLabel }
    };

    Plotly.newPlot(elementId, [trace], layout);
};


---

3. Add JS References to _Layout.cshtml

In Pages/_Layout.cshtml, before </body>:

<script src="js/plotly/plotly.min.js"></script>
<script src="js/plotlyInterop.js"></script>

Make sure the plotly.min.js exists at wwwroot/js/plotly/plotly.min.js.


---

✅ You’re Done!

You’ll now see a Plotly bar chart of Feature vs UsageCount on https://localhost:xxxx/feature-usage.

Let me know if you want:

A horizontal version

Custom tooltips

A component-based version (so you can reuse it for other pages)


Ready for the next chart whenever you are.

