@page "/feature-usage"
@inject IOracleDataService DataService
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <div class="text-center mb-4">
        <h3 class="fw-bold">ðŸ“Š Feature Usage Statistics (Last 30 Days)</h3>
        <p class="text-muted">Click the button below to load and view the feature usage graph from Oracle DB.</p>
        <button class="btn btn-primary px-4 py-2" @onclick="GenerateGraph" disabled="@IsLoading">
            @(IsLoading ? "Loading..." : "Generate Graph")
        </button>
    </div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }

    <div id="featureUsageChart" style="width:100%; height:500px;"></div>
</div>

@code {
    private bool IsLoading = false;
    private string? ErrorMessage;

    private async Task GenerateGraph()
    {
        IsLoading = true;
        ErrorMessage = null;

        try
        {
            var data = await DataService.GetFeatureUsageAsync();

            if (data == null || data.Count == 0)
            {
                ErrorMessage = "No data found.";
                return;
            }

            var labels = data.Select(d => d.Feature).ToList();
            var values = data.Select(d => (double)d.UsageCount).ToList();

            var chartData = new
            {
                labels,
                values,
                title = "Feature Usage in Last 30 Days",
                xLabel = "Feature",
                yLabel = "Count"
            };

            await JSRuntime.InvokeVoidAsync("renderPlotlyBarChart", "featureUsageChart", chartData);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }
}























window.renderPlotlyBarChart = (chartId, chartData) => {
    const trace = {
        x: chartData.labels,
        y: chartData.values,
        type: 'bar',
        marker: {
            color: 'rgba(54, 162, 235, 0.6)',
            line: {
                color: 'rgba(54, 162, 235, 1.0)',
                width: 1.5
            }
        }
    };

    const layout = {
        title: chartData.title,
        xaxis: {
            title: chartData.xLabel,
            tickangle: -45
        },
        yaxis: {
            title: chartData.yLabel,
            type: 'log', // <-- enables logarithmic scale for better visibility of small values
            autorange: true
        },
        margin: { t: 60, b: 100 },
    };

    Plotly.newPlot(chartId, [trace], layout);
};

