@page "/"
@inject HttpClient Http

<h3>Product Trades in Last 7 Days</h3>

@if (meta is null)
{
    <p>Loading chart…</p>
}
else
{
    <img src="@meta.ImageUrl" alt="Trades chart" style="max-width:100%; height:auto;" />
    <p>
      <small>Last updated: @meta.LastUpdated.ToLocalTime().ToString("f")</small>
    </p>
    <button class="btn btn-outline-primary" @onclick="Refresh" disabled="@loading">
      @(loading ? "Refreshing…" : "Refresh")
    </button>
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger mt-2">@error</div>
    }
}

@code {
    private ChartMeta meta;
    private bool loading;
    private string error;

    protected override async Task OnInitializedAsync()
        => await LoadMetadata();

    private async Task LoadMetadata()
    {
        try
        {
            meta = await Http.GetFromJsonAsync<ChartMeta>("charts/metadata.json");
            error = null;
        }
        catch (Exception ex)
        {
            error = $"Couldn’t load chart: {ex.Message}";
        }
    }

    private async Task Refresh()
    {
        loading = true;
        try
        {
            var resp = await Http.PostAsync("/api/charts/productTrade/refresh", null);
            resp.EnsureSuccessStatusCode();
            meta = await resp.Content.ReadFromJsonAsync<ChartMeta>();
        }
        catch (Exception ex)
        {
            error = $"Refresh failed: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    class ChartMeta
    {
        public string ImageUrl { get; set; }
        public DateTime LastUpdated { get; set; }
    }
}
