Great ‚Äî here is **everything** you need for your `StarTrends` Blazor Server project: full backend + Blazor UI setup + Python chart generator.

---

## ‚úÖ BACKEND FILES

### üìÅ `Models/OtcData.cs`

```csharp
namespace StarTrends.Models
{
    public class OtcData
    {
        public string Product { get; set; } = default!;
        public int TotalTrades { get; set; }
    }
}
```

---

### üìÅ `Data/IGraphDataRepo.cs`

```csharp
using StarTrends.Models;

namespace StarTrends.Data
{
    public interface IGraphDataRepo
    {
        Task<List<OtcData>> FetchOtcDataAsync(int days);
    }
}
```

---

### üìÅ `Data/OracleDataRepo.cs`

```csharp
using StarTrends.Models;
using Microsoft.Extensions.Configuration;
using Oracle.ManagedDataAccess.Client;

namespace StarTrends.Data
{
    public class OracleDataRepo : IGraphDataRepo
    {
        private readonly string _connStr;

        public OracleDataRepo(IConfiguration config)
        {
            _connStr = config.GetConnectionString("OracleDb") 
                ?? throw new InvalidOperationException("Missing OracleDb connection string");
        }

        public async Task<List<OtcData>> FetchOtcDataAsync(int days)
        {
            const string sql = "SELECT 'IR Swap (Fx/Fl)' AS Product, 123 AS TotalTrades FROM dual";
            var result = new List<OtcData>();

            await using var conn = new OracleConnection(_connStr);
            await conn.OpenAsync();

            await using var cmd = new OracleCommand(sql, conn);
            await using var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                result.Add(new OtcData
                {
                    Product = reader.GetString(0),
                    TotalTrades = reader.GetInt32(1)
                });
            }

            return result;
        }
    }
}
```

---

### üìÅ `Services/IGraphService.cs`

```csharp
namespace StarTrends.Services
{
    public interface IGraphService
    {
        Task<byte[]> GenerateOtcProductTypesChartAsync();
    }
}
```

---

### üìÅ `Services/GraphService.cs`

```csharp
using StarTrends.Data;
using System.Diagnostics;
using System.Text.Json;

namespace StarTrends.Services
{
    public class GraphService : IGraphService
    {
        private readonly IGraphDataRepo _repo;

        public GraphService(IGraphDataRepo repo)
        {
            _repo = repo;
        }

        public async Task<byte[]> GenerateOtcProductTypesChartAsync()
        {
            var raw = await _repo.FetchOtcDataAsync(7);
            var payload = JsonSerializer.Serialize(raw);

            var psi = new ProcessStartInfo
            {
                FileName = "python",
                Arguments = "PythonTools/render.py",
                RedirectStandardInput = true,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true,
                WorkingDirectory = AppContext.BaseDirectory
            };

            using var proc = Process.Start(psi)
                ?? throw new InvalidOperationException("Could not start Python renderer");

            await proc.StandardInput.WriteAsync(payload);
            proc.StandardInput.Close();

            using var ms = new MemoryStream();
            await proc.StandardOutput.BaseStream.CopyToAsync(ms);
            await proc.WaitForExitAsync();

            return ms.ToArray();
        }
    }
}
```

---

### üìÅ `Controllers/GraphController.cs`

```csharp
using Microsoft.AspNetCore.Mvc;
using StarTrends.Services;

namespace StarTrends.Controllers
{
    [ApiController]
    [Route("api/graphs")]
    public class GraphController : ControllerBase
    {
        private readonly IGraphService _svc;
        public GraphController(IGraphService svc) => _svc = svc;

        [HttpGet("otc-product-types")]
        public async Task<IActionResult> Get()
        {
            var png = await _svc.GenerateOtcProductTypesChartAsync();
            return File(png, "image/png");
        }
    }
}
```

---

## üêç Python Chart Renderer

### üìÅ `PythonTools/render.py`

```python
#!/usr/bin/env python
import sys, json
import matplotlib.pyplot as plt

def main():
    data = json.load(sys.stdin)
    labels = [d["product"] for d in data]
    values = [d["totalTrades"] for d in data]

    fig, ax = plt.subplots(figsize=(8, 4))
    ax.bar(labels, values)
    ax.set_title("OTC Product Types (last 7 days)")
    ax.set_ylabel("Total Trades")
    plt.xticks(rotation=30, ha="right")
    plt.tight_layout()

    buf = sys.stdout.buffer
    fig.savefig(buf, format="png")
    buf.flush()

if __name__ == "__main__":
    main()
```

---

## üñ•Ô∏è Blazor UI Setup

### üìÅ `Shared/ChartViewer.razor`

```razor
@inject HttpClient Http

<div>
  @if (_img is null)
  {
    <p>Loading chart‚Ä¶</p>
  }
  else
  {
    <img src="data:image/png;base64,@_img" alt="Chart" />
  }
</div>

@code {
  private string? _img;

  protected override async Task OnInitializedAsync()
  {
      var bytes = await Http.GetByteArrayAsync("api/graphs/otc-product-types");
      _img = Convert.ToBase64String(bytes);
  }
}
```

---

### üìÅ `Pages/Index.razor`

```razor
@page "/"
@using StarTrends.Shared

<h3>OTC Product Types (last 7 days)</h3>
<ChartViewer />
```

---

### üìÅ `Pages/_Host.cshtml`

```cshtml
@page "/"
@namespace StarTrends.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>StarTrends</title>
    <base href="~/" />
    <link href="css/bootstrap/bootstrap.min.css" rel="stylesheet" />
    <link href="css/site.css" rel="stylesheet" />
</head>
<body>
    <app>
        <component type="typeof(App)" render-mode="ServerPrerendered" />
    </app>
    <script src="_framework/blazor.server.js"></script>
</body>
</html>
```

---

### üìÅ `App.razor`

```razor
<Router AppAssembly="@typeof(Program).Assembly">
  <Found Context="routeData">
    <RouteView RouteData="@routeData" />
  </Found>
  <NotFound>
    <p>Sorry, nothing here.</p>
  </NotFound>
</Router>
```

---

### üìÅ `Program.cs`

```csharp
using StarTrends.Data;
using StarTrends.Services;

var builder = WebApplication.CreateBuilder(args);

// Services
builder.Services.AddControllers();
builder.Services.AddMemoryCache();
builder.Services.AddScoped<IGraphDataRepo, OracleDataRepo>();
builder.Services.AddScoped<IGraphService, GraphService>();
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();

var app = builder.Build();

// Pipeline
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseRouting();

app.MapControllers();
app.MapBlazorHub();
app.MapFallbackToPage("/_Host");

app.Run();
```

---

‚úÖ You now have the full StarTrends project setup:

* Modular structure
* Oracle data reader
* Python-generated PNG chart
* Clean Blazor UI

Want help with caching or refresh functionality next?
