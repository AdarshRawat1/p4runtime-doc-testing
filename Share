Perfect ‚Äî we‚Äôre now setting up the STAR dashboard using a structured, section-based approach where each section (like *Product*, *Trade*, etc.) has its own page with menu-driven access to related graphs.

You‚Äôve given me:

‚úÖ The first graph for the **Product** section:  
**"OTC product types booked in portfolios belonging to BNABPAR in last 7 days"**  
‚úÖ Info that **"OTC product types booked in last 7 days"** will also be on the same **Product** page  
‚úÖ A 3D graph style reference

---

### üîß Step-by-Step: How to Set Up This in the Product Section

#### üìÅ Folder Structure (Updated)
```
/Pages
  /Product
    - ProductDashboard.razor     ‚Üê (new section landing page)
    - ProductGraph1.razor        ‚Üê OTC types in BNABPAR
    - ProductGraph2.razor        ‚Üê OTC types in last 7 days
/Components
  - Plotly3DChart.razor          ‚Üê reusable 3D graph component
```

---

### üß© 1. Create `ProductDashboard.razor` (landing page for product graphs)

```razor
@page "/product"
@using Star.Components

<h3 class="mb-4">Product Graphs</h3>

<select @onchange="OnGraphChange" class="form-select mb-3" style="width: 300px;">
    <option value="">-- Select Graph --</option>
    <option value="bnabpar">OTC product types in BNABPAR (Last 7 Days)</option>
    <option value="otcweek">OTC product types booked (Last 7 Days)</option>
</select>

@if (SelectedGraph == "bnabpar")
{
    <ProductGraph1 />
}
else if (SelectedGraph == "otcweek")
{
    <ProductGraph2 />
}

@code {
    private string? SelectedGraph;

    private void OnGraphChange(ChangeEventArgs e)
    {
        SelectedGraph = e.Value?.ToString();
    }
}
```

---

### üìä 2. `ProductGraph1.razor`: Render BNABPAR 3D Chart

```razor
@using Star.Services
@inject IOracleDataService OracleDataService
@inject IJSRuntime JSRuntime

<h5>OTC Product Types Booked in Portfolios (BNABPAR, Last 7 Days)</h5>

@if (IsLoading)
{
    <StarLoader />
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
<div id="bnabparChart" style="width: 100%; height: 500px;"></div>

@code {
    private string? ErrorMessage;
    private bool IsLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var data = await OracleDataService.GetOtcBnabparProductTradesAsync();
                var locations = data.Select(d => d.Location).Distinct().ToList();
                var products = data.Select(d => d.ProductName).Distinct().ToList();

                var zValues = new List<List<int>>();
                foreach (var product in products)
                {
                    var row = new List<int>();
                    foreach (var loc in locations)
                    {
                        var item = data.FirstOrDefault(d => d.Location == loc && d.ProductName == product);
                        row.Add(item?.TotalDeals ?? 0);
                    }
                    zValues.Add(row);
                }

                await JSRuntime.InvokeVoidAsync("renderPlotly3DChart", "bnabparChart", products, locations, zValues);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
                StateHasChanged();
            }
        }
    }
}
```

---

### ‚öôÔ∏è 3. Update `IOracleDataService.cs` and `OracleDataService.cs`

```csharp
Task<List<ProductTrade3D>> GetOtcBnabparProductTradesAsync();
```

```csharp
public async Task<List<ProductTrade3D>> GetOtcBnabparProductTradesAsync()
{
    var result = new List<ProductTrade3D>();
    using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();

    using var cmd = conn.CreateCommand();
    cmd.CommandText = @"[Your SQL Query from earlier]";
    using var reader = await cmd.ExecuteReaderAsync();

    while (await reader.ReadAsync())
    {
        result.Add(new ProductTrade3D
        {
            Location = reader.GetString(0),
            TotalDeals = Convert.ToInt32(reader.GetDecimal(1)),
            ProductName = reader.GetString(2)
        });
    }

    return result;
}
```

---

### üß± 4. Model: `ProductTrade3D.cs`

```csharp
public class ProductTrade3D
{
    public string Location { get; set; }
    public int TotalDeals { get; set; }
    public string ProductName { get; set; }
}
```

---

### üì¶ 5. JS Interop (plotlyInterop.js)

```js
window.renderPlotly3DChart = (chartId, xValues, yValues, zValues) => {
    const data = [{
        type: 'surface',
        x: xValues,
        y: yValues,
        z: zValues,
        colorscale: 'Viridis',
        showscale: true
    }];

    const layout = {
        title: '3D OTC Product Distribution',
        scene: {
            xaxis: { title: 'Product' },
            yaxis: { title: 'Location' },
            zaxis: { title: 'Deals' }
        },
        margin: { l: 0, r: 0, b: 0, t: 50 }
    };

    Plotly.newPlot(chartId, data, layout);
};
```

---

‚úÖ With this, you‚Äôve:
- Created a dedicated section (`/product`)
- Used dropdown to select between graphs
- Cleanly modularized your graph logic

---

Would you like me to prep `ProductGraph2.razor` (for "OTC product types in last 7 days") next?
