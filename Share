Thought for a couple of seconds


When you moved to the “minimal API” style, you most likely removed the calls that wire up Razor Pages, so the router no longer knows about your `_Host.cshtml`. You need both:

1. **AddRazorPages()** in the DI setup
2. **MapRazorPages()** (or `MapFallbackToPage`) in the endpoint routing

Here’s a drop-in **Program.cs** for your **StarTrends** (Blazor Server) app that will restore the fallback:

```csharp
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using StarTrends.Services;

var builder = WebApplication.CreateBuilder(args);

// 1) Register Razor Pages & Blazor Server
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();

// 2) Register your data/chart services
builder.Services.AddScoped<IOracleDataService, OracleDataService>();
builder.Services.AddScoped<IChartGeneratorService, ChartGeneratorService>();

var app = builder.Build();

// 3) Standard middleware
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
}
app.UseStaticFiles();
app.UseRouting();

// 4) Map endpoints
app.MapRazorPages();            // <— this makes /Pages/*.cshtml discoverable
app.MapBlazorHub();             // <— Blazor Server SignalR hub
app.MapFallbackToPage("/_Host"); // <— any other URL falls back to Pages/_Host.cshtml

app.Run();
```

**Check your `_Host.cshtml`** lives under **Pages/** and begins with `@page "/"`, for example:

```cshtml
@page "/"
@namespace StarTrends.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <base href="~/" />
  <title>StarTrends</title>
  <link href="css/site.css" rel="stylesheet" />
</head>
<body>
  <component type="typeof(App)" render-mode="ServerPrerendered" />
  <script src="_framework/blazor.server.js"></script>
</body>
</html>
```

Once you restore `AddRazorPages()` and `MapRazorPages()` (plus the `MapFallbackToPage`), your root URL (`/`) and any other client‐side route will correctly render your Blazor app instead of throwing the fallback‐endpoint error.
