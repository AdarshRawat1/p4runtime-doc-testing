Perfect! We'll implement the **"OTC contracts booked by source system in last 7 days excluding synthetics"** chart using the same modular approach we've been using. Here's how weâ€™ll proceed:

---

### âœ… Step-by-Step Plan

#### ðŸ”¹ 1. Model (`Models/SourceSystemTrade.cs`)
```csharp
namespace Star.Models
{
    public class SourceSystemTrade
    {
        public string SourceSystem { get; set; } = string.Empty;
        public int DealsBooked { get; set; }
    }
}
```

---

#### ðŸ”¹ 2. Oracle Service Method (`Services/OracleDataService.cs`)
```csharp
public async Task<List<SourceSystemTrade>> GetSourceSystemTradesAsync()
{
    var result = new List<SourceSystemTrade>();
    using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();

    using var cmd = conn.CreateCommand();
    cmd.CommandText = @"
        SELECT CASE
                 WHEN s.dsc IS NULL THEN 'Star'
                 ELSE s.dsc
               END AS source_system,
               COUNT(1) AS deals_booked
        FROM (SELECT c.mrr_typ_cod, c.inp_dt, c.src_sys_cod
              FROM star_contract PARTITION(product_oth) c) t
        LEFT JOIN star_src_sys s ON t.src_sys_cod = s.src_sys_cod
        WHERE t.inp_dt > trunc(SYSDATE) - 7
          AND t.mrr_typ_cod IN (0, 1, 6)
        GROUP BY s.dsc
        ORDER BY deals_booked DESC";

    using var reader = await cmd.ExecuteReaderAsync();
    while (await reader.ReadAsync())
    {
        result.Add(new SourceSystemTrade
        {
            SourceSystem = reader["source_system"]?.ToString() ?? "Unknown",
            DealsBooked = reader["deals_booked"] != DBNull.Value ? Convert.ToInt32(reader["deals_booked"]) : 0
        });
    }

    return result;
}
```

---

#### ðŸ”¹ 3. Interface (`Services/IOracleDataService.cs`)
```csharp
Task<List<SourceSystemTrade>> GetSourceSystemTradesAsync();
```

---

#### ðŸ”¹ 4. Razor Component (`Shared/Charts/SourceSystemTradeChart.razor`)
```razor
@inject IOracleDataService DataService
@inject IJSRuntime JSRuntime

<h5 class="fw-semibold">OTC Contracts by Source System (Last 7 Days)</h5>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="() => GenerateGraph(false)">Show Normal</button>
    <button class="btn btn-secondary" @onclick="() => GenerateGraph(true)">Show Zoomed</button>
</div>

@if (IsLoading)
{
    <StarLoader Message="Fetching source system contract data..." />
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<div id="sourceSystemChart" style="width: 100%; height: 500px;" class="@(IsLoading ? "d-none" : "")"></div>

@code {
    private bool IsLoading;
    private string? ErrorMessage;

    private async Task GenerateGraph(bool logScale)
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;

            var data = await DataService.GetSourceSystemTradesAsync();

            var chartData = new
            {
                labels = data.Select(x => x.SourceSystem).ToList(),
                values = data.Select(x => (double)x.DealsBooked).ToList(),
                title = "OTC Contracts by Source System (Last 7 Days)",
                xLabel = "Source System",
                yLabel = "Contracts"
            };

            await JSRuntime.InvokeVoidAsync("renderPlotlyBarChart", "sourceSystemChart", chartData, logScale);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }
}
```

---

Now you can plug this into the **Trade** section sidebar with a menu item like:

```html
<NavLink href="/trade/source-systems" Match="NavLinkMatch.All">Source System Trades</NavLink>
```

Let me know if you'd like the route page to be created too (`Pages/Trade/SourceSystemTrades.razor`) â€” or if we move to the next chart right away.
