Perfect! Let's proceed with implementing this new chart **modularly**. Here's what weâ€™ll do in **3 parts**:

---

### âœ… 1. **Model**
Create a file: `Models/RecBreakCause.cs`

```csharp
namespace Star.Models
{
    public class RecBreakCause
    {
        public string BreakElement { get; set; } = string.Empty;
        public int RecBreaks { get; set; }
        public string ProductName { get; set; } = string.Empty;
    }
}
```

---

### âœ… 2. **Oracle Service Logic**
Update `OracleDataService.cs` and `IOracleDataService.cs`.

#### ðŸ“„ In `IOracleDataService.cs`:

```csharp
Task<List<RecBreakCause>> GetTopRecBreakCausesAsync();
```

#### ðŸ“„ In `OracleDataService.cs`:

```csharp
public async Task<List<RecBreakCause>> GetTopRecBreakCausesAsync()
{
    var result = new List<RecBreakCause>();

    try
    {
        using var conn = new OracleConnection(_connectionString);
        await conn.OpenAsync();

        using var cmd = conn.CreateCommand();
        cmd.CommandText = @"
            -- your big SQL query exactly as given (no change needed)
            WITH recbreaks AS (...) -- FULL QUERY
            SELECT *
            FROM recbreaks
            WHERE  brk_element IN  (SELECT brk_element FROM recbreaksorderd WHERE rownum <= 5)
            AND prd_typ_name IN (SELECT prd_typ_name FROM productorders WHERE rownum <= 5)
            ORDER BY brk_element";

        using var reader = await cmd.ExecuteReaderAsync();
        while (await reader.ReadAsync())
        {
            var element = reader["BRK_ELEMENT"]?.ToString() ?? string.Empty;
            var product = reader["PRD_TYP_NAME"]?.ToString() ?? string.Empty;
            var breaks = reader["Rec Breaks"] != DBNull.Value ? Convert.ToInt32(reader["Rec Breaks"]) : 0;

            result.Add(new RecBreakCause
            {
                BreakElement = element,
                ProductName = product,
                RecBreaks = breaks
            });
        }
    }
    catch (Exception ex)
    {
        throw new Exception("Error fetching top rec break causes", ex);
    }

    return result;
}
```

---

### âœ… 3. **Reusable Component**
Create component: `Shared/Charts/RecBreakCauseChart.razor`

```razor
@inject IOracleDataService DataService
@inject IJSRuntime JSRuntime

<h5 class="fw-semibold">Top 5 Rec Break Causes - Last 4 Years</h5>
<div class="mb-3">
    <button class="btn btn-sm btn-primary me-2" @onclick="() => GenerateGraph(false)">Show Normal</button>
    <button class="btn btn-sm btn-secondary" @onclick="() => GenerateGraph(true)">Show Zoomed</button>
</div>

@if (IsLoading)
{
    <StarLoader Message="Fetching rec break cause data..." />
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<div id="recBreakChart" style="width: 100%; height: 400px;" class="@(IsLoading ? "d-none" : "")"></div>

@code {
    private bool IsLoading = false;
    private string? ErrorMessage;

    private async Task GenerateGraph(bool logScale)
    {
        IsLoading = true;
        ErrorMessage = null;

        try
        {
            var data = await DataService.GetTopRecBreakCausesAsync();

            var labels = data.Select(d => $"{d.BreakElement} ({d.ProductName})").ToList();
            var values = data.Select(d => (double)d.RecBreaks).ToList();

            var chartData = new
            {
                labels,
                values,
                title = "Top 5 Rec Break Causes (5 Worst Offending Products)",
                xLabel = "Break Element & Product",
                yLabel = "Rec Break Count"
            };

            await JSRuntime.InvokeVoidAsync("renderPlotlyBarChart", "recBreakChart", chartData, logScale);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }
}
```

---

### ðŸ“‚ File Location Recap

- `Models/RecBreakCause.cs`
- `Shared/Charts/RecBreakCauseChart.razor`
- Service logic in `OracleDataService.cs` and `IOracleDataService.cs`

You can now place `<RecBreakCauseChart />` in any `.razor` page like `Trade.razor`.

---

Let me know when youâ€™re ready for the next graph or need me to auto-insert this into your Trade section page.
