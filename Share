Below are the **8 steps**—with full error handling—for each of the two bar-charts. **GraphIDs** and **Titles** match exactly your names.

---

## 1️⃣ Blotters features used last month

```csharp
// 1. Model
public class BlotterFeatureUsageLastMonth
{
    public string BlotterFeature { get; set; }
    public int    TimesUsed      { get; set; }
}
```

```csharp
// 2. IOracleDataService
Task<IEnumerable<BlotterFeatureUsageLastMonth>> GetBlotterFeaturesUsedLastMonthAsync(DateTime since);
```

```csharp
// 3. OracleDataService
public async Task<IEnumerable<BlotterFeatureUsageLastMonth>> GetBlotterFeaturesUsedLastMonthAsync(DateTime since)
{
    var list = new List<BlotterFeatureUsageLastMonth>();
    await using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();

    const string sql = @"
SELECT r.feature           AS BlotterFeature,
       COUNT(1)             AS TimesUsed
  FROM star_action_audit r
 WHERE r.mod_dt > :since
   AND r.feature_type = 'BLOTTER'
   AND r.feature <> 'Open trade'
   AND r.feature NOT LIKE '% - Load'
   AND r.feature NOT LIKE '% - On startup'
   AND r.feature NOT LIKE '% - Open'
   AND r.feature NOT LIKE '% - Open Item'
 GROUP BY r.feature
 ORDER BY TimesUsed DESC";

    await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
    cmd.Parameters.Add("since", OracleDbType.Date).Value = since;

    await using var rdr = await cmd.ExecuteReaderAsync();
    while (await rdr.ReadAsync())
    {
        list.Add(new BlotterFeatureUsageLastMonth {
            BlotterFeature = rdr.GetString(rdr.GetOrdinal("BlotterFeature")),
            TimesUsed      = rdr.GetInt32 (rdr.GetOrdinal("TimesUsed"))
        });
    }

    return list;
}
```

```csharp
// 4. IChartGeneratorService
Task<string> GenerateBlotterFeaturesUsedLastMonthChartAsync(IEnumerable<BlotterFeatureUsageLastMonth> data);
```

```csharp
// 5. ChartGeneratorService
public async Task<string> GenerateBlotterFeaturesUsedLastMonthChartAsync(IEnumerable<BlotterFeatureUsageLastMonth> data)
{
    var ts      = DateTime.UtcNow:ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir,   $"blotter_features_used_last_month_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"blotter_features_used_last_month_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "BlotterFeature,TimesUsed\n" +
        string.Join("\n", data.Select(d => $"{d.BlotterFeature},{d.TimesUsed}")));

    var script = Path.Combine(_scriptDir, "generate_blotter_features_used_last_month_chart.py");
    var psi    = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Could not start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrWhiteSpace(err))
        _log.LogError("Python error: {Err}", err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}
```

```python
# 6. generate_blotter_features_used_last_month_chart.py
import sys, pandas as pd, matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp)
    fig, ax = plt.subplots(figsize=(10,6))
    if df.empty:
        ax.text(0.5,0.5,'No data to display',ha='center',va='center',fontsize=14)
        ax.axis('off')
    else:
        ax.bar(df['BlotterFeature'], df['TimesUsed'])
        for i,v in enumerate(df['TimesUsed']):
            ax.text(i, v, str(v), ha='center', va='bottom')
        plt.xticks(rotation=45, ha='right')
        plt.ylabel('Times used')
        plt.tight_layout()
    plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3: sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

```csharp
// 7. ChartUpdaterWorker.cs
// ----------------------------------------------------------------
// Blotters features used last month
// ----------------------------------------------------------------
try
{
    _log.LogInformation("Starting blotter_features_used_last_month at {Time}", DateTime.UtcNow);
    var data = await oracle.GetBlotterFeaturesUsedLastMonthAsync(DateTime.UtcNow.AddDays(-30));
    if (data == null) throw new InvalidOperationException("No data returned");
    var url = await generator.GenerateBlotterFeaturesUsedLastMonthChartAsync(data);
    metadata["blotter_features_used_last_month"] = new { ImageUrl = url, LastUpdated = DateTime.UtcNow };
    _log.LogInformation("blotter_features_used_last_month updated -> {Url}", url);
}
catch (Exception ex)
{
    _log.LogError(ex, "Failed blotter_features_used_last_month at {Time}", DateTime.UtcNow);
}
```

```razor
@* 8. Razor *@
<GraphBox GraphID="blotter_features_used_last_month"
          Title="Blotters features used last month" />
```

---

## 2️⃣ Static used last month

```csharp
// 1. Model
public class StaticUsageLastMonth
{
    public string StaticName { get; set; }
    public int    TimesUsed  { get; set; }
}
```

```csharp
// 2. IOracleDataService
Task<IEnumerable<StaticUsageLastMonth>> GetStaticUsedLastMonthAsync(DateTime since);
```

```csharp
// 3. OracleDataService
public async Task<IEnumerable<StaticUsageLastMonth>> GetStaticUsedLastMonthAsync(DateTime since)
{
    var list = new List<StaticUsageLastMonth>();
    await using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();

    const string sql = @"
SELECT r.feature    AS StaticName,
       COUNT(1)     AS TimesUsed
  FROM star_action_audit r
 WHERE r.mod_dt > :since
   AND r.feature_type = 'STATIC'
 GROUP BY r.feature
 ORDER BY TimesUsed DESC";

    await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
    cmd.Parameters.Add("since", OracleDbType.Date).Value = since;

    await using var rdr = await cmd.ExecuteReaderAsync();
    while (await rdr.ReadAsync())
        list.Add(new StaticUsageLastMonth {
            StaticName = rdr.GetString(rdr.GetOrdinal("StaticName")),
            TimesUsed  = rdr.GetInt32 (rdr.GetOrdinal("TimesUsed"))
        });

    return list;
}
```

```csharp
// 4. IChartGeneratorService
Task<string> GenerateStaticUsedLastMonthChartAsync(IEnumerable<StaticUsageLastMonth> data);
```

```csharp
// 5. ChartGeneratorService
public async Task<string> GenerateStaticUsedLastMonthChartAsync(IEnumerable<StaticUsageLastMonth> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir,   $"static_used_last_month_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"static_used_last_month_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "StaticName,TimesUsed\n" +
        string.Join("\n", data.Select(d => $"{d.StaticName},{d.TimesUsed}")));

    var script = Path.Combine(_scriptDir, "generate_static_used_last_month_chart.py");
    var psi    = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Could not start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrWhiteSpace(err))
        _log.LogError("Python error: {Err}", err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}
```

```python
# 6. generate_static_used_last_month_chart.py
import sys, pandas as pd, matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp)
    fig, ax = plt.subplots(figsize=(10,6))
    if df.empty:
        ax.text(0.5,0.5,'No data to display',ha='center',va='center',fontsize=14)
        ax.axis('off')
    else:
        ax.bar(df['StaticName'], df['TimesUsed'])
        for i,v in enumerate(df['TimesUsed']):
            ax.text(i, v, str(v), ha='center', va='bottom')
        plt.xticks(rotation=45, ha='right')
        plt.ylabel('Times used')
        plt.tight_layout()
    plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3: sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

```csharp
// 7. ChartUpdaterWorker.cs
// ----------------------------------------------------------------
// Static used last month
// ----------------------------------------------------------------
try
{
    _log.LogInformation("Starting static_used_last_month at {Time}", DateTime.UtcNow);
    var data = await oracle.GetStaticUsedLastMonthAsync(DateTime.UtcNow.AddDays(-30));
    if (data == null) throw new InvalidOperationException("No data returned");
    var url = await generator.GenerateStaticUsedLastMonthChartAsync(data);
    metadata["static_used_last_month"] = new { ImageUrl = url, LastUpdated = DateTime.UtcNow };
    _log.LogInformation("static_used_last_month updated -> {Url}", url);
}
catch (Exception ex)
{
    _log.LogError(ex, "Failed static_used_last_month at {Time}", DateTime.UtcNow);
}
```

```razor
@* 8. Razor *@
<GraphBox GraphID="static_used_last_month"
          Title="Static used last month" />
```
