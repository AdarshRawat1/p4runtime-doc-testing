// File: Services/ChartGeneratorService.cs
using System;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;          // <-- changed
using Microsoft.Extensions.Logging;
using StarTrends.Models;

namespace StarTrends.Services
{
    public class ChartGeneratorService : IChartGeneratorService
    {
        private readonly ILogger<ChartGeneratorService> _logger;
        private readonly string _scriptsFolder;
        private readonly string _chartsFolder;

        public ChartGeneratorService(
            ILogger<ChartGeneratorService> logger,
            IConfiguration config,
            IHostEnvironment env)               // <-- changed
        {
            _logger = logger;

            // PythonScripts lives next to your .csproj
            _scriptsFolder = Path.Combine(
                env.ContentRootPath,
                config["ChartScriptsPath"] ?? "PythonScripts");

            // Charts are served from wwwroot/charts
            _chartsFolder = Path.Combine(
                env.ContentRootPath,
                "wwwroot",
                config["ChartsOutputPath"] ?? "charts");

            Directory.CreateDirectory(_scriptsFolder);
            Directory.CreateDirectory(_chartsFolder);
        }

        public async Task<string> GenerateProductTradeChartAsync(IEnumerable<ProductTradeCount> data)
        {
            var timestamp = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
            var csvPath   = Path.Combine(_scriptsFolder, $"product_trades_{timestamp}.csv");
            var pngPath   = Path.Combine(_chartsFolder,    $"product_trades_{timestamp}.png");

            // 1) Write CSV
            await using (var writer = new StreamWriter(csvPath))
            {
                writer.WriteLine("ProductTypeName,TotalTrades");
                foreach (var item in data)
                    await writer.WriteLineAsync($"{item.ProductTypeName},{item.TotalTrades}");
            }

            // 2) Call the Python script
            var scriptFile = Path.Combine(_scriptsFolder, "generate_product_trade_chart.py");
            if (!File.Exists(scriptFile))
                throw new FileNotFoundException($"Chart script not found at {scriptFile}");

            var psi = new ProcessStartInfo
            {
                FileName            = "python",
                Arguments           = $"\"{scriptFile}\" \"{csvPath}\" \"{pngPath}\"",
                RedirectStandardError = true,
                UseShellExecute     = false
            };

            using var proc = Process.Start(psi)
                             ?? throw new InvalidOperationException("Failed to launch Python.");
            var err = await proc.StandardError.ReadToEndAsync();
            await proc.WaitForExitAsync();

            if (!string.IsNullOrEmpty(err))
                _logger.LogError("Python error: {Error}", err);

            return $"/charts/{Path.GetFileName(pngPath)}";
        }
    }
}
