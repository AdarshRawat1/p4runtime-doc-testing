@page "/feature-usage" @using Star.Services @inject IOracleDataService DataService @inject IJSRuntime JSRuntime

<h3>Feature Usage Chart</h3><button class="btn btn-primary mb-3" @onclick="RenderGraph">Load Graph</button>

@if (!string.IsNullOrEmpty(ErrorMessage)) { <div class="alert alert-danger">@ErrorMessage</div> } else if (Features != null && Features.Any()) { <ul class="list-group mb-3"> @foreach (var f in Features) { <li class="list-group-item d-flex justify-content-between"> <span>@f.Feature</span> <span class="badge bg-success">@f.UsageCount</span> </li> } </ul> <div id="featureUsageChart" style="width:100%;height:500px;"></div> }

@code { private List<FeatureUsage> Features = new(); private string? ErrorMessage; private bool IsChartRendered = false;

private async Task RenderGraph()
{
    try
    {
        Features = await DataService.GetFeatureUsageAsync();

        if (Features == null || Features.Count == 0)
        {
            ErrorMessage = "No data found for Feature Usage.";
            return;
        }

        var labels = Features.Select(f => f.Feature).ToList();
        var values = Features.Select(f => (double)f.UsageCount).ToList();

        var chartData = new
        {
            labels,
            values,
            title = "Feature Usage in Last 30 Days",
            xLabel = "Feature",
            yLabel = "Count"
        };

        await JSRuntime.InvokeVoidAsync("renderPlotlyBarChart", "featureUsageChart", chartData);
        IsChartRendered = true;
    }
    catch (Exception ex)
    {
        ErrorMessage = ex.Message;
    }
}

}

