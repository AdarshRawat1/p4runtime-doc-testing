 // ChartGeneratorService.cs

public async Task<string> GenerateOtcManualWorkflowTradesPerWeekChartAsync(IEnumerable<OtcManualWorkflowTradesPerWeekCount> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir, $"otc_manual_workflow_trades_per_week_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"otc_manual_workflow_trades_per_week_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Week,ManuDeals\n" +
        string.Join("\n", data.Select(d => $"{d.Week:yyyy-MM-dd},{d.ManuDeals}"))
    );

    var script = Path.Combine(_scriptDir, "generate_otc_manual_workflow_trades_per_week_chart.py");
    var psi    = new ProcessStartInfo("python", $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi) 
                  ?? throw new InvalidOperationException("Cannot start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrEmpty(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}

public async Task<string> GenerateContractsSentToBackOfficeChartAsync(IEnumerable<ContractsSentToBackOfficeCount> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir, $"contracts_backoffice_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"contracts_backoffice_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "BackOffice,Deals,Month\n" +
        string.Join("\n", data.Select(d => $"{d.BackOffice},{d.Deals},{d.Month:yyyy-MM-dd}"))
    );

    var script = Path.Combine(_scriptDir, "generate_contracts_sent_to_back_office_chart.py");
    var psi    = new ProcessStartInfo("python", $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Cannot start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrEmpty(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}

public async Task<string> GenerateDeletionsOnMurexChartAsync(IEnumerable<DeletionsOnMurexCount> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir, $"deletions_murex_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"deletions_murex_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Week,Deals\n" +
        string.Join("\n", data.Select(d => $"{d.Week:yyyy-MM-dd},{d.Deals}"))
    );

    var script = Path.Combine(_scriptDir, "generate_deletions_on_murex_chart.py");
    var psi    = new ProcessStartInfo("python", $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Cannot start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrEmpty(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}

public async Task<string> GenerateOtcIntradayRecBreaksPerWeekChartAsync(IEnumerable<OtcIntradayRecBreaksPerWeekCount> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir, $"otc_intraday_rec_breaks_per_week_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"otc_intraday_rec_breaks_per_week_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Week,RecBreaks\n" +
        string.Join("\n", data.Select(d => $"{d.Week:yyyy-MM-dd},{d.RecBreaks}"))
    );

    var script = Path.Combine(_scriptDir, "generate_otc_intraday_rec_breaks_per_week_chart.py");
    var psi    = new ProcessStartInfo("python", $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Cannot start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrEmpty(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}

public async Task<string> GenerateOtcTradesSavedPerMinuteChartAsync(IEnumerable<OtcTradesSavedPerMinuteCount> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir, $"otc_trades_saved_per_minute_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"otc_trades_saved_per_minute_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Minute,TradesSaved\n" +
        string.Join("\n", data.Select(d => $"{d.Minute},{d.TradesSaved}"))
    );

    var script = Path.Combine(_scriptDir, "generate_otc_trades_saved_per_minute_chart.py");
    var psi    = new ProcessStartInfo("python", $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Cannot start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrEmpty(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}

public async Task<string> GenerateOtcRecBreaksByReasonChartAsync(IEnumerable<OtcRecBreaksByReasonCount> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir, $"otc_rec_breaks_by_reason_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"otc_rec_breaks_by_reason_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "BreakReason,Breaks,Month\n" +
        string.Join("\n", data.Select(d => $"{d.BreakReason},{d.Breaks},{d.Month:yyyy-MM-dd}"))
    );

    var script = Path.Combine(_scriptDir, "generate_otc_rec_breaks_by_reason_chart.py");
    var psi    = new ProcessStartInfo("python", $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Cannot start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrEmpty(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}

public async Task<string> GenerateMwRecBreaksPerThousandChartAsync(IEnumerable<MwRecBreaksPerThousandCount> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir, $"mw_rec_breaks_per_1000_deals_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"mw_rec_breaks_per_1000_deals_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Week,RecBreaksPerThousandDeals\n" +
        string.Join("\n", data.Select(d => $"{d.Week:yyyy-MM-dd},{d.RecBreaksPerThousandDeals:F2}"))
    );

    var script = Path.Combine(_scriptDir, "generate_mw_rec_breaks_per_thousand_chart.py");
    var psi    = new ProcessStartInfo("python", $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Cannot start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrEmpty(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}
