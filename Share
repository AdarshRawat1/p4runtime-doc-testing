Below is every file you need to wire up **Blazor Server → Oracle DB → Python/Matplotlib → PNG → Blazor image** end‐to‐end. Just drop these into a new `ChartDashboard` folder (matching the paths), restore NuGets, update your connection string, and run.

---

### 1) appsettings.json

```json
{
  "ConnectionStrings": {
    "OracleDb": "User Id=YOUR_USER;Password=YOUR_PASS;Data Source=YOUR_TNS_OR_HOST:PORT/SERVICE"
  }
}
```

---

### 2) Program.cs

```csharp
using ChartDashboard.Data;
using ChartDashboard.Services;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

var builder = WebApplication.CreateBuilder(args);

// MVC + caching
builder.Services.AddControllers();
builder.Services.AddMemoryCache();

// your Oracle repo & chart service
builder.Services.AddScoped<IGraphDataRepo, OracleDataRepo>();
builder.Services.AddScoped<IGraphService, GraphService>();

// Blazor Server
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();

var app = builder.Build();

// HTTP API
app.MapControllers();

// Blazor endpoints
app.MapBlazorHub();
app.MapFallbackToPage("/_Host");

app.Run();
```

---

### 3) Models/OtcData.cs

```csharp
namespace ChartDashboard.Models
{
    public class OtcData
    {
        public string Product     { get; set; } = default!;
        public int    TotalTrades { get; set; }
    }
}
```

---

### 4) Data/IGraphDataRepo.cs & OracleDataRepo.cs

```csharp
// Data/IGraphDataRepo.cs
using ChartDashboard.Models;

namespace ChartDashboard.Data
{
    public interface IGraphDataRepo
    {
        /// <summary>
        /// Returns a list of products and their trade counts over the past <paramref name="days"/>.
        /// </summary>
        Task<List<OtcData>> FetchOtcDataAsync(int days);
    }
}
```

```csharp
// Data/OracleDataRepo.cs
using ChartDashboard.Models;
using Microsoft.Extensions.Configuration;
using Oracle.ManagedDataAccess.Client;

namespace ChartDashboard.Data
{
    public class OracleDataRepo : IGraphDataRepo
    {
        private readonly string _connString;

        public OracleDataRepo(IConfiguration config)
        {
            _connString = config.GetConnectionString("OracleDb")
                ?? throw new InvalidOperationException("Missing OracleDb connection string");
        }

        public async Task<List<OtcData>> FetchOtcDataAsync(int days)
        {
            const string sql = @"
SELECT c.prd_typ_name AS Product,
       COUNT(*)          AS TotalTrades
  FROM star_workflow w
  JOIN (
    SELECT a.*,
      CASE
        WHEN a.prd_typ_cod = 'IR1' THEN 'IR Swap (Fx/Fl)'
        WHEN a.prd_typ_cod = 'IR2' THEN 'IR Swap (IMM)'
        WHEN a.prd_typ_cod = 'IR3' THEN 'IR Swap (Fl/Fl)'
        WHEN a.prd_typ_cod = 'CC1' THEN 'CCY (Fx/Fl)'
        WHEN a.prd_typ_cod = 'CC2' THEN 'CCY (Fl/Fl)'
        WHEN a.prd_typ_cod = 'CC3' THEN 'CCY (Fx/Fx)'
        WHEN a.prd_typ_cod = 'FRA' THEN 'FRA'
        WHEN a.prd_typ_cod = 'CAP' THEN 'Cap'
        WHEN a.prd_typ_cod = 'FLR' THEN 'Floor'
        WHEN a.prd_typ_cod = 'CFS' THEN 'Cap/Floor Straddle'
        WHEN a.prd_typ_cod = 'COL' THEN 'Cap/Floor Collar'
        WHEN a.prd_typ_cod = 'OSP' THEN 'Swaption Pay'
        WHEN a.prd_typ_cod = 'OSR' THEN 'Swaption Rec'
        WHEN a.prd_typ_cod = 'OSS' THEN 'Swaption Strad'
        WHEN a.prd_typ_cod = 'DFX' THEN 'Deposit (Fixed)'
        WHEN a.prd_typ_cod = 'DFL' THEN 'Deposit (Float)'
        WHEN a.prd_typ_cod = 'CSH' THEN 'Cashflow'
        WHEN a.prd_typ_cod = 'BOC' THEN 'Bond Option Straddle'
        WHEN a.prd_typ_cod = 'BME' THEN 'Container BME'
        WHEN a.prd_typ_cod = 'IL1' THEN 'Inflation swap (In/Fx)'
        WHEN a.prd_typ_cod = 'IL2' THEN 'Inflation swap (In/Fl)'
        WHEN a.prd_typ_cod = 'IL3' THEN 'Inflation Fixing Lock (In)'
        ELSE a.prd_typ_cod
      END AS prd_typ_name
      FROM star_contract PARTITION(product_oth) a
  ) c
    ON c.con_no = w.con_no
 WHERE w.inp_dt     > TRUNC(SYSDATE - :Days)
   AND c.mrr_typ_cod IN (0,1,6)
 GROUP BY c.prd_typ_name
 ORDER BY TotalTrades DESC";

            var list = new List<OtcData>();
            await using var conn = new OracleConnection(_connString);
            await conn.OpenAsync();

            await using var cmd = conn.CreateCommand();
            cmd.CommandText = sql;
            cmd.BindByName   = true;
            cmd.Parameters.Add(new OracleParameter("Days", days));

            await using var rdr = await cmd.ExecuteReaderAsync();
            while (await rdr.ReadAsync())
            {
                list.Add(new OtcData
                {
                    Product     = rdr.GetString(0),
                    TotalTrades = rdr.GetInt32(1)
                });
            }

            return list;
        }
    }
}
```

---

### 5) PythonTools/render.py

```python
#!/usr/bin/env python
import sys, json
import matplotlib.pyplot as plt

def main():
    # read JSON list of { "product": str, "totalTrades": int }
    data = json.load(sys.stdin)
    labels = [d["product"]     for d in data]
    values = [d["totalTrades"] for d in data]

    fig, ax = plt.subplots(figsize=(8, 4))
    ax.bar(labels, values)
    ax.set_title("OTC Product Types (last 7 days)")
    ax.set_ylabel("Total Trades")
    plt.xticks(rotation=30, ha="right")
    plt.tight_layout()

    # write PNG binary to stdout
    buf = sys.stdout.buffer
    fig.savefig(buf, format="png")
    buf.flush()

if __name__ == "__main__":
    main()
```

> **Make executable** (Linux/macOS):  
> ```bash
> chmod +x PythonTools/render.py
> ```

---

### 6) Services/IGraphService.cs & GraphService.cs

```csharp
// Services/IGraphService.cs
namespace ChartDashboard.Services
{
    public interface IGraphService
    {
        /// <summary>
        /// Generates a PNG of the OTC product‐types chart by:
        /// 1) fetching data from Oracle
        /// 2) piping it to Python/Matplotlib
        /// 3) returning the PNG bytes
        /// </summary>
        Task<byte[]> GenerateOtcProductTypesChartAsync();
    }
}
```

```csharp
// Services/GraphService.cs
using System.Diagnostics;
using System.Text.Json;
using ChartDashboard.Data;

namespace ChartDashboard.Services
{
    public class GraphService : IGraphService
    {
        private readonly IGraphDataRepo _repo;

        public GraphService(IGraphDataRepo repo)
        {
            _repo = repo;
        }

        public async Task<byte[]> GenerateOtcProductTypesChartAsync()
        {
            // 1) fetch raw data
            var raw = await _repo.FetchOtcDataAsync(days: 7);

            // 2) serialize to JSON
            var payload = JsonSerializer.Serialize(raw);

            // 3) start Python renderer
            var psi = new ProcessStartInfo
            {
                FileName               = "python",                  // or full path if needed
                Arguments              = "PythonTools/render.py",
                RedirectStandardInput  = true,
                RedirectStandardOutput = true,
                RedirectStandardError  = true,
                UseShellExecute        = false,
                CreateNoWindow         = true,
                WorkingDirectory       = AppContext.BaseDirectory
            };

            using var proc = Process.Start(psi)
                ?? throw new InvalidOperationException("Failed to start Python process");

            // 4) send JSON → stdin
            await proc.StandardInput.WriteAsync(payload);
            proc.StandardInput.Close();

            // 5) read PNG bytes ← stdout
            using var ms = new MemoryStream();
            await proc.StandardOutput.BaseStream.CopyToAsync(ms);

            // 6) optional: log errors
            var err = await proc.StandardError.ReadToEndAsync();
            if (!string.IsNullOrWhiteSpace(err))
            {
                // e.g. logger.LogWarning(err);
            }

            await proc.WaitForExitAsync();
            return ms.ToArray();
        }
    }
}
```

---

### 7) Controllers/GraphController.cs

```csharp
using ChartDashboard.Services;
using Microsoft.AspNetCore.Mvc;

namespace ChartDashboard.Controllers
{
    [ApiController]
    [Route("api/graphs")]
    public class GraphController : ControllerBase
    {
        private readonly IGraphService _svc;

        public GraphController(IGraphService svc)
        {
            _svc = svc;
        }

        [HttpGet("otc-product-types")]
        public async Task<IActionResult> GetOtcChart()
        {
            try
            {
                var png = await _svc.GenerateOtcProductTypesChartAsync();
                return File(png, "image/png");
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "Chart generation failed", detail = ex.Message });
            }
        }
    }
}
```

---

### 8) Shared/ChartViewer.razor

```razor
@inject HttpClient Http

<div>
  @if (_imgBase64 is null)
  {
    <p>Loading chart…</p>
  }
  else
  {
    <img src="data:image/png;base64,@_imgBase64" alt="OTC Chart" class="img-fluid" />
  }
</div>

@code {
    private string? _imgBase64;

    protected override async Task OnInitializedAsync()
    {
        var bytes = await Http.GetByteArrayAsync("api/graphs/otc-product-types");
        _imgBase64 = Convert.ToBase64String(bytes);
    }
}
```

---

### 9) Pages/Index.razor

```razor
@page "/"
@using ChartDashboard.Shared

<h3>OTC Product Types (last 7 days)</h3>
<ChartViewer />
```

---

### 10) Package references

Run these in your project folder:

```bash
dotnet add package Oracle.ManagedDataAccess.Core
dotnet add package Microsoft.AspNetCore.Components.Web
dotnet add package Microsoft.AspNetCore.Components.WebAssembly.Server
```

Make sure **PythonTools/render.py** is copied to output (in your `.csproj`):

```xml
<ItemGroup>
  <None Include="PythonTools\render.py">
    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
  </None>
</ItemGroup>
```

---

## ✅ Next steps

1. **Restore** & **run** your app: `dotnet run`  
2. Browse to `https://localhost:5001` and you should see your Matplotlib‐generated chart.  
3. **Replace** any hard‐coded values (e.g. connection string) and tweak sizing or styles as needed.  

This gives you a fully working baseline—now you can layer on caching, per‐chart intervals, last‐updated headers, and a refresh button whenever you’re ready.























using StarTrends.Data;
using StarTrends.Services;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

var builder = WebApplication.CreateBuilder(args);

// 1) Services
builder.Services.AddControllers();
builder.Services.AddMemoryCache();

// Oracle data + chart services
builder.Services.AddScoped<IGraphDataRepo, OracleDataRepo>();
builder.Services.AddScoped<IGraphService,   GraphService>();

// Blazor Server
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();

var app = builder.Build();

// 2) Middleware pipeline
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");  // or your error page
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

// 3) Endpoints
app.MapControllers();            // your /api/graphs endpoints
app.MapBlazorHub();              // SignalR hub for Blazor Server
app.MapFallbackToPage("/_Host"); // serve Pages/_Host.cshtml for everything else

app.Run();
