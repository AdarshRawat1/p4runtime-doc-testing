Below are the **8 steps** for each new chart, following our established pattern—but omitting the chart type from names:

---

## 1️⃣ Markets Set Last Month

1. **Model**

   ```csharp
   public class MarketCount
   {
       public string Market    { get; set; }
       public int    TimesUsed { get; set; }
   }
   ```

2. **IOracleDataService**

   ```csharp
   Task<IEnumerable<MarketCount>> GetMarketUsageAsync(DateTime since);
   ```

3. **OracleDataService**

   ```csharp
   public async Task<IEnumerable<MarketCount>> GetMarketUsageAsync(DateTime since)
   {
       var list = new List<MarketCount>();
       await using var conn = new OracleConnection(_connectionString);
       await conn.OpenAsync();
       const string sql = @"
   SELECT 
     r.feature         AS Market,
     COUNT(1)          AS TimesUsed
   FROM star_action_audit r
   WHERE r.mod_dt > :since
     AND r.feature_type = 'MARKET'
   GROUP BY r.feature
   ORDER BY TimesUsed DESC";
       await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
       cmd.Parameters.Add("since", OracleDbType.Date).Value = since;
       await using var rdr = await cmd.ExecuteReaderAsync();
       while (await rdr.ReadAsync())
           list.Add(new MarketCount {
               Market    = rdr.GetString(rdr.GetOrdinal("Market")),
               TimesUsed = rdr.GetInt32(rdr.GetOrdinal("TimesUsed"))
           });
       return list;
   }
   ```

4. **IChartGeneratorService**

   ```csharp
   Task<string> GenerateMarketUsageChartAsync(IEnumerable<MarketCount> data);
   ```

5. **ChartGeneratorService**

   ```csharp
   public async Task<string> GenerateMarketUsageChartAsync(IEnumerable<MarketCount> data)
   {
       var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
       var csvPath = Path.Combine(_csvDir,   $"market_usage_{ts}.csv");
       var pngPath = Path.Combine(_chartDir, $"market_usage_{ts}.png");

       await File.WriteAllTextAsync(csvPath,
           "Market,TimesUsed\n" +
           string.Join("\n", data.Select(d => $"{d.Market},{d.TimesUsed}")));

       var script = Path.Combine(_scriptDir, "generate_market_usage_chart.py");
       var psi = new ProcessStartInfo("python",
           $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
       { RedirectStandardError = true, UseShellExecute = false };

       using var proc = Process.Start(psi)
                     ?? throw new InvalidOperationException("Could not start Python");
       var err = await proc.StandardError.ReadToEndAsync();
       await proc.WaitForExitAsync();
       if (!string.IsNullOrWhiteSpace(err)) _log.LogError(err);

       return $"/charts/{Path.GetFileName(pngPath)}";
   }
   ```

6. **Python script** (`generate_market_usage_chart.py`)

   ```python
   import sys, pandas as pd, matplotlib.pyplot as plt

   def main(inp, outp):
       df = pd.read_csv(inp)
       fig, ax = plt.subplots(figsize=(10,6))
       if df.empty:
           ax.text(0.5,0.5,'No data to display',ha='center',va='center',fontsize=14)
           ax.axis('off')
       else:
           ax.bar(df['Market'], df['TimesUsed'])
           for i, v in enumerate(df['TimesUsed']):
               ax.text(i, v, str(v), ha='center', va='bottom')
           plt.xticks(rotation=45, ha='right')
           plt.ylabel('Times used')
           plt.tight_layout()
       plt.savefig(outp)

   if __name__=='__main__':
       if len(sys.argv)!=3: sys.exit(1)
       main(sys.argv[1], sys.argv[2])
   ```

7. **ChartUpdaterWorker.cs**

   ```csharp
   // ----------------------------------------------------------------
   // Markets Set Last Month
   // ----------------------------------------------------------------
   _log.LogInformation("=== Starting markets-usage update at {Time} ===", DateTime.UtcNow);
   var marketData = await oracle.GetMarketUsageAsync(DateTime.UtcNow.AddDays(-30));
   var marketUrl  = await generator.GenerateMarketUsageChartAsync(marketData);
   metadata["market_usage_last_month"] = new { ImageUrl = marketUrl, LastUpdated = DateTime.UtcNow };
   _log.LogInformation("Updated Chart and Meta data -> {Url}", marketUrl);
   ```

8. **Razor**

   ```razor
   <GraphBox GraphID="market_usage_last_month"
             Title="Markets set in the last month" />
   ```

---

## 2️⃣ Blotters Flex vs Classic Last Month

1. **Model**

   ```csharp
   public class BlotterLoadCount
   {
       public string Users { get; set; }
       public string Flex  { get; set; }
       public int    Count { get; set; }
   }
   ```

2. **IOracleDataService**

   ```csharp
   Task<IEnumerable<BlotterLoadCount>> GetBlotterLoadCountsAsync(DateTime since);
   ```

3. **OracleDataService**

   ```csharp
   public async Task<IEnumerable<BlotterLoadCount>> GetBlotterLoadCountsAsync(DateTime since)
   {
       var list = new List<BlotterLoadCount>();
       await using var conn = new OracleConnection(_connectionString);
       await conn.OpenAsync();
       const string sql = @"
   WITH x AS (
     SELECT 
       DECODE(r.feature,
              'To Do Blotter - Load','Classic',
              'Flex Blotter - Load','Flex','Classic') AS Flex,
       e.emp_grp_cod AS Users
     FROM star_action_audit r
     JOIN gfit_emp e 
       ON e.nt_login = r.supp_user
     WHERE r.mod_dt > :since
       AND r.feature_type = 'BLOTTER'
       AND r.feature LIKE '% - Load'
       AND r.feature <> 'To Do Blotter - Load'
       AND r.detail NOT LIKE 'In Tray%'
       AND r.detail NOT LIKE 'Pending Blotter%'
   )
   SELECT 
     Users,
     COUNT(1) AS Count,
     Flex
   FROM x
   GROUP BY Users, Flex
   ORDER BY Users, Flex";
       await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
       cmd.Parameters.Add("since", OracleDbType.Date).Value = since;
       await using var rdr = await cmd.ExecuteReaderAsync();
       while (await rdr.ReadAsync())
           list.Add(new BlotterLoadCount {
               Users = rdr.GetString(rdr.GetOrdinal("Users")),
               Flex  = rdr.GetString(rdr.GetOrdinal("Flex")),
               Count = rdr.GetInt32 (rdr.GetOrdinal("Count"))
           });
       return list;
   }
   ```

4. **IChartGeneratorService**

   ```csharp
   Task<string> GenerateBlotterLoadChartAsync(IEnumerable<BlotterLoadCount> data);
   ```

5. **ChartGeneratorService**

   ```csharp
   public async Task<string> GenerateBlotterLoadChartAsync(IEnumerable<BlotterLoadCount> data)
   {
       var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
       var csvPath = Path.Combine(_csvDir,   $"blotter_load_{ts}.csv");
       var pngPath = Path.Combine(_chartDir, $"blotter_load_{ts}.png");

       await File.WriteAllTextAsync(csvPath,
           "Users,Flex,Count\n" +
           string.Join("\n", data.Select(d =>
             $"{d.Users},{d.Flex},{d.Count}")));

       var script = Path.Combine(_scriptDir, "generate_blotter_load_chart.py");
       var psi = new ProcessStartInfo("python",
           $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
       { RedirectStandardError = true, UseShellExecute = false };

       using var proc = Process.Start(psi)
                     ?? throw new InvalidOperationException("Could not start Python");
       var err = await proc.StandardError.ReadToEndAsync();
       await proc.WaitForExitAsync();
       if (!string.IsNullOrWhiteSpace(err)) _log.LogError(err);

       return $"/charts/{Path.GetFileName(pngPath)}";
   }
   ```

6. **Python script** (`generate_blotter_load_chart.py`)

   ```python
   import sys, pandas as pd, matplotlib.pyplot as plt

   def main(inp, outp):
       df = pd.read_csv(inp)
       if df.empty:
           fig, ax = plt.subplots(figsize=(8,4))
           ax.text(0.5,0.5,'No data to display',ha='center',va='center',fontsize=14)
           ax.axis('off')
           plt.savefig(outp)
           return

       # pivot so each Flex/Classic becomes its own line
       pivot = df.pivot(index='Users', columns='Flex', values='Count').fillna(0)

       fig, ax = plt.subplots(figsize=(12,6))
       for col in pivot.columns:
           ax.plot(pivot.index, pivot[col], marker='o', label=col)
       ax.set_xlabel('Users')
       ax.set_ylabel('Count')
       ax.legend(title='Flex')
       plt.xticks(rotation=45, ha='right')
       plt.tight_layout()
       plt.savefig(outp)

   if __name__=='__main__':
       if len(sys.argv)!=3: sys.exit(1)
       main(sys.argv[1], sys.argv[2])
   ```

7. **ChartUpdaterWorker.cs**

   ```csharp
   // ----------------------------------------------------------------
   // Blotters Flex vs Classic Last Month
   // ----------------------------------------------------------------
   _log.LogInformation("=== Starting blotter-load update at {Time} ===", DateTime.UtcNow);
   var blotterData = await oracle.GetBlotterLoadCountsAsync(DateTime.UtcNow.AddDays(-30));
   var blotterUrl  = await generator.GenerateBlotterLoadChartAsync(blotterData);
   metadata["blotter_load_last_month"] = new { ImageUrl = blotterUrl, LastUpdated = DateTime.UtcNow };
   _log.LogInformation("Updated Chart and Meta data -> {Url}", blotterUrl);
   ```

8. **Razor**

   ```razor
   <GraphBox GraphID="blotter_load_last_month"
             Title="Blotters Flex vs Classic (Last Month)" />
   ```
