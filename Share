Yes, let's do it step-by-step clearly. Here's how to add multiple charts to **one page** and make reusable chart components. I'll guide you through precisely how to integrate it into your existing project neatly:

---

## Step 1: **Reusable Chart Component**

Create a reusable Razor component named `ChartComponent.razor` in your `Shared` or `Components` folder:

```razor
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common

<BarChart @ref="barChart" Height="@Height" Width="@Width" Class="@CssClass" />

@code {
    [Parameter] public List<string> Labels { get; set; } = new();
    [Parameter] public List<double?> Data { get; set; } = new();
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public int Height { get; set; } = 200;
    [Parameter] public int Width { get; set; } = 400;

    private BarChart? barChart;
    private BarChartOptions barChartOptions = new();
    private BlazorBootstrap.ChartData chartData = new();

    protected override async Task OnInitializedAsync()
    {
        var datasets = new List<IChartDataset>
        {
            new BarChartDataset
            {
                Data = Data,
                BackgroundColor = new List<string> { ColorUtility.CategoricalTwelveColors[0] },
                BorderColor = new List<string> { ColorUtility.CategoricalTwelveColors[0] },
                BorderWidth = new List<double> { 1 }
            }
        };

        chartData = new BlazorBootstrap.ChartData
        {
            Labels = Labels,
            Datasets = datasets
        };

        barChartOptions.Responsive = true;
        barChartOptions.Interaction = new Interaction { Mode = InteractionMode.Y };
        barChartOptions.IndexAxis = "y";
        barChartOptions.Plugins.Legend.Display = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && barChart != null)
        {
            await barChart.InitializeAsync(chartData, barChartOptions);
        }
    }
}
```

---

## Step 2: **Update `IOracleDataService` and Implementation**

For each query you want to run, add methods to your existing interface and class.

**Example:**

Update **IOracleDataService.cs**:
```csharp
Task<List<FeatureUsage>> GetFeatureUsageAsync();
Task<List<FeatureUsage>> GetAnotherFeatureUsageAsync(); // example new method
```

Update **OracleDataService.cs** (just implement similarly as your first one):
```csharp
public async Task<List<FeatureUsage>> GetAnotherFeatureUsageAsync()
{
    var list = new List<FeatureUsage>();
    using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();
    using var cmd = conn.CreateCommand();
    cmd.CommandText = @"
        SELECT feature, COUNT(*) AS usage_count
        FROM another_table
        GROUP BY feature
        ORDER BY usage_count DESC
    ";

    using var reader = await cmd.ExecuteReaderAsync();
    while (await reader.ReadAsync())
    {
        list.Add(new FeatureUsage
        {
            Feature = reader["feature"].ToString()!,
            UsageCount = Convert.ToInt32(reader["usage_count"])
        });
    }
    return list;
}
```

Repeat this step for as many different queries as you need.

---

## Step 3: **Render Multiple Charts on One Page**

Create (or edit) a Razor page, for example `OracleDashboard.razor`:

```razor
@page "/oracle-dashboard"
@inject IOracleDataService OracleDataService

<h3>Oracle Dashboard</h3>

@if (IsLoading)
{
    <p>Loading charts...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else
{
    <h4>Feature Usage (last 30 days)</h4>
    <ChartComponent Labels="@featureLabels" Data="@featureData" CssClass="mb-4" />

    <h4>Another Feature Usage</h4>
    <ChartComponent Labels="@anotherFeatureLabels" Data="@anotherFeatureData" CssClass="mb-4" />
}

@code {
    private bool IsLoading = true;
    private string? ErrorMessage;

    private List<string> featureLabels = new();
    private List<double?> featureData = new();

    private List<string> anotherFeatureLabels = new();
    private List<double?> anotherFeatureData = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var featureUsage = await OracleDataService.GetFeatureUsageAsync();
            featureLabels = featureUsage.Select(x => x.Feature).ToList();
            featureData = featureUsage.Select(x => (double?)x.UsageCount).ToList();

            var anotherFeatureUsage = await OracleDataService.GetAnotherFeatureUsageAsync();
            anotherFeatureLabels = anotherFeatureUsage.Select(x => x.Feature).ToList();
            anotherFeatureData = anotherFeatureUsage.Select(x => (double?)x.UsageCount).ToList();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }
}
```

---

## How to Continue for More Queries:

- Add more service methods.
- Copy and paste another chart block on your Razor page (`ChartComponent`), simply passing in new labels and data.

Example:

```razor
<h4>Yet Another Chart</h4>
<ChartComponent Labels="@thirdLabels" Data="@thirdData" CssClass="mb-4" />
```

---

## Estimated Time:

- Setting up your reusable component: **~15-20 mins** *(one-time effort)*
- Adding each additional query: **~10-15 mins** *(copy-paste-modify the service)*
- Adding another chart to your dashboard page: **~5 mins** *(copy-paste & tweak)*

---

## Why this approach?

- **Reusable components:**  
  Easy to maintain, no duplicate code, and clear structure.

- **Single-page dashboard:**  
  Improved user experience; easily scalable to more data.

- **Clean separation:**  
  Each part (database access, business logic, presentation) stays neatly organized.

---

**You can now easily scale your dashboard to include any number of SQL queries and visualizations.**

Would you like help integrating the next chart specifically, or is this clear enough to proceed comfortably?
