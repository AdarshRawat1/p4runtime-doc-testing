Thought for a couple of seconds


Let’s roll right back to “one PNG on load” and make sure your component is calling your controller with an *absolute* URI, so you never get that “invalid request URI” error.

---

### 1) Keep your controller exactly as it was when it worked

**Controllers/GraphController.cs**

```csharp
using Microsoft.AspNetCore.Mvc;
using StarTrends.Services;

namespace StarTrends.Controllers
{
    [ApiController]
    [Route("api/graphs")]
    public class GraphController : ControllerBase
    {
        private readonly IGraphService _svc;
        public GraphController(IGraphService svc) => _svc = svc;

        // GET /api/graphs/otc-product-types
        [HttpGet("otc-product-types")]
        public async Task<IActionResult> Get()
        {
            var png = await _svc.GetCachedChartAsync();
            return File(png, "image/png");
        }
    }
}
```

---

### 2) Wire up HTTP-client with a BaseAddress

In **Program.cs**, right after you call `builder.Services.AddHttpClient()` do:

```csharp
builder.Services.AddHttpClient("API", client =>
{
    client.BaseAddress = new Uri("https://localhost:7287/"); 
    // ← *exactly* your app’s URL*
});
```

(This ensures any relative URL you pass into that named client will become absolute.)

---

### 3) The minimal ChartViewer.razor

```razor
@inject IHttpClientFactory Clients
@inject NavigationManager Nav

<img src="data:image/png;base64,@_base64" 
     alt="OTC Product Types" 
     style="max-width:100%;" />

@code {
    private string _base64 = "";

    protected override async Task OnInitializedAsync()
    {
        // 1) get the named client
        var http = Clients.CreateClient("API");

        // 2) build the absolute URI to your controller
        //    here we can just pass the relative path because
        //    the client already has BaseAddress set.
        var bytes = await http.GetByteArrayAsync("api/graphs/otc-product-types");

        // 3) convert to Base64 and bind
        _base64 = Convert.ToBase64String(bytes);
    }
}
```

**Why this works:**

1. **Controller** remains the same working single‐action endpoint.
2. **HttpClient** is configured with `BaseAddress`, so your `GetByteArrayAsync("api/graphs/otc-product-types")` becomes a valid `https://localhost:7287/api/graphs/otc-product-types` request.
3. **ChartViewer** no longer uses a relative URL against a client with no base; it uses the named client and BaseAddress, so you’ll never see “Invalid request URI.”

---

#### Final steps:

1. Drop in the controller above.
2. In `Program.cs`, configure the named client as shown.
3. Replace your ChartViewer.razor with the snippet above.
4. `dotnet clean && dotnet run` and navigate to `/`—you should see your chart rendered exactly once again.
