Below is a **step-by-step** guide showing how to integrate this **new query** into your **existing Blazor page** (the one currently displaying your “Feature Usage Chart”). We’ll create a **new model**, **new service method**, and **add a second chart** on the **same page**. I’ll track the file changes explicitly in a “File Changes” section at the end.

---

## 1. Create or Update the Model

We’ll define a model named **`ProductTrade`** for rows returned by your new query (each row has `prd_typ_name` and `total_trades`).

**File: `Models/ProductTrade.cs`**  
```csharp
namespace Star.Models
{
    public class ProductTrade
    {
        public string PrdTypName { get; set; } = string.Empty;
        public int TotalTrades { get; set; }
    }
}
```

---

## 2. Extend Your Data Service Interface

In your existing **`IOracleDataService.cs`** file, add a method signature:

```csharp
using Star.Models;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Star.Services
{
    public interface IOracleDataService
    {
        // Existing methods...
        Task<List<ProductTrade>> GetProductTradesAsync();
    }
}
```

---

## 3. Implement the Query in Your Data Service

In **`OracleDataService.cs`**, implement **`GetProductTradesAsync()`** to run that “SELECT c.prd_typ_name...” query and map the results to `ProductTrade` objects:

```csharp
using Oracle.ManagedDataAccess.Client;
using Star.Models;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Star.Services
{
    public class OracleDataService : IOracleDataService
    {
        private readonly string _connectionString;

        public OracleDataService(IConfiguration configuration)
        {
            _connectionString = configuration.GetConnectionString("OracleDb")
                ?? throw new ArgumentNullException("Oracle connection string is not configured.");
        }

        // ...existing methods (like GetFeatureUsageAsync)...

        public async Task<List<ProductTrade>> GetProductTradesAsync()
        {
            var productTrades = new List<ProductTrade>();

            try
            {
                using var conn = new OracleConnection(_connectionString);
                await conn.OpenAsync();

                using var cmd = conn.CreateCommand();
                cmd.CommandText = @"
                    SELECT c.prd_typ_name, COUNT(c.prd_typ_name) AS total_trades
                    FROM star_workflow w
                    JOIN (
                        SELECT a.*,
                            CASE
                                WHEN a.prd_typ_cod = 'IR1' THEN 'IR Swap (Fx/Fl)'
                                WHEN a.prd_typ_cod = 'IR2' THEN 'IR Swap (IMM)'
                                WHEN a.prd_typ_cod = 'IR3' THEN 'IR Swap (Fl/Fl)'
                                WHEN a.prd_typ_cod = 'CC1' THEN 'CCY (Fx/Fl)'
                                WHEN a.prd_typ_cod = 'CC2' THEN 'CCY (Fl/Fl)'
                                WHEN a.prd_typ_cod = 'CC3' THEN 'CCY (Fx/Fx)'
                                WHEN a.prd_typ_cod = 'FRA' THEN 'FRA'
                                WHEN a.prd_typ_cod = 'CAP' THEN 'Cap'
                                WHEN a.prd_typ_cod = 'FLR' THEN 'Floor'
                                WHEN a.prd_typ_cod = 'CFS' THEN 'Cap/Floor Straddle'
                                WHEN a.prd_typ_cod = 'COL' THEN 'Cap/Floor Collar'
                                WHEN a.prd_typ_cod = 'OSP' THEN 'Swaption Pay'
                                WHEN a.prd_typ_cod = 'OSR' THEN 'Swaption Rec'
                                WHEN a.prd_typ_cod = 'OSS' THEN 'Swaption Strad'
                                WHEN a.prd_typ_cod = 'DFX' THEN 'Deposit (Fixed)'
                                WHEN a.prd_typ_cod = 'DFL' THEN 'Deposit (Float)'
                                WHEN a.prd_typ_cod = 'CSH' THEN 'Cashflow'
                                WHEN a.prd_typ_cod = 'BOC' THEN 'Bond Option Straddle'
                                WHEN a.prd_typ_cod = 'BME' THEN 'Container BME'
                                WHEN a.prd_typ_cod = 'IL1' THEN 'Inflation swap (In/Fx)'
                                WHEN a.prd_typ_cod = 'IL2' THEN 'Inflation swap (In/Fl)'
                                WHEN a.prd_typ_cod = 'IL3' THEN 'Inflation Fixing Lock (In)'
                                ELSE a.prd_typ_cod
                            END AS prd_typ_name
                        FROM star_contract PARTITION(product_oth) a
                    ) c ON c.con_no = w.con_no
                    WHERE inp_dt > TRUNC(SYSDATE - 7)
                      AND c.mrr_typ_cod IN (0, 1, 6)
                    GROUP BY c.prd_typ_name
                    ORDER BY total_trades DESC
                ";

                using var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    var prdName = reader["prd_typ_name"]?.ToString() ?? string.Empty;
                    var total = reader["total_trades"] is DBNull
                        ? 0
                        : Convert.ToInt32(reader["total_trades"]);

                    productTrades.Add(new ProductTrade
                    {
                        PrdTypName = prdName,
                        TotalTrades = total
                    });
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Error fetching product trades", ex);
            }

            return productTrades;
        }
    }
}
```

---

## 4. Update Your Existing Razor Page (e.g. `Counter.razor`) to Display the New Chart

You mentioned you want **all graphs on one page**. Currently, `Counter.razor` shows the “Feature Usage Chart.” We’ll **add** a second chart below it for this new query.

### (a) Add Fields for the New Chart

In `Counter.razor`, **add**:

- A **`List<string>`** and **`List<double?>`** for the product trades chart’s labels/data.  
- Another **BarChart** reference (or the same library you used for the first chart).  
- A bit of logic to fetch the new data and set up its chart.

Here’s an **example** that places the **new chart** below the existing one:

```razor
@page "/counter"

@using Star.Models
@using Star.Services
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common

@inject IOracleDataService OracleDataService

<h3>Feature Usage Chart</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@((MarkupString)ErrorMessage</div>
}
else if (IsLoading)
{
    <p>Loading...</p>
}
else
{
    <BarChart @ref="barChart" Height="300" Class="mb-4" />

    <h3>Product Trades Chart</h3>
    <BarChart @ref="productTradesChart" Height="300" Class="mb-4" />
}

@code {
    // Existing chart fields
    private BarChart? barChart;
    private BarChartOptions barChartOptions = new BarChartOptions();
    private BlazorBootstrap.ChartData chartData = new BlazorBootstrap.ChartData();

    // NEW fields for the second chart
    private BarChart? productTradesChart;
    private BarChartOptions productChartOptions = new BarChartOptions();
    private BlazorBootstrap.ChartData productChartData = new BlazorBootstrap.ChartData();

    private bool IsLoading = true;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 1. Fetch existing feature usage data
            var featureUsageData = await OracleDataService.GetFeatureUsageAsync();
            Console.WriteLine("FeatureUsage count: " + featureUsageData.Count);

            // Prepare the existing "Feature Usage" chart
            if (featureUsageData == null || featureUsageData.Count == 0)
            {
                ErrorMessage = "No data available for Feature Usage.";
                return;
            }

            // Map the data to chart labels/dataset
            var labels = featureUsageData.ConvertAll(item => item.Feature);
            var data = featureUsageData.ConvertAll(item => (double?)item.UsageCount);

            var datasets = new List<IChartDataset>
            {
                new BarChartDataset
                {
                    Data = data,
                    BackgroundColor = new List<string> { ColorUtility.CategoricalTwelveColors[0] },
                    BorderColor = new List<string> { ColorUtility.CategoricalTwelveColors[0] },
                    BorderWidth = new List<double> { 1 }
                }
            };

            chartData = new BlazorBootstrap.ChartData
            {
                Labels = labels,
                Datasets = datasets
            };

            barChartOptions = new BarChartOptions
            {
                Responsive = true,
                Interaction = new Interaction { Mode = InteractionMode.Y },
                IndexAxis = "y"
            };
            barChartOptions.Plugins.Legend.Display = false;

            // 2. Fetch NEW Product Trades data
            var productTrades = await OracleDataService.GetProductTradesAsync();
            Console.WriteLine("ProductTrades count: " + productTrades.Count);

            if (productTrades == null || productTrades.Count == 0)
            {
                // It's okay if no data => chart just won't show bars
            }

            // Prepare product trades chart
            var prodLabels = productTrades.ConvertAll(pt => pt.PrdTypName);
            var prodData = productTrades.ConvertAll(pt => (double?)pt.TotalTrades);

            var productDatasets = new List<IChartDataset>
            {
                new BarChartDataset
                {
                    Data = prodData,
                    BackgroundColor = new List<string> { ColorUtility.CategoricalTwelveColors[1] },
                    BorderColor = new List<string> { ColorUtility.CategoricalTwelveColors[1] },
                    BorderWidth = new List<double> { 1 }
                }
            };

            productChartData = new BlazorBootstrap.ChartData
            {
                Labels = prodLabels,
                Datasets = productDatasets
            };

            // Similar bar chart options
            productChartOptions = new BarChartOptions
            {
                Responsive = true,
                IndexAxis = "y"
            };
            productChartOptions.Plugins.Legend.Display = false;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"<strong>Error:</strong> {ex.Message}<br/><pre>{ex.StackTrace}</pre>";
        }
        finally
        {
            IsLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrEmpty(ErrorMessage))
        {
            return;
        }

        if (firstRender)
        {
            // Initialize the first chart
            if (barChart != null)
            {
                await barChart.InitializeAsync(chartData, barChartOptions);
            }

            // Initialize the NEW product trades chart
            if (productTradesChart != null)
            {
                await productTradesChart.InitializeAsync(productChartData, productChartOptions);
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
```

### Key Points

- We reused the same **page** (`counter.razor`) but added a **second** `<BarChart>` for your new query.  
- Each chart has its own `chartData` + `chartOptions`.  
- We intentionally used a **horizontal** bar (`IndexAxis = "y"`) for both, but you can change that if you prefer a vertical orientation (`IndexAxis = "x"` or remove it).

---

## 5. Build & Verify

- Ensure you have references to `ChartJs.Blazor` and `BlazorBootstrap.ChartData` (or the library you’re using for the first chart).  
- Run the app.  
- Navigate to the URL for the `counter` page.  
- You should see **two charts**: the existing “Feature Usage” one and the new “Product Trades” one.

---

# File Changes Recap

### 1. **`Models/ProductTrade.cs`** (New File)
```diff
+ namespace Star.Models
+ {
+     public class ProductTrade
+     {
+         public string PrdTypName { get; set; } = string.Empty;
+         public int TotalTrades { get; set; }
+     }
+ }
```

### 2. **`IOracleDataService.cs`**  
```diff
 public interface IOracleDataService
 {
+    Task<List<ProductTrade>> GetProductTradesAsync();

     // existing methods...
 }
```

### 3. **`OracleDataService.cs`**  
```diff
 public class OracleDataService : IOracleDataService
 {
     // existing code...

+    public async Task<List<ProductTrade>> GetProductTradesAsync()
+    {
+        var productTrades = new List<ProductTrade>();
+        try
+        {
+            using var conn = new OracleConnection(_connectionString);
+            await conn.OpenAsync();
+            using var cmd = conn.CreateCommand();
+            cmd.CommandText = @"...YOUR QUERY...";
+
+            using var reader = await cmd.ExecuteReaderAsync();
+            while (await reader.ReadAsync())
+            {
+                var prdName = reader["prd_typ_name"]?.ToString() ?? string.Empty;
+                var total = reader["total_trades"] is DBNull ? 0 : Convert.ToInt32(reader["total_trades"]);
+                productTrades.Add(new ProductTrade { PrdTypName = prdName, TotalTrades = total });
+            }
+        }
+        catch (Exception ex)
+        {
+            throw new Exception("Error fetching product trades", ex);
+        }
+        return productTrades;
+    }
 }
```

### 4. **`Pages/Counter.razor`**  
```diff
 @page "/counter"

+ // Additional references if needed:
+ @using Star.Models
+ @using Star.Services
+ @using ChartJs.Blazor.BarChart
+ @using ChartJs.Blazor.Common

 @inject IOracleDataService OracleDataService

 // Existing code for the Feature Usage Chart...

+ // NEW fields for Product Trades:
+ private BarChart? productTradesChart;
+ private BarChartOptions productChartOptions = new BarChartOptions();
+ private BlazorBootstrap.ChartData productChartData = new BlazorBootstrap.ChartData();

 protected override async Task OnInitializedAsync()
 {
     try
     {
         // 1. Existing feature usage data fetch...

+        // 2. Fetch NEW Product Trades:
+        var productTrades = await OracleDataService.GetProductTradesAsync();
+        // build productChartData & productChartOptions
     }
     catch (Exception ex)
     {
         ...
     }
     finally
     {
         IsLoading = false;
     }
 }

 protected override async Task OnAfterRenderAsync(bool firstRender)
 {
     if (firstRender && string.IsNullOrEmpty(ErrorMessage))
     {
         if (barChart != null)
         {
             await barChart.InitializeAsync(chartData, barChartOptions);
         }

+        // Initialize the new chart
+        if (productTradesChart != null)
+        {
+            await productTradesChart.InitializeAsync(productChartData, productChartOptions);
+        }
     }
     await base.OnAfterRenderAsync(firstRender);
 }
```

---

## Next Steps

- **Style**: If you want more vibrant colors, custom legends, or axis labels, tweak `productChartOptions`.  
- **Combine** data series: If you want multiple product data series in one chart, you’d create multiple datasets in `productChartData.Datasets`.  
- **Performance**: For many product types, a horizontal bar can get tall. You might need pagination or a different style if you have 50+ product types.  

That’s it! You now have a **second** bar chart on the **same page** for your new “Product Code, Contracts, Product” query. You can repeat this pattern for other queries, each time creating a new model/service method and adding another chart below—or whichever layout you prefer.
