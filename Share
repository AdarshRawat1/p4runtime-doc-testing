@* Razor Component: FeatureUsageChart.razor *@
@inject IOracleDataService DataService
@inject IJSRuntime JSRuntime

<h5 class="fw-semibold">Feature Usage</h5>
<div class="mb-3">
    <button class="btn btn-sm btn-primary me-2" @onclick="() => GenerateGraph(false)">Show Normal</button>
    <button class="btn btn-sm btn-secondary" @onclick="() => GenerateGraph(true)">Show Zoomed</button>
</div>

@if (IsLoading)
{
    <StarLoader />
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
@if (!IsLoading && string.IsNullOrEmpty(ErrorMessage))
{
    <div id="featureUsageChart" class="plotly-container visible" style="width: 100%; height: 400px;"></div>
}

@code {
    private bool IsLoading = false;
    private string? ErrorMessage;

    private async Task GenerateGraph(bool logScale)
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;

            var data = await DataService.GetFeatureUsageAsync();
            var labels = data.Select(d => d.Feature).ToList();
            var values = data.Select(d => (double)d.UsageCount).ToList();

            var chartData = new
            {
                labels,
                values,
                title = "Feature Usage (Last 30 Days)",
                xLabel = "Feature",
                yLabel = "Usage Count"
            };

            await JSRuntime.InvokeVoidAsync("renderPlotlyBarChart", "featureUsageChart", chartData, logScale);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
}






Here’s the full Razor file for **FeatureUsageChart.razor**, following your requirements:

✅ Uses `IsLoading` and `ErrorMessage`  
✅ Hides chart `<div>` until data is ready  
✅ Uses smooth transition class (`plotly-container visible`)  
✅ Modular and clean code using Plotly.js

---

Now here’s the Razor file for **OtcProductChart.razor** using the same pattern:

```razor
@* Razor Component: OtcProductChart.razor *@
@inject IOracleDataService DataService
@inject IJSRuntime JSRuntime

<h5 class="fw-semibold">OTC Product Types Booked (Last 7 Days)</h5>
<div class="mb-3">
    <button class="btn btn-sm btn-primary me-2" @onclick="() => GenerateGraph(false)">Show Normal</button>
    <button class="btn btn-sm btn-secondary" @onclick="() => GenerateGraph(true)">Show Zoomed</button>
</div>

@if (IsLoading)
{
    <StarLoader />
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
@if (!IsLoading && string.IsNullOrEmpty(ErrorMessage))
{
    <div id="productTradeChart" class="plotly-container visible" style="width: 100%; height: 400px;"></div>
}

@code {
    private bool IsLoading = false;
    private string? ErrorMessage;

    private async Task GenerateGraph(bool logScale)
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;

            var data = await DataService.GetOtcProductTradesAsync();
            var labels = data.Select(d => d.ProductName).ToList();
            var values = data.Select(d => (double)d.TotalTrades).ToList();

            var chartData = new
            {
                labels,
                values,
                title = "OTC Product Types Booked in Last 7 Days",
                xLabel = "Product Type",
                yLabel = "Contracts"
            };

            await JSRuntime.InvokeVoidAsync("renderPlotlyBarChart", "productTradeChart", chartData, logScale);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
}
```

---

### ✅ CSS for Smooth Transition

Add this to your `site.css` or `_Host.cshtml`:

```css
.plotly-container {
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
}
.plotly-container.visible {
    opacity: 1;
}
```

Let me know when you're ready to add another chart or want this to be embedded on a single page.
