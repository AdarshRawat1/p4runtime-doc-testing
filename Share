Below is the full 8-step “chart integration recipe” applied to each of your three requested charts. Just copy & paste each block into your StarTrends solution, edit your date-bindings as needed, and you’ll have:

---

## 1. **OTC Top 5 Products Causing Intra-day Reconciliation Breaks (Past 4 Weeks)**

### 1. Model

**File**: `Models/RecBreaksCount.cs`

```csharp
namespace StarTrends.Models
{
    public class RecBreaksCount
    {
        public string PrdTypName { get; set; }
        public int RecBreaks { get; set; }
        public string Reason { get; set; }
    }
}
```

### 2. Data service interface

**File**: `Services/IOracleDataService.cs`

```csharp
Task<IEnumerable<RecBreaksCount>> GetRecBreaksCountAsync(DateTime fromDate, DateTime toDate);
```

### 3. Data service implementation

**File**: `Services/OracleDataService.cs`

```csharp
public async Task<IEnumerable<RecBreaksCount>> GetRecBreaksCountAsync(DateTime fromDate, DateTime toDate)
{
    const string sql = @"
WITH recbreaks AS (
  /* your full query, replacing SYSDATE-28 with :fromDate and :toDate */
)
SELECT prd_typ_name AS PrdTypName,
       ""Rec Breaks""    AS RecBreaks,
       reason            AS Reason
FROM recbreaks
WHERE prd_typ_name IN (
  SELECT prd_typ_name FROM (
    /* same subselect with rownum <=5 */
  )
)";
    using var cmd = _conn.CreateCommand();
    cmd.BindByName = true;
    cmd.CommandText = sql;
    cmd.Parameters.Add("fromDate", OracleDbType.Date).Value = fromDate;
    cmd.Parameters.Add("toDate",   OracleDbType.Date).Value = toDate;
    using var reader = await cmd.ExecuteReaderAsync();
    var list = new List<RecBreaksCount>();
    while (await reader.ReadAsync())
    {
        list.Add(new RecBreaksCount {
            PrdTypName = reader.GetString(0),
            RecBreaks  = reader.GetInt32(1),
            Reason     = reader.GetString(2)
        });
    }
    return list;
}
```

### 4. Chart generator interface

**File**: `Services/IChartGeneratorService.cs`

```csharp
Task<string> GenerateRecBreaksChartAsync(IEnumerable<RecBreaksCount> data);
```

### 5. Chart generator implementation

**File**: `Services/ChartGeneratorService.cs`

```csharp
public async Task<string> GenerateRecBreaksChartAsync(IEnumerable<RecBreaksCount> data)
{
    var csvPath = Path.Combine(_csvDir, $"rec_breaks_{DateTime.UtcNow:yyyyMMddHHmmss}.csv");
    var pngName = $"rec_breaks_{DateTime.UtcNow:yyyyMMddHHmmss}.png";
    var pngPath = Path.Combine(_chartDir, pngName);

    // write CSV
    using var sw = new StreamWriter(csvPath);
    sw.WriteLine("PrdTypName,Reason,RecBreaks");
    foreach (var d in data)
        sw.WriteLine($"{d.PrdTypName},{d.Reason},{d.RecBreaks}");

    // call Python
    var psi = new ProcessStartInfo("python",
        $"generate_rec_breaks_chart.py \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true
    };
    var p = Process.Start(psi);
    string err = await p.StandardError.ReadToEndAsync();
    p.WaitForExit();
    if (p.ExitCode != 0)
        _logger.LogError(err);

    return $"/charts/{pngName}";
}
```

### 6. Python script

**File**: `PythonScripts/generate_rec_breaks_chart.py`

```python
#!/usr/bin/env python3
# Usage: python generate_rec_breaks_chart.py <in.csv> <out.png>
import sys
import pandas as pd
import matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp)
    if df.empty:
        fig, ax = plt.subplots(figsize=(8,4))
        ax.text(0.5,0.5,'No data',ha='center',va='center',fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    pivot = df.pivot(index='PrdTypName', columns='Reason', values='RecBreaks').fillna(0)
    ax = pivot.plot(kind='bar', figsize=(10,5))
    for container in ax.containers:
        ax.bar_label(container, fmt='%.0f', label_type='edge', padding=2, fontsize=9)
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Usage: python generate_rec_breaks_chart.py <in.csv> <out.png>", file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

### 7. Worker integration

**File**: `Workers/ChartUpdaterWorker.cs`

```csharp
// inside your ExecuteAsync loop:
var fromDate = DateTime.UtcNow.Date.AddDays(-28);
var toDate   = DateTime.UtcNow.Date;
var recData  = await _oracle.GetRecBreaksCountAsync(fromDate, toDate);
var recUrl   = await _chartGen.GenerateRecBreaksChartAsync(recData);
metadata["rec_breaks_top5"] = new { ImageUrl = recUrl, LastUpdated = DateTime.UtcNow };
CleanupOldFiles(_chartDir, "rec_breaks_*.png", MaxKeep);
CleanupOldFiles(_csvDir,   "rec_breaks_*.csv", MaxKeep);
```

### 8. UI component usage

In the appropriate Razor page (e.g. under **Usage** section):

```razor
<GraphBox GraphId="rec_breaks_top5"
          Title="OTC Top 5 Products Causing Intra-day Reconciliation Breaks (Last 4 Weeks)" />
```

---

## 2. **MTM Contracts Booked per Week (Last 4 Years, Excluding Synthetics)**

Repeat the 8 steps, naming things `MtmContractsBookedCount`, `GetMtmContractsBookedAsync`, `generate_mtm_contracts_booked_chart.py`, and GraphId `mtm_contracts_booked`.

```csharp
// 1. Models/MtmContractsBookedCount.cs
public class MtmContractsBookedCount
{
    public DateTime Week { get; set; }
    public int MtmContractsBooked { get; set; }
}

// 2. IOracleDataService.cs
Task<IEnumerable<MtmContractsBookedCount>> GetMtmContractsBookedAsync(DateTime fromDate, DateTime toDate);

// 3. OracleDataService.cs
const string sql = @"
SELECT TRUNC(inp_dt,'IW') AS Week,
       COUNT(1)         AS MtmContractsBooked
FROM star_contract PARTITION(product_oth) c
WHERE TRUNC(inp_dt) BETWEEN :fromDate AND :toDate
  AND c.con_no IN (
    SELECT con_no FROM star_mtm WHERE lgcl_del_flg='N'
  )
  AND mrr_typ_cod IN (0,1,6)
GROUP BY TRUNC(inp_dt,'IW')
ORDER BY Week";
...
cmd.CommandText = sql;
// bind fromDate/toDate, read into MtmContractsBookedCount

// 4. IChartGeneratorService.cs
Task<string> GenerateMtmContractsBookedChartAsync(IEnumerable<MtmContractsBookedCount> data);

// 5. ChartGeneratorService.cs
// write CSV header: Week,MtmContractsBooked
// call: generate_mtm_contracts_booked_chart.py

// 6. PythonScripts/generate_mtm_contracts_booked_chart.py
#!/usr/bin/env python3
import sys, pandas as pd, matplotlib.pyplot as plt
def main(inp,outp):
    df = pd.read_csv(inp, parse_dates=['Week'])
    if df.empty:
        fig, ax = plt.subplots(figsize=(8,4))
        ax.text(0.5,0.5,'No data',ha='center',va='center',fontsize=14)
        ax.axis('off'); plt.savefig(outp); return
    ax = df.plot(x='Week', y='MtmContractsBooked', marker='o', figsize=(10,5))
    plt.xticks(rotation=45,ha='right'); plt.tight_layout(); plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3:
        print("Usage...", file=sys.stderr); sys.exit(1)
    main(sys.argv[1], sys.argv[2])

// 7. Worker:
var fourYearsAgo = DateTime.UtcNow.Date.AddYears(-4);
var nowDate      = DateTime.UtcNow.Date;
var mtmData      = await _oracle.GetMtmContractsBookedAsync(fourYearsAgo, nowDate);
var mtmUrl       = await _chartGen.GenerateMtmContractsBookedChartAsync(mtmData);
metadata["mtm_contracts_booked"] = new { ImageUrl = mtmUrl, LastUpdated = DateTime.UtcNow };

// 8. Razor:
<GraphBox GraphId="mtm_contracts_booked"
          Title="MTM Contracts Booked per Week (Last 4 Years, Excl. Synthetics)" />
```

---

## 3. **OTC Contracts Booked per Week (Last 4 Years, Excl. Synthetics) – Two-line Comparison**

Combine MTM vs. Total “Deals booked” on one line chart:

### 1. Model

`Models/OtcContractsBookedCount.cs`

```csharp
public class OtcContractsBookedCount
{
    public DateTime Week { get; set; }
    public int MtmContractsBooked { get; set; }
    public int DealsBooked { get; set; }
}
```

### 2. Interface

`IOracleDataService.cs`

```csharp
Task<IEnumerable<OtcContractsBookedCount>> GetOtcContractsBookedAsync(DateTime fromDate, DateTime toDate);
```

### 3. Implementation

```csharp
const string sql = @"
SELECT
  TRUNC(c.inp_dt,'IW')           AS Week,
  SUM(CASE WHEN m.con_no IS NOT NULL THEN 1 ELSE 0 END) AS MtmContractsBooked,
  COUNT(1)                       AS DealsBooked
FROM star_contract PARTITION(product_oth) c
LEFT JOIN star_mtm m ON m.con_no = c.con_no AND m.lgcl_del_flg='N'
WHERE c.inp_dt BETWEEN :fromDate AND :toDate
  AND c.mrr_typ_cod IN (0,1,6)
GROUP BY TRUNC(c.inp_dt,'IW')
ORDER BY Week";
...
// bind, read into OtcContractsBookedCount
```

### 4. Generator interface

`IChartGeneratorService.cs`

```csharp
Task<string> GenerateOtcContractsBookedChartAsync(IEnumerable<OtcContractsBookedCount> data);
```

### 5. Generator impl

```csharp
// write CSV header: Week,MtmContractsBooked,DealsBooked
// call: generate_otc_contracts_booked_chart.py
```

### 6. Python script

`PythonScripts/generate_otc_contracts_booked_chart.py`

```python
#!/usr/bin/env python3
import sys, pandas as pd, matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Week'])
    if df.empty:
        fig, ax = plt.subplots(figsize=(8,4))
        ax.text(0.5,0.5,'No data',ha='center',va='center',fontsize=14)
        ax.axis('off'); plt.savefig(outp); return

    ax = df.plot(x='Week',
                 y=['MtmContractsBooked','DealsBooked'],
                 marker='o', figsize=(10,5))
    plt.xticks(rotation=45,ha='right'); plt.tight_layout()
    plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3:
        print("Usage...", file=sys.stderr); sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

### 7. Worker

```csharp
var fourYearsAgo = DateTime.UtcNow.Date.AddYears(-4);
var nowDate      = DateTime.UtcNow.Date;
var otcData      = await _oracle.GetOtcContractsBookedAsync(fourYearsAgo, nowDate);
var otcUrl       = await _chartGen.GenerateOtcContractsBookedChartAsync(otcData);
metadata["otc_contracts_booked"] = new { ImageUrl = otcUrl, LastUpdated = DateTime.UtcNow };
CleanupOldFiles(_chartDir, "otc_contracts_booked_*.png", MaxKeep);
CleanupOldFiles(_csvDir,   "otc_contracts_booked_*.csv", MaxKeep);
```

### 8. Razor

```razor
<GraphBox GraphId="otc_contracts_booked"
          Title="OTC Contracts Booked per Week (Last 4 Years, Excl. Synthetics)" />
```

---

Once you wire these in, your background worker will keep them updated and each section/page simply drops in a `<GraphBox>` pointing at the new `GraphId`. Let me know if you need any tweaks!
