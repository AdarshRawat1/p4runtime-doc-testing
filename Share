Got it! If you're no longer allowed to use **Blazor Bootstrap**, no problem — we’ll switch to a **vanilla Blazor + CSS** approach that still gives you a **wave-style loading animation** ✅

---

### ✅ 1. Replace Bootstrap Placeholder with Custom Loader

Here's a basic wave-style animation using CSS that works in pure Blazor:

#### ✨ **LoaderMarkup.razor (Reusable Loader)**
Create this in a new file under `Shared/Components/LoaderMarkup.razor`:

```razor
<div class="wave-loader">
    <div class="bar"></div>
    <div class="bar"></div>
    <div class="bar"></div>
    <div class="bar"></div>
    <div class="bar"></div>
</div>

<style>
    .wave-loader {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 150px;
        gap: 6px;
    }

    .wave-loader .bar {
        width: 6px;
        height: 40px;
        background-color: #3498db;
        animation: wave 1.2s infinite ease-in-out;
    }

    .wave-loader .bar:nth-child(2) {
        animation-delay: 0.1s;
    }
    .wave-loader .bar:nth-child(3) {
        animation-delay: 0.2s;
    }
    .wave-loader .bar:nth-child(4) {
        animation-delay: 0.3s;
    }
    .wave-loader .bar:nth-child(5) {
        animation-delay: 0.4s;
    }

    @keyframes wave {
        0%, 100% {
            transform: scaleY(1);
        }
        50% {
            transform: scaleY(2);
        }
    }
</style>
```

---

### ✅ 2. Use it in your chart components like this:

#### In `ProductTradeChart.razor`:

```razor
@if (IsLoading)
{
    <LoaderMarkup />
}
else
{
    <div id="productTradeChart" style="width: 100%; height: 400px;"></div>
}
```

Add this at the top of the file:
```razor
@using Star.Shared.Components
```

---

### ✅ 3. Don’t forget `IsLoading = true/false` in the `GenerateGraph()` method (as before):

```razor
private bool IsLoading = false;

private async Task GenerateGraph(bool logScale)
{
    try
    {
        IsLoading = true;

        var data = await DataService.GetOtcProductTradesAsync();
        var labels = data.Select(d => d.ProductName).ToList();
        var values = data.Select(d => (double)d.TotalTrades).ToList();

        var chartData = new
        {
            labels,
            values,
            title = "OTC Product Types Booked in Last 7 Days",
            xLabel = "Product Type",
            yLabel = "Contracts"
        };

        await JSRuntime.InvokeVoidAsync("renderPlotlyBarChart", "productTradeChart", chartData, logScale);
    }
    catch (Exception ex)
    {
        ErrorMessage = ex.Message;
    }
    finally
    {
        IsLoading = false;
    }
}
```

---

✅ That’s it — now you have a fully custom wave loading animation with no dependencies.

Want me to help migrate your existing chart components to use this approach too?
