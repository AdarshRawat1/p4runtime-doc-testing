Below is a **step‑by‑step** guide on how to integrate this SQL query into your Blazor project and render a **bar chart** showing “OTC product types booked in last 7 days.” I’ll track all file changes precisely so you know exactly where to put each piece of code.

---

# 1. Create or Update the **Model**

### **File**: `ProductTrade.cs`  
**Location**: `Star/Models` folder (or wherever you keep models)

```csharp
namespace Star.Models
{
    public class ProductTrade
    {
        public string ProductName { get; set; } = string.Empty;
        public int TotalTrades { get; set; }
    }
}
```

**Why**:  
- This model holds the result of `prd_typ_name` (as `ProductName`) and `"total_trades"` (as `TotalTrades`).

---

# 2. Update the Data Service Interface

### **File**: `IOracleDataService.cs`  
**Location**: `Star/Services` (or wherever your interface lives)

Add a new method signature:

```csharp
using System.Collections.Generic;
using System.Threading.Tasks;
using Star.Models;

namespace Star.Services
{
    public interface IOracleDataService
    {
        // ...existing methods...

        Task<List<ProductTrade>> GetOtcProductTradesAsync();
    }
}
```

---

# 3. Implement the Method in **OracleDataService**

### **File**: `OracleDataService.cs`  
**Location**: `Star/Services`

Add the following method:

```csharp
public async Task<List<ProductTrade>> GetOtcProductTradesAsync()
{
    var resultList = new List<ProductTrade>();

    try
    {
        using var conn = new OracleConnection(_connectionString);
        await conn.OpenAsync();

        using var cmd = conn.CreateCommand();
        cmd.CommandText = @"
            SELECT c.prd_typ_name,
                   COUNT(c.prd_typ_name) AS ""total_trades""
            FROM star_workflow w
            JOIN (
                SELECT a.*,
                       CASE
                           WHEN a.prd_typ_cod = 'IR1' THEN 'IR Swap (Fx/Fl)'
                           WHEN a.prd_typ_cod = 'IR2' THEN 'IR Swap (IMM)'
                           WHEN a.prd_typ_cod = 'IR3' THEN 'IR Swap (Fl/Fl)'
                           WHEN a.prd_typ_cod = 'CC1' THEN 'CCY (Fx/Fl)'
                           WHEN a.prd_typ_cod = 'CC2' THEN 'CCY (Fl/Fl)'
                           WHEN a.prd_typ_cod = 'CC3' THEN 'CCY (Fx/Fx)'
                           WHEN a.prd_typ_cod = 'FRA' THEN 'FRA'
                           WHEN a.prd_typ_cod = 'CAP' THEN 'Cap'
                           WHEN a.prd_typ_cod = 'FLR' THEN 'Floor'
                           WHEN a.prd_typ_cod = 'CFS' THEN 'Cap/Floor Straddle'
                           WHEN a.prd_typ_cod = 'COL' THEN 'Cap/Floor Collar'
                           WHEN a.prd_typ_cod = 'OSP' THEN 'Swaption Pay'
                           WHEN a.prd_typ_cod = 'OSR' THEN 'Swaption Rec'
                           WHEN a.prd_typ_cod = 'OSS' THEN 'Swaption Strad'
                           WHEN a.prd_typ_cod = 'DFX' THEN 'Deposit (Fixed)'
                           WHEN a.prd_typ_cod = 'DFL' THEN 'Deposit (Float)'
                           WHEN a.prd_typ_cod = 'CSH' THEN 'Cashflow'
                           WHEN a.prd_typ_cod = 'BOC' THEN 'Bond Option Straddle'
                           WHEN a.prd_typ_cod = 'BME' THEN 'Container BME'
                           WHEN a.prd_typ_cod = 'IL1' THEN 'Inflation swap (In/Fx)'
                           WHEN a.prd_typ_cod = 'IL2' THEN 'Inflation swap (In/Fl)'
                           WHEN a.prd_typ_cod = 'IL3' THEN 'Inflation Fixing Lock (In)'
                           ELSE a.prd_typ_cod
                       END AS prd_typ_name
                FROM star_contract PARTITION(product_oth) a
            ) c ON c.con_no = w.con_no
            WHERE inp_dt > TRUNC(SYSDATE - 7)
              AND c.con_no = w.con_no
              AND c.mrr_typ_cod IN (0, 1, 6)
            GROUP BY c.prd_typ_name
            ORDER BY ""total_trades"" DESC
        ";

        using var reader = await cmd.ExecuteReaderAsync();
        while (await reader.ReadAsync())
        {
            var productName = reader["prd_typ_name"]?.ToString() ?? string.Empty;
            var totalTrades = reader["total_trades"] is DBNull
                ? 0
                : Convert.ToInt32(reader["total_trades"]);

            resultList.Add(new ProductTrade
            {
                ProductName = productName,
                TotalTrades = totalTrades
            });
        }
    }
    catch (Exception ex)
    {
        throw new Exception("Error fetching OTC product trades", ex);
    }

    return resultList;
}
```

---

# 4. Create a **Bar Chart** Page

### **File**: `OtcProductChart.razor`  
**Location**: `Pages` (or wherever your Blazor pages live)

Below is a sample bar chart using **ChartJs.Blazor**. We’ll style it and label axes. You can tweak the route, file name, or menu link as you like.

```razor
@page "/otc-product-chart"
@using Star.Models
@using Star.Services
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common
@inject IOracleDataService OracleDataService

<h3>OTC Product Types (Last 7 Days)</h3>

@if (IsLoading)
{
    <p>Loading chart...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@((MarkupString)ErrorMessage</div>
}
else
{
    <BarChart @ref="barChart" Height="400" />
}

@code {
    private bool IsLoading = true;
    private string? ErrorMessage;

    private BarChart? barChart;
    private BarChartOptions barChartOptions = new();
    private BlazorBootstrap.ChartData chartData = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var trades = await OracleDataService.GetOtcProductTradesAsync();
            if (trades == null || trades.Count == 0)
            {
                ErrorMessage = "No data found.";
                return;
            }

            // Extract labels & data
            var labels = trades.Select(t => t.ProductName).ToList();
            var values = trades.Select(t => (double?)t.TotalTrades).ToList();

            // Build the dataset
            var dataset = new BarChartDataset
            {
                Data = values,
                Label = "Total Trades",
                BackgroundColor = "rgba(54, 162, 235, 0.6)", // Light-blue fill
                BorderColor = "rgba(54, 162, 235, 1.0)",
                BorderWidth = new List<double> { 1 },
            };

            chartData = new BlazorBootstrap.ChartData
            {
                Labels = labels,
                Datasets = new List<IChartDataset> { dataset }
            };

            // Configure bar chart (Axis labels, etc.)
            barChartOptions = new BarChartOptions
            {
                Responsive = true,
                Plugins = new Plugins
                {
                    Title = new Title
                    {
                        Display = true,
                        Text = "OTC Product Types (Last 7 Days)"
                    }
                },
                Scales = new Scales
                {
                    X = new CategoryScale
                    {
                        Title = new AxisTitle
                        {
                            Display = true,
                            Text = "Product Type"
                        },
                        Ticks = new CategoryTicks
                        {
                            // If many products, may need rotation:
                            // MaxRotation = 90,
                            // MinRotation = 45
                        }
                    },
                    Y = new LinearCartesianAxis
                    {
                        Title = new AxisTitle
                        {
                            Display = true,
                            Text = "Number of Trades"
                        },
                        Ticks = new LinearCartesianTicks
                        {
                            Precision = 0,
                            BeginAtZero = true
                        }
                    }
                }
            };
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && barChart != null && string.IsNullOrEmpty(ErrorMessage))
        {
            // Initialize chart
            await barChart.InitializeAsync(chartData, barChartOptions);
        }
    }
}
```

**Key Points:**
- The data source calls `GetOtcProductTradesAsync()` from the service.  
- We set up axis titles, chart title, and some color styling.  
- If you have too many product types, consider rotating X‑axis labels for readability.

---

# 5. (Optional) Add a NavMenu Link

If you have a **NavMenu.razor**, you can add a link:

```razor
<NavLink class="nav-link" href="/otc-product-chart">
    <span class="oi oi-bar-chart" aria-hidden="true"></span> OTC Products
</NavLink>
```

Then you can navigate to [**`/otc-product-chart`**](about:blank) in your browser.

---

## Final File Changes Recap

1. **`Star/Models/ProductTrade.cs`**  
   - **(NEW)** Created with `ProductName` and `TotalTrades`.

2. **`Star/Services/IOracleDataService.cs`**  
   - **(MODIFIED)** Added `Task<List<ProductTrade>> GetOtcProductTradesAsync();`.

3. **`Star/Services/OracleDataService.cs`**  
   - **(MODIFIED)** Implemented `GetOtcProductTradesAsync()` with your SQL query.

4. **`Pages/OtcProductChart.razor`**  
   - **(NEW)** Razor page using ChartJs.Blazor to show a bar chart of your OTC product data.

*(Optionally, you added a line in `Shared/NavMenu.razor` linking to `/otc-product-chart`.)*

---

## That’s It!

Now you have:
- A new model `ProductTrade` capturing `(ProductName, TotalTrades)`.
- A service method returning that data via the **Oracle** query.
- A Blazor page that displays a **bar chart** of “OTC product types in the last 7 days.”

**Next Steps**  
- Tweak chart styles/colors as you wish (e.g., chart background, bar colors, axis label rotation).  
- If you’d like more charts, just follow the same pattern: create a model, add a service method, build a Razor page.  
- For advanced visuals (like stacked bars or line charts with multiple datasets), let me know, and we’ll adapt accordingly.
