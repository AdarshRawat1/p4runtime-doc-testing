// -----------------------------
// ChartGeneratorService.cs  (StarTrends.Services)
// -----------------------------
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using StarTrends.Models;
using System.Diagnostics;

namespace StarTrends.Services
{
    public class ChartGeneratorService : IChartGeneratorService
    {
        private readonly ILogger<ChartGeneratorService> _log;
        private readonly string _scriptDir, _csvDir, _chartDir;

        public ChartGeneratorService(
            ILogger<ChartGeneratorService> log,
            IConfiguration config,
            IHostEnvironment env)
        {
            _log       = log;
            _scriptDir = Path.Combine(env.ContentRootPath, config["ChartScriptsPath"]);
            _csvDir    = Path.Combine(env.ContentRootPath, config["CsvOutputPath"]);
            _chartDir  = Path.Combine(env.ContentRootPath, "wwwroot", config["ChartsOutputPath"]);

            Directory.CreateDirectory(_scriptDir);
            Directory.CreateDirectory(_csvDir);
            Directory.CreateDirectory(_chartDir);
        }

        public async Task<string> GenerateProductTradeChartAsync(IEnumerable<ProductTradeCount> data)
        {
            var ts  = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
            var csv = Path.Combine(_csvDir,   $"product_trades_{ts}.csv");
            var png = Path.Combine(_chartDir, $"product_trades_{ts}.png");

            // 1) write CSV
            await File.WriteAllTextAsync(csv,
                "ProductTypeName,TotalTrades\n" +
                string.Join("\n", data.Select(d => $"{d.ProductTypeName},{d.TotalTrades}"))
            );

            // 2) invoke Python
            var script = Path.Combine(_scriptDir, "generate_product_trade_chart.py");
            if (!File.Exists(script))
                throw new FileNotFoundException("chart script missing", script);

            var psi = new ProcessStartInfo("python", $"\"{script}\" \"{csv}\" \"{png}\"")
            {
                RedirectStandardError = true,
                UseShellExecute       = false
            };

            using var p = Process.Start(psi)!
                ?? throw new InvalidOperationException("Failed to start python");
            var err = await p.StandardError.ReadToEndAsync();
            await p.WaitForExitAsync();
            if (!string.IsNullOrWhiteSpace(err))
                _log.LogError(err);

            return $"/charts/{Path.GetFileName(png)}";
        }
    }
}


// -----------------------------
// ChartUpdaterWorker.cs  (Worker)
// -----------------------------
using System.Text.Json;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using StarTrends.Services;

public class ChartUpdaterWorker : BackgroundService
{
    private readonly IServiceScopeFactory _scopes;
    private readonly ILogger<ChartUpdaterWorker> _log;
    private readonly string _metaPath;
    private readonly TimeSpan _interval;

    public ChartUpdaterWorker(
        IServiceScopeFactory scopes,
        IConfiguration config,
        IHostEnvironment env,
        ILogger<ChartUpdaterWorker> log)
    {
        _scopes   = scopes;
        _log      = log;
        _interval = TimeSpan.FromMinutes(config.GetValue<int>("ChartUpdateIntervalMinutes"));

        var charts = Path.Combine(env.ContentRootPath, "wwwroot", config["ChartsOutputPath"]);
        Directory.CreateDirectory(charts);
        _metaPath = Path.Combine(charts, "metadata.json");
    }

    protected override async Task ExecuteAsync(CancellationToken ct)
    {
        while (!ct.IsCancellationRequested)
        {
            try
            {
                _log.LogInformation("Updating chart...");
                using var scope = _scopes.CreateScope();
                var oracle = scope.ServiceProvider.GetRequiredService<IOracleDataService>();
                var gen    = scope.ServiceProvider.GetRequiredService<IChartGeneratorService>();

                var data = await oracle.GetProductTradeCountsAsync(DateTime.Now.AddDays(-7));
                var url  = await gen.GenerateProductTradeChartAsync(data);

                var meta = new { productTrade = new { ImageUrl = url, LastUpdated = DateTime.UtcNow } };
                await File.WriteAllTextAsync(_metaPath,
                    JsonSerializer.Serialize(meta, new JsonSerializerOptions { WriteIndented = true }),
                    ct);

                _log.LogInformation("Chart updated: {Url}", url);
            }
            catch (Exception ex) {
                _log.LogError(ex, "Chart update failed");
            }
            await Task.Delay(_interval, ct);
        }
    }
}


// -----------------------------
// Program.cs  (ChartUpdater Worker)
// -----------------------------
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using StarTrends.Services;

Host.CreateDefaultBuilder(args)
    .ConfigureServices((ctx, svc) =>
    {
        // scoped chart/oracle services
        svc.AddScoped<IOracleDataService, OracleDataService>();
        svc.AddScoped<IChartGeneratorService, ChartGeneratorService>();
        // hosted background worker
        svc.AddHostedService<ChartUpdaterWorker>();
    })
    .Build()
    .Run();


// -----------------------------
// Program.cs  (Blazor Site)
// -----------------------------
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using StarTrends.Services;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddHttpClient();             // for component injection
builder.Services.AddScoped<IOracleDataService, OracleDataService>();
builder.Services.AddScoped<IChartGeneratorService, ChartGeneratorService>();

builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();

var app = builder.Build();
app.UseStaticFiles();
app.UseRouting();
app.MapRazorPages();
app.MapBlazorHub();
app.MapFallbackToPage("/_Host");
app.Run();
