Below are the **8 steps** to fully re-implement **Reports used last month (Top 25)** and **Markets used last month (Top 10)** with robust error handling and correct wiring.

---

## 1️⃣ Reports used last month (Top 25)

```csharp
// 1. Model
public class ReportUsageLastMonth
{
    public string Report    { get; set; }
    public int    TimesUsed { get; set; }
}
```

```csharp
// 2. IOracleDataService
Task<IEnumerable<ReportUsageLastMonth>> GetReportsUsedLastMonthAsync(DateTime since, int topN);
```

```csharp
// 3. OracleDataService
public async Task<IEnumerable<ReportUsageLastMonth>> GetReportsUsedLastMonthAsync(DateTime since, int topN)
{
    var list = new List<ReportUsageLastMonth>();
    await using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();

    const string sql = @"
SELECT Report, TimesUsed
FROM (
  SELECT r.feature         AS Report,
         COUNT(1)           AS TimesUsed
    FROM star_action_audit r
   WHERE r.mod_dt > :since
     AND r.feature_type = 'REPORT'
   GROUP BY r.feature
   ORDER BY TimesUsed DESC
)
WHERE ROWNUM <= :topN";

    await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
    cmd.Parameters.Add("since", OracleDbType.Date).Value  = since;
    cmd.Parameters.Add("topN",  OracleDbType.Int32).Value = topN;

    await using var rdr = await cmd.ExecuteReaderAsync();
    while (await rdr.ReadAsync())
    {
        list.Add(new ReportUsageLastMonth {
            Report    = rdr.GetString (rdr.GetOrdinal("Report")),
            TimesUsed = rdr.GetInt32  (rdr.GetOrdinal("TimesUsed"))
        });
    }

    return list;
}
```

```csharp
// 4. IChartGeneratorService
Task<string> GenerateReportsUsedLastMonthChartAsync(IEnumerable<ReportUsageLastMonth> data);
```

```csharp
// 5. ChartGeneratorService
public async Task<string> GenerateReportsUsedLastMonthChartAsync(IEnumerable<ReportUsageLastMonth> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir,   $"reports_used_last_month_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"reports_used_last_month_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Report,TimesUsed\n" +
        string.Join("\n", data.Select(d => $"{d.Report},{d.TimesUsed}")));

    var script = Path.Combine(_scriptDir, "generate_reports_used_last_month_chart.py");
    var psi    = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Could not start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrWhiteSpace(err)) _log.LogError("Python error: {Err}", err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}
```

```python
# 6. generate_reports_used_last_month_chart.py
import sys, pandas as pd, matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp)
    fig, ax = plt.subplots(figsize=(10,6))
    if df.empty:
        ax.text(0.5,0.5,'No data to display', ha='center', va='center', fontsize=14)
        ax.axis('off')
    else:
        ax.bar(df['Report'], df['TimesUsed'])
        for i, v in enumerate(df['TimesUsed']):
            ax.text(i, v, str(v), ha='center', va='bottom')
        plt.xticks(rotation=45, ha='right')
        plt.ylabel('Times used')
        plt.tight_layout()
    plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3: sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

```csharp
// 7. ChartUpdaterWorker.cs
// ----------------------------------------------------------------
// Reports used last month (Top 25)
// ----------------------------------------------------------------
try
{
    _log.LogInformation("Starting reports_used_last_month at {Time}", DateTime.UtcNow);
    var data = await oracle.GetReportsUsedLastMonthAsync(DateTime.UtcNow.AddDays(-30), 25);
    var url  = await generator.GenerateReportsUsedLastMonthChartAsync(data);
    metadata["reports_used_last_month"] = new { ImageUrl = url, LastUpdated = DateTime.UtcNow };
    _log.LogInformation("reports_used_last_month updated -> {Url}", url);
}
catch (Exception ex)
{
    _log.LogError(ex, "Failed reports_used_last_month update at {Time}", DateTime.UtcNow);
}
```

```razor
@* 8. Razor *@
<GraphBox GraphID="reports_used_last_month"
          Title="Reports used last month (Top 25)" />
```

---

## 2️⃣ Markets used last month (Top 10)

```csharp
// 1. Model
public class MarketUsageLastMonth
{
    public string Report    { get; set; }
    public int    TimesUsed { get; set; }
}
```

```csharp
// 2. IOracleDataService
Task<IEnumerable<MarketUsageLastMonth>> GetMarketsUsedLastMonthAsync(DateTime since, int topN);
```

```csharp
// 3. OracleDataService
public async Task<IEnumerable<MarketUsageLastMonth>> GetMarketsUsedLastMonthAsync(DateTime since, int topN)
{
    var list = new List<MarketUsageLastMonth>();
    await using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();

    const string sql = @"
SELECT Report, TimesUsed
FROM (
  SELECT UPPER(r.detail)  AS Report,
         COUNT(1)          AS TimesUsed
    FROM star_action_audit r
   WHERE r.mod_dt > :since
     AND r.feature_type = 'MARKET'
   GROUP BY UPPER(r.detail)
   ORDER BY TimesUsed DESC
)
WHERE ROWNUM <= :topN";

    await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
    cmd.Parameters.Add("since", OracleDbType.Date).Value  = since;
    cmd.Parameters.Add("topN",  OracleDbType.Int32).Value = topN;

    await using var rdr = await cmd.ExecuteReaderAsync();
    while (await rdr.ReadAsync())
    {
        list.Add(new MarketUsageLastMonth {
            Report    = rdr.GetString(rdr.GetOrdinal("Report")),
            TimesUsed = rdr.GetInt32 (rdr.GetOrdinal("TimesUsed"))
        });
    }

    return list;
}
```

```csharp
// 4. IChartGeneratorService
Task<string> GenerateMarketsUsedLastMonthChartAsync(IEnumerable<MarketUsageLastMonth> data);
```

```csharp
// 5. ChartGeneratorService
public async Task<string> GenerateMarketsUsedLastMonthChartAsync(IEnumerable<MarketUsageLastMonth> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir,   $"markets_used_last_month_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"markets_used_last_month_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Report,TimesUsed\n" +
        string.Join("\n", data.Select(d => $"{d.Report},{d.TimesUsed}")));

    var script = Path.Combine(_scriptDir, "generate_markets_used_last_month_chart.py");
    var psi    = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Could not start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrWhiteSpace(err)) _log.LogError("Python error: {Err}", err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}
```

```python
# 6. generate_markets_used_last_month_chart.py
import sys, pandas as pd, matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp)
    fig, ax = plt.subplots(figsize=(10,6))
    if df.empty:
        ax.text(0.5,0.5,'No data to display', ha='center', va='center', fontsize=14)
        ax.axis('off')
    else:
        ax.bar(df['Report'], df['TimesUsed'])
        for i, v in enumerate(df['TimesUsed']):
            ax.text(i, v, str(v), ha='center', va='bottom')
        plt.xticks(rotation=45, ha='right')
        plt.ylabel('Times used')
        plt.tight_layout()
    plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3: sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

```csharp
// 7. ChartUpdaterWorker.cs
// ----------------------------------------------------------------
// Markets used last month (Top 10)
// ----------------------------------------------------------------
try
{
    _log.LogInformation("Starting markets_used_last_month at {Time}", DateTime.UtcNow);
    var data = await oracle.GetMarketsUsedLastMonthAsync(DateTime.UtcNow.AddDays(-30), 10);
    var url  = await generator.GenerateMarketsUsedLastMonthChartAsync(data);
    metadata["markets_used_last_month"] = new { ImageUrl = url, LastUpdated = DateTime.UtcNow };
    _log.LogInformation("markets_used_last_month updated -> {Url}", url);
}
catch (Exception ex)
{
    _log.LogError(ex, "Failed markets_used_last_month update at {Time}", DateTime.UtcNow);
}
```

```razor
@* 8. Razor *@
<GraphBox GraphID="markets_used_last_month"
          Title="Markets used last month (Top 10)" />
```
