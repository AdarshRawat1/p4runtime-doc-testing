✅ Done! You've now got a modular component for **“OTC Product Types Booked (Last 7 Days)”** using Plotly.

---

### 🔧 Where to place it

Put this file at:
```
/Shared/Charts/ProductTradeChart.razor
```

---

### 🧩 Add to `Counter.razor` (or wherever you want):

```razor
@using Star.Shared.Charts

<h3 class="mb-4">📊 Graph Dashboard</h3>

<FeatureUsageChart />
<ProductTradeChart />
```

---

### 🔁 What's Left?

Just confirm that this method exists in your `IOracleDataService.cs` and `OracleDataService.cs`:

```csharp
Task<List<ProductTrade>> GetOtcProductTradesAsync();
```

And your `ProductTrade.cs` model:

```csharp
public class ProductTrade
{
    public string ProductName { get; set; }
    public int TotalTrades { get; set; }
}
```

Ready to test this one out? Or shall I help prep the next chart module?









✅ Done! I’ve recreated your Oracle logic with the following:

---

### 📄 `IOracleDataService.cs`

```csharp
Task<List<ProductTrade>> GetOtcProductTradesAsync();
```

---

### 📄 `OracleDataService.cs`

- Fully implemented the query for OTC Product Types Booked (last 7 days)
- Connected to Oracle and mapped to `ProductTrade` model

---

### 📄 You also need this model file:

```csharp
// Models/ProductTrade.cs
namespace Star.Models
{
    public class ProductTrade
    {
        public string ProductName { get; set; } = string.Empty;
        public int TotalTrades { get; set; }
    }
}
```

---

You're now set to use `<ProductTradeChart />` in your dashboard with full backend connection!

Let me know when you're ready for the next chart component 🚀
