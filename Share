@using Star.Models
@using Star.Services
@using BlazorBootstrap

@if (IsLoading)
{
    <PlaceholderContainer Animation="PlaceholderAnimation.Wave">
        <Placeholder Width="PlaceholderWidth.Col12" Class="mb-2" />
        <Placeholder Width="PlaceholderWidth.Col12" Class="mb-2" />
        <Placeholder Width="PlaceholderWidth.Col12" Class="mb-2" />
    </PlaceholderContainer>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <Alert Color="AlertColor.Danger">@ErrorMessage</Alert>
}
else
{
    <!-- Key Point: Use TItem="double" matching ChartData<double> -->
    <Chart TItem="double" Data="@chartData" ChartType="ChartType.Bar" />
}

@code {
    private bool IsLoading = true;
    private string? ErrorMessage;

    /* Must be ChartData<double> to match TItem="double" above */
    private ChartData<double> chartData = new();

    [Inject]
    public IOracleDataService DataService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Update the method name to match what actually exists in your interface/service:
            var trades = await DataService.GetOtcProductTradeAsync(); 
            if (trades is null || trades.Count == 0)
            {
                ErrorMessage = "No data found for OTC Product Trades.";
                return;
            }

            var labels = trades.Select(t => t.ProductName).ToList();
            var values = trades.Select(t => (double)t.TotalTrades).ToList();

            /* Must be ChartDataset<double> to match ChartData<double> */
            var dataset = new ChartDataset<double>
            {
                Label = "Trades (Last 7 Days)",
                Data = values,
                BackgroundColor = "rgba(54, 162, 235, 0.6)",
                BorderColor = "rgba(54, 162, 235, 1.0)"
            };

            chartData.Labels = labels;
            /* Must be List<ChartDataset<double>> or List<IChartDataset<double>> */
            chartData.Datasets = new List<ChartDataset<double>> { dataset };
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }
}
