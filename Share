// ChartGeneratorService.cs
using System.Diagnostics;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using StarTrends.Models;

namespace StarTrends.Services
{
    public class ChartGeneratorService : IChartGeneratorService
    {
        private readonly ILogger<ChartGeneratorService> _logger;
        private readonly string _scriptsFolder;
        private readonly string _csvFolder;      // ← new
        private readonly string _chartsFolder;

        public ChartGeneratorService(
            ILogger<ChartGeneratorService> logger,
            IConfiguration        config,
            IHostEnvironment      env)
        {
            _logger = logger;

            // where your .py lives
            _scriptsFolder = Path.Combine(
                env.ContentRootPath,
                config["ChartScriptsPath"] ?? "PythonScripts");

            // NEW: where to dump CSVs
            _csvFolder = Path.Combine(
                env.ContentRootPath,
                config["CsvOutputPath"] ?? "chart_data");

            // where to put PNGs
            _chartsFolder = Path.Combine(
                env.ContentRootPath,
                "wwwroot",
                config["ChartsOutputPath"] ?? "charts");

            Directory.CreateDirectory(_scriptsFolder);
            Directory.CreateDirectory(_csvFolder);    // ← ensure it exists
            Directory.CreateDirectory(_chartsFolder);
        }

        public async Task<string> GenerateProductTradeChartAsync(IEnumerable<ProductTradeCount> data)
        {
            var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");

            // CSV now lives in its own folder
            var csvPath = Path.Combine(_csvFolder, $"product_trades_{ts}.csv");
            var pngPath = Path.Combine(_chartsFolder, $"product_trades_{ts}.png");

            // 1) Write CSV
            await using (var w = new StreamWriter(csvPath))
            {
                await w.WriteLineAsync("ProductTypeName,TotalTrades");
                foreach (var item in data)
                    await w.WriteLineAsync($"{item.ProductTypeName},{item.TotalTrades}");
            }

            // 2) Call Python
            var script = Path.Combine(_scriptsFolder, "generate_product_trade_chart.py");
            var psi = new ProcessStartInfo
            {
                FileName              = "python",
                Arguments             = $"\"{script}\" \"{csvPath}\" \"{pngPath}\"",
                RedirectStandardError = true,
                UseShellExecute       = false
            };

            using var proc = Process.Start(psi)
                           ?? throw new InvalidOperationException("Cannot start Python");
            var err = await proc.StandardError.ReadToEndAsync();
            await proc.WaitForExitAsync();
            if (!string.IsNullOrEmpty(err))
                _logger.LogError(err);

            // 3) Return web‐path for the PNG
            return $"/charts/{Path.GetFileName(pngPath)}";
        }
    }
}

