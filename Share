<div class="star-loader">
    <div class="star-icon">★</div>
    <div class="star-text">Loading graph...</div>
</div>

<style>
    .star-loader {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 150px;
        gap: 10px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .star-icon {
        font-size: 48px;
        color: #81cfff;
        animation: pulse 1.5s infinite;
    }

    .star-text {
        font-size: 16px;
        color: #555;
    }

    @keyframes pulse {
        0% {
            transform: scale(1);
            opacity: 0.7;
        }

        50% {
            transform: scale(1.2);
            opacity: 1;
        }

        100% {
            transform: scale(1);
            opacity: 0.7;
        }
    }
</style>





Absolutely! To enhance the user experience during data loading in your STAR dashboard, consider implementing a **custom loading animation** that reflects the STAR branding. Here's how you can achieve this:

---

## 🌟 Introducing the `StarLoader` Component

### 📁 File Location:
```
/Shared/Components/StarLoader.razor
```

### 🧩 Component Code



```razor
<div class="star-loader">
    <div class="star-icon">★</div>
    <div class="star-text">Loading STAR dashboard data...</div>
</div>

<style>
    .star-loader {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 150px;
        gap: 10px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .star-icon {
        font-size: 48px;
        color: #f39c12;
        animation: pulse 1.5s infinite;
    }

    .star-text {
        font-size: 16px;
        color: #555;
    }

    @keyframes pulse {
        0% { transform: scale(1); opacity: 0.7; }
        50% { transform: scale(1.2); opacity: 1; }
        100% { transform: scale(1); opacity: 0.7; }
    }
</style>
``



---

### ✅ How to Use in Your Components

1. **Import the Component*: At the top of your `.razor` file, ad:

   ```razor
   @using Star.Shared.Components
   ```



2. **Implement the Loader*: Within your component, use the `StarLoader` component conditionally based on your loading stae:

   ```razor
   @if (IsLoading)
   {
       <StarLoader />
   }
   else
   {
       <!-- Your main content goes here -->
   }
   ```



3. **Manage Loading State*: In your component's code-behind, manage the `IsLoading` flag appropriatey:

   ```csharp
   private bool IsLoading = false;

   private async Task LoadDataAsync()
   {
       IsLoading = true;
       StateHasChanged();

       // Simulate data loading
       await Task.Delay(2000);

       IsLoading = false;
       StateHasChanged();
   }
   ```



---

### 🎨 Customization Tips

- **Color Scheme*: Adjust the `color` property in `.star-icon` to match your application's thme.

- **Animation Speed*: Modify the `animation` duration in `.star-icon` to speed up or slow down the pulsing effct.

- **Text Message*: Change the content of `.star-text` to provide more context to users during loadng.

---

Feel free to replicate this component across different parts of your application to maintain a consistent and branded loading experience. If you need further assistance or additional variants, don't hesitate to ask! 

