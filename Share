Sorry about that—here’s the full set again with proper fenced blocks and consistent indentation.

---

## 1️⃣ Reports used last month (Top 25)

**1. Model**

```csharp
public class ReportUsageLastMonth
{
    public string Report    { get; set; }
    public int    TimesUsed { get; set; }
}
```

**2. IOracleDataService**

```csharp
Task<IEnumerable<ReportUsageLastMonth>> GetReportsUsedLastMonthAsync(DateTime since, int topN);
```

**3. OracleDataService**

```csharp
public async Task<IEnumerable<ReportUsageLastMonth>> GetReportsUsedLastMonthAsync(DateTime since, int topN)
{
    var list = new List<ReportUsageLastMonth>();
    await using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();

    const string sql = @"
SELECT Report, TimesUsed
FROM (
  SELECT r.feature AS Report,
         COUNT(1)   AS TimesUsed
    FROM star_action_audit r
   WHERE r.mod_dt > :since
     AND r.feature_type = 'REPORT'
   GROUP BY r.feature
   ORDER BY TimesUsed DESC
)
WHERE ROWNUM <= :topN";

    await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
    cmd.Parameters.Add("since", OracleDbType.Date).Value   = since;
    cmd.Parameters.Add("topN",  OracleDbType.Int32).Value  = topN;

    await using var rdr = await cmd.ExecuteReaderAsync();
    while (await rdr.ReadAsync())
    {
        list.Add(new ReportUsageLastMonth {
            Report    = rdr.GetString(rdr.GetOrdinal("Report")),
            TimesUsed = rdr.GetInt32 (rdr.GetOrdinal("TimesUsed"))
        });
    }

    return list;
}
```

**4. IChartGeneratorService**

```csharp
Task<string> GenerateReportsUsedLastMonthChartAsync(IEnumerable<ReportUsageLastMonth> data);
```

**5. ChartGeneratorService**

```csharp
public async Task<string> GenerateReportsUsedLastMonthChartAsync(IEnumerable<ReportUsageLastMonth> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir,   $"reports_used_last_month_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"reports_used_last_month_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Report,TimesUsed\n" +
        string.Join("\n", data.Select(d => $"{d.Report},{d.TimesUsed}")));

    var script = Path.Combine(_scriptDir, "generate_reports_used_last_month_chart.py");
    var psi    = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Could not start Python process");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrWhiteSpace(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}
```

**6. Python script** (`generate_reports_used_last_month_chart.py`)

```python
import sys, pandas as pd, matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp)
    fig, ax = plt.subplots(figsize=(10,6))
    if df.empty:
        ax.text(0.5,0.5,'No data to display',
                ha='center', va='center', fontsize=14)
        ax.axis('off')
    else:
        ax.bar(df['Report'], df['TimesUsed'])
        for i, v in enumerate(df['TimesUsed']):
            ax.text(i, v, str(v), ha='center', va='bottom')
        plt.xticks(rotation=45, ha='right')
        plt.ylabel('Times used')
        plt.tight_layout()
    plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3: sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

**7. ChartUpdaterWorker.cs**

```csharp
// ----------------------------------------------------------------
// Reports used last month (Top 25)
// ----------------------------------------------------------------
_log.LogInformation("=== Starting reports_used_last_month update at {Time} ===", DateTime.UtcNow);
var reportsData = await oracle.GetReportsUsedLastMonthAsync(DateTime.UtcNow.AddDays(-30), 25);
var reportsUrl  = await generator.GenerateReportsUsedLastMonthChartAsync(reportsData);
metadata["reports_used_last_month"] = new { ImageUrl = reportsUrl, LastUpdated = DateTime.UtcNow };
_log.LogInformation("Updated Chart/Meta -> {Url}", reportsUrl);
```

**8. Razor**

```razor
<GraphBox GraphID="reports_used_last_month"
          Title="Reports used last month (Top 25)" />
```

---

## 2️⃣ Markets used last month (Top 10)

**1. Model**

```csharp
public class MarketsUsedLastMonth
{
    public string Report    { get; set; }
    public int    TimesUsed { get; set; }
}
```

**2. IOracleDataService**

```csharp
Task<IEnumerable<MarketsUsedLastMonth>> GetMarketsUsedLastMonthAsync(DateTime since, int topN);
```

**3. OracleDataService**

```csharp
public async Task<IEnumerable<MarketsUsedLastMonth>> GetMarketsUsedLastMonthAsync(DateTime since, int topN)
{
    var list = new List<MarketsUsedLastMonth>();
    await using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();

    const string sql = @"
SELECT Report, TimesUsed
FROM (
  SELECT UPPER(r.detail) AS Report,
         COUNT(1)         AS TimesUsed
    FROM star_action_audit r
   WHERE r.mod_dt > :since
     AND r.feature_type = 'MARKET'
   GROUP BY UPPER(r.detail)
   ORDER BY TimesUsed DESC
)
WHERE ROWNUM <= :topN";

    await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
    cmd.Parameters.Add("since", OracleDbType.Date).Value   = since;
    cmd.Parameters.Add("topN",  OracleDbType.Int32).Value  = topN;

    await using var rdr = await cmd.ExecuteReaderAsync();
    while (await rdr.ReadAsync())
    {
        list.Add(new MarketsUsedLastMonth {
            Report    = rdr.GetString(rdr.GetOrdinal("Report")),
            TimesUsed = rdr.GetInt32 (rdr.GetOrdinal("TimesUsed"))
        });
    }

    return list;
}
```

**4. IChartGeneratorService**

```csharp
Task<string> GenerateMarketsUsedLastMonthChartAsync(IEnumerable<MarketsUsedLastMonth> data);
```

**5. ChartGeneratorService**

```csharp
public async Task<string> GenerateMarketsUsedLastMonthChartAsync(IEnumerable<MarketsUsedLastMonth> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir,   $"markets_used_last_month_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"markets_used_last_month_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Report,TimesUsed\n" +
        string.Join("\n", data.Select(d => $"{d.Report},{d.TimesUsed}")));

    var script = Path.Combine(_scriptDir, "generate_markets_used_last_month_chart.py");
    var psi    = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Could not start Python process");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrWhiteSpace(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}
```

**6. Python script** (`generate_markets_used_last_month_chart.py`)

```python
import sys, pandas as pd, matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp)
    fig, ax = plt.subplots(figsize=(10,6))
    if df.empty:
        ax.text(0.5,0.5,'No data to display',
                ha='center', va='center', fontsize=14)
        ax.axis('off')
    else:
        ax.bar(df['Report'], df['TimesUsed'])
        for i, v in enumerate(df['TimesUsed']):
            ax.text(i, v, str(v), ha='center', va='bottom')
        plt.xticks(rotation=45, ha='right')
        plt.ylabel('Times used')
        plt.tight_layout()
    plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3: sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

**7. ChartUpdaterWorker.cs**

```csharp
// ----------------------------------------------------------------
// Markets used last month (Top 10)
// ----------------------------------------------------------------
_log.LogInformation("=== Starting markets_used_last_month update at {Time} ===", DateTime.UtcNow);
var marketsData = await oracle.GetMarketsUsedLastMonthAsync(DateTime.UtcNow.AddDays(-30), 10);
var marketsUrl  = await generator.GenerateMarketsUsedLastMonthChartAsync(marketsData);
metadata["markets_used_last_month"] = new { ImageUrl = marketsUrl, LastUpdated = DateTime.UtcNow };
_log.LogInformation("Updated Chart/Meta -> {Url}", marketsUrl);
```

**8. Razor**

```razor
<GraphBox GraphID="markets_used_last_month"
          Title="Markets used last month (Top 10)" />
```

---

## 3️⃣ Blotters Flex vs Classic per month all users

**1. Model**

```csharp
public class BlottersFlexVsClassicPerMonth
{
    public DateTime Month { get; set; }
    public int       Pct   { get; set; }
}
```

**2. IOracleDataService**

```csharp
Task<IEnumerable<BlottersFlexVsClassicPerMonth>> GetBlottersFlexVsClassicPerMonthAsync(DateTime since);
```

**3. OracleDataService**

```csharp
public async Task<IEnumerable<BlottersFlexVsClassicPerMonth>> GetBlottersFlexVsClassicPerMonthAsync(DateTime since)
{
    var list = new List<BlottersFlexVsClassicPerMonth>();
    await using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();

    const string sql = @"
WITH x AS (
  SELECT 
    DECODE(r.feature,'Flex Blotter - Load','Flex','Classic')  AS Flex,
    CASE WHEN e.emp_grp_cod LIKE 'GT%' THEN 'GTx' ELSE e.emp_grp_cod END AS Users,
    TRUNC(r.mod_dt,'MON')                                     AS Month
  FROM star_action_audit r
  JOIN gfit_emp e ON e.nt_login = r.supp_user
  WHERE r.mod_dt > :since
    AND r.feature_type = 'BLOTTER'
    AND r.feature LIKE '% - Load'
    AND r.feature <> 'To Do Blotter - Load'
    AND r.detail NOT LIKE 'In Tray%'
    AND r.detail NOT LIKE 'Pending Blotter%'
),
y AS (
  SELECT 
    COUNT(1)                                          AS Count,
    Flex,
    Month,
    TRUNC(RATIO_TO_REPORT(COUNT(1)) OVER (PARTITION BY Month) * 100) AS Pct
  FROM x
  GROUP BY Month, Flex
)
SELECT Month, Pct
FROM y
WHERE Flex = 'Flex'
ORDER BY Month";

    await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
    cmd.Parameters.Add("since", OracleDbType.Date).Value = since;

    await using var rdr = await cmd.ExecuteReaderAsync();
    while (await rdr.ReadAsync())
    {
        list.Add(new BlottersFlexVsClassicPerMonth {
            Month = rdr.GetDateTime(rdr.GetOrdinal("Month")),
            Pct   = rdr.GetInt32   (rdr.GetOrdinal("Pct"))
        });
    }

    return list;
}
```

**4. IChartGeneratorService**

```csharp
Task<string> GenerateBlottersFlexVsClassicPerMonthChartAsync(IEnumerable<BlottersFlexVsClassicPerMonth> data);
```

**5. ChartGeneratorService**

```csharp
public async Task<string> GenerateBlottersFlexVsClassicPerMonthChartAsync(IEnumerable<BlottersFlexVsClassicPerMonth> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir,   $"blotters_flex_vs_classic_per_month_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"blotters_flex_vs_classic_per_month_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Month,Pct\n" +
        string.Join("\n", data.Select(d => $"{d.Month:yyyy-MM-dd},{d.Pct}")));

    var script = Path.Combine(_scriptDir, "generate_blotters_flex_vs_classic_per_month_chart.py");
    var psi    = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Could not start Python process");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrWhiteSpace(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}
```

**6. Python script** (`generate_blotters_flex_vs_classic_per_month_chart.py`)

```python
import sys, pandas as pd, matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Month'])
    fig, ax = plt.subplots(figsize=(10,6))
    if df.empty:
        ax.text(0.5,0.5,'No data to display',
                ha='center', va='center', fontsize=14)
        ax.axis('off')
    else:
        ax.plot(df['Month'], df['Pct'], marker='o')
        ax.set_xlabel('Month')
        ax.set_ylabel('Percent')
        ax.tick_params(axis='x', rotation=45)
        plt.tight_layout()
    plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3: sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

**7. ChartUpdaterWorker.cs**

```csharp
// ----------------------------------------------------------------
// Blotters Flex vs Classic per month all users
// ----------------------------------------------------------------
_log.LogInformation("=== Starting blotters_flex_vs_classic_per_month update at {Time} ===", DateTime.UtcNow);
var blotterTrend    = await oracle.GetBlottersFlexVsClassicPerMonthAsync(DateTime.Parse("2014-06-01"));
var blotterTrendUrl = await generator.GenerateBlottersFlexVsClassicPerMonthChartAsync(blotterTrend);
metadata["blotters_flex_vs_classic_per_month"] = new { ImageUrl = blotterTrendUrl, LastUpdated = DateTime.UtcNow };
_log.LogInformation("Updated Chart/Meta -> {Url}", blotterTrendUrl);
```

**8. Razor**

```razor
<GraphBox GraphID="blotters_flex_vs_classic_per_month"
          Title="Blotters Flex vs Classic per month all users" />
```

---

## 4️⃣ Blotters features used last month

**1. Model**

```csharp
public class BlotterFeatureUsageLastMonth
{
    public string BlotterFeature { get; set; }
    public int    TimesUsed      { get; set; }
}
```

**2. IOracleDataService**

```csharp
Task<IEnumerable<BlotterFeatureUsageLastMonth>> GetBlotterFeaturesUsedLastMonthAsync(DateTime since);
```

**3. OracleDataService**

```csharp
public async Task<IEnumerable<BlotterFeatureUsageLastMonth>> GetBlotterFeaturesUsedLastMonthAsync(DateTime since)
{
    var list = new List<BlotterFeatureUsageLastMonth>();
    await using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();

    const string sql = @"
SELECT r.feature AS BlotterFeature,
       COUNT(1)   AS TimesUsed
  FROM star_action_audit r
 WHERE r.mod_dt > :since
   AND r.feature_type = 'BLOTTER'
   AND r.feature <> 'Open trade'
   AND r.feature NOT LIKE '% - Load'
   AND r.feature NOT LIKE '% - On startup'
   AND r.feature NOT LIKE '% - Open'
   AND r.feature NOT LIKE '% - Open Item'
 GROUP BY r.feature
 ORDER BY TimesUsed DESC";

    await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
    cmd.Parameters.Add("since", OracleDbType.Date).Value = since;

    await using var rdr = await cmd.ExecuteReaderAsync();
    while (await rdr.ReadAsync())
    {
        list.Add(new BlotterFeatureUsageLastMonth {
            BlotterFeature = rdr.GetString(rdr.GetOrdinal("BlotterFeature")),
            TimesUsed      = rdr.GetInt32 (rdr.GetOrdinal("TimesUsed"))
        });
    }

    return list;
}
```

**4. IChartGeneratorService**

```csharp
Task<string> GenerateBlotterFeaturesUsedLastMonthChartAsync(IEnumerable<BlotterFeatureUsageLastMonth> data);
```

**5. ChartGeneratorService**

```csharp
public async Task<string> GenerateBlotterFeaturesUsedLastMonthChartAsync(IEnumerable<BlotterFeatureUsageLastMonth> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir,   $"blotter_features_used_last_month_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"blotter_features_used_last_month_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "BlotterFeature,TimesUsed\n" +
        string.Join("\n", data.Select(d => $"{d.BlotterFeature},{d.TimesUsed}")));

    var script = Path.Combine(_scriptDir, "generate_blotter_features_used_last_month_chart.py");
    var psi    = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Could not start Python process");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrWhiteSpace(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}
```

**6. Python script** (`generate_blotter_features_used_last_month_chart.py`)

```python
import sys, pandas as pd, matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp)
    fig, ax = plt.subplots(figsize=(10,6))
    if df.empty:
        ax.text(0.5,0.5,'No data to display',
                ha='center', va='center', fontsize=14)
        ax.axis('off')
    else:
        ax.bar(df['BlotterFeature'], df['TimesUsed'])
        for i, v in enumerate(df['TimesUsed']):
            ax.text(i, v, str(v), ha='center', va='bottom')
        plt.xticks(rotation=45, ha='right')
        plt.ylabel('Times used')
        plt.tight_layout()
    plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3: sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

**7. ChartUpdaterWorker.cs**

```csharp
// ----------------------------------------------------------------
// Blotters features used last month
// ----------------------------------------------------------------
_log.LogInformation("=== Starting blotter_features_used_last_month update at {Time} ===", DateTime.UtcNow);
var bltFeatures    = await oracle.GetBlotterFeaturesUsedLastMonthAsync(DateTime.UtcNow.AddDays(-30));
var bltFeaturesUrl = await generator.GenerateBlotterFeaturesUsedLastMonthChartAsync(bltFeatures);
metadata["blotter_features_used_last_month"] = new { ImageUrl = bltFeaturesUrl, LastUpdated = DateTime.UtcNow };
_log.LogInformation("Updated Chart/Meta -> {Url}", bltFeaturesUrl);
```

**8. Razor**

```razor
<GraphBox GraphID="blotter_features_used_last_month"
          Title="Blotters features used last month" />
```

---

## 5️⃣ Static used last month

**1. Model**

```csharp
public class StaticUsageLastMonth
{
    public string StaticName { get; set; }
    public int    TimesUsed  { get; set; }
}
```

**2. IOracleDataService**

```csharp
Task<IEnumerable<StaticUsageLastMonth>> GetStaticUsedLastMonthAsync(DateTime since);
```

**3. OracleDataService**

```csharp
public async Task<IEnumerable<StaticUsageLastMonth>> GetStaticUsedLastMonthAsync(DateTime since)
{
    var list = new List<StaticUsageLastMonth>();
    await using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();

    const string sql = @"
SELECT r.feature    AS StaticName,
       COUNT(1)     AS TimesUsed
  FROM star_action_audit r
 WHERE r.mod_dt > :since
   AND r.feature_type = 'STATIC'
 GROUP BY r.feature
 ORDER BY TimesUsed DESC";

    await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
    cmd.Parameters.Add("since", OracleDbType.Date).Value = since;

    await using var rdr = await cmd.ExecuteReaderAsync();
    while (await rdr.ReadAsync())
    {
        list.Add(new StaticUsageLastMonth {
            StaticName = rdr.GetString(rdr.GetOrdinal("StaticName")),
            TimesUsed  = rdr.GetInt32 (rdr.GetOrdinal("TimesUsed"))
        });
    }

    return list;
}
```

**4. IChartGeneratorService**

```csharp
Task<string> GenerateStaticUsedLastMonthChartAsync(IEnumerable<StaticUsageLastMonth> data);
```

**5. ChartGeneratorService**

```csharp
public async Task<string> GenerateStaticUsedLastMonthChartAsync(IEnumerable<StaticUsageLastMonth> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir,   $"static_used_last_month_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"static_used_last_month_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "StaticName,TimesUsed\n" +
        string.Join("\n", data.Select(d => $"{d.StaticName},{d.TimesUsed}")));

    var script = Path.Combine(_scriptDir, "generate_static_used_last_month_chart.py");
    var psi    = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Could not start Python process");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrWhiteSpace(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}
```

**6. Python script** (`generate_static_used_last_month_chart.py`)

```python
import sys, pandas as pd, matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp)
    fig, ax = plt.subplots(figsize=(10,6))
    if df.empty:
        ax.text(0.5,0.5,'No data to display',
                ha='center', va='center', fontsize=14)
        ax.axis('off')
    else:
        ax.bar(df['StaticName'], df['TimesUsed'])
        for i, v in enumerate(df['TimesUsed']):
            ax.text(i, v, str(v), ha='center', va='bottom')
        plt.xticks(rotation=45, ha='right')
        plt.ylabel('Times used')
        plt.tight_layout()
    plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3: sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

**7. ChartUpdaterWorker.cs**

```csharp
// ----------------------------------------------------------------
// Static used last month
// ----------------------------------------------------------------
_log.LogInformation("=== Starting static_used_last_month update at {Time} ===", DateTime.UtcNow);
var staticData = await oracle.GetStaticUsedLastMonthAsync(DateTime.UtcNow.AddDays(-30));
var staticUrl  = await generator.GenerateStaticUsedLastMonthChartAsync(staticData);
metadata["static_used_last_month"] = new { ImageUrl = staticUrl, LastUpdated = DateTime.UtcNow };
_log.LogInformation("Updated Chart/Meta -> {Url}", staticUrl);
```

**8. Razor**

```razor
<GraphBox GraphID="static_used_last_month"
          Title="Static used last month" />
```
