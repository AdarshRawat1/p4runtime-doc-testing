using Oracle.ManagedDataAccess.Client;
using YourProject.Models;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace YourProject.Services
{
    public class OracleDataService : IOracleDataService
    {
        private readonly string _connectionString;

        public OracleDataService(IConfiguration configuration)
        {
            _connectionString = configuration.GetConnectionString("OracleDb") 
                ?? throw new ArgumentNullException("Oracle connection string is not configured.");
        }

        public async Task<List<FeatureUsage>> GetFeatureUsageAsync()
        {
            var featureUsageList = new List<FeatureUsage>();

            try
            {
                using var conn = new OracleConnection(_connectionString);
                await conn.OpenAsync();

                using var cmd = conn.CreateCommand();
                cmd.CommandText = @"
                    SELECT feature, COUNT(*) AS usage_count
                    FROM star_action_audit
                    WHERE mod_dt > TRUNC(SYSDATE) - 30
                      AND feature_type = 'SEARCH'
                    GROUP BY feature
                    ORDER BY usage_count DESC
                ";

                using var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    var feature = reader["feature"]?.ToString() ?? string.Empty;
                    var usageCount = reader["usage_count"] != DBNull.Value 
                        ? Convert.ToInt32(reader["usage_count"]) : 0;

                    featureUsageList.Add(new FeatureUsage 
                    { 
                        Feature = feature, 
                        UsageCount = usageCount 
                    });
                }
            }
            catch (Exception ex)
            {
                // Log the exception if desired
                throw new Exception("Error fetching data from Oracle DB", ex);
            }

            return featureUsageList;
        }
    }
}















{
  "ConnectionStrings": {
    "OracleDb": "Data Source=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=yourhost)(PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=YourService)));User Id=yourUser;Password=yourPassword;"
  }
}












@page "/oracle-chart"
@using YourProject.Models
@using YourProject.Services
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common
@inject IOracleDataService OracleDataService

<h3>Feature Usage Chart</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@((MarkupString)ErrorMessage)</div>
}
else if (IsLoading)
{
    <p>Loading...</p>
}
else
{
    <BarChart @ref="barChart" Height="200" Class="mb-4" />
}

@code {
    private BarChart? barChart;
    private BarChartOptions barChartOptions = new BarChartOptions();
    private BlazorBootstrap.ChartData chartData = new BlazorBootstrap.ChartData();
    private bool IsLoading = true;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch data from the Oracle DB via the data service
            var featureUsageData = await OracleDataService.GetFeatureUsageAsync();

            if (featureUsageData == null || featureUsageData.Count == 0)
            {
                ErrorMessage = "No data available.";
                return;
            }

            // Map the data to chart labels and dataset
            var labels = featureUsageData.ConvertAll(item => item.Feature);
            var data = featureUsageData.ConvertAll(item => (double?)item.UsageCount);

            var datasets = new List<IChartDataset>
            {
                new BarChartDataset
                {
                    Data = data,
                    BackgroundColor = new List<string> { ColorUtility.CategoricalTwelveColors[0] },
                    BorderColor = new List<string> { ColorUtility.CategoricalTwelveColors[0] },
                    BorderWidth = new List<double> { 1 }
                }
            };

            chartData = new BlazorBootstrap.ChartData
            {
                Labels = labels,
                Datasets = datasets
            };

            // Configure chart options
            barChartOptions = new BarChartOptions
            {
                Responsive = true,
                Interaction = new Interaction { Mode = InteractionMode.Y },
                IndexAxis = "y"
            };
            barChartOptions.Plugins.Legend.Display = false;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"<strong>Error:</strong> {ex.Message}<br/><pre>{ex.StackTrace}</pre>";
        }
        finally
        {
            IsLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && barChart != null && string.IsNullOrEmpty(ErrorMessage))
        {
            await barChart.InitializeAsync(chartData, barChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
