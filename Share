Thought for a couple of seconds


Replace your two‐endpoint controller with a single “serve‐through‐API” action. Here’s the complete **GraphController.cs** you should drop in:

```csharp
using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using StarTrends.Services;

namespace StarTrends.Controllers
{
    [ApiController]
    [Route("api/graphs")]
    public class GraphController : ControllerBase
    {
        private readonly IGraphService _svc;

        public GraphController(IGraphService svc)
        {
            _svc = svc;
        }

        /// <summary>
        /// Returns the OTC product‐types chart PNG.
        /// If ?refresh=true is passed, it will regenerate first.
        /// </summary>
        /// <param name="refresh">whether to re‐run Python before returning</param>
        [HttpGet("otc-chart")]
        public async Task<IActionResult> GetOtcChart([FromQuery] bool refresh = false)
        {
            if (refresh)
            {
                await _svc.RegenerateChartAsync();
            }

            var img = await _svc.GetCachedChartAsync();
            if (img == null || img.Length == 0)
                return NotFound();

            return File(img, "image/png");
        }
    }
}
```

### How it works

1. **Single URL**: `/api/graphs/otc-chart`
2. **Regeneration**: adding `?refresh=true` in the query string will call your Python‐backed renderer before returning the bytes.
3. **No more static‐files gymnastics**—the browser always requests through this endpoint.

---

#### Update your Blazor component

Now point your `<img>` at that endpoint with a cache‐buster. In **Shared/ChartViewer.razor**:

```razor
@inject NavigationManager Nav

<div class="chart-container">
  <img src="@_chartUrl" alt="OTC Product Types" style="max-width:100%;" />

  <button class="btn btn-sm btn-outline-primary mt-2" @onclick="RefreshChart">
    ↻ Refresh
  </button>
</div>

@code {
  private string _chartUrl = "";

  protected override void OnInitialized()
  {
    // initial load (no refresh)
    SetChartUrl(refresh: false);
  }

  private void SetChartUrl(bool refresh)
  {
    // include both refresh flag and timestamp to bust cache
    var ts = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
    _chartUrl = $"{Nav.BaseUri}api/graphs/otc-chart?refresh={refresh.ToString().ToLower()}&ts={ts}";
  }

  private Task RefreshChart()
  {
    // switch to refresh + new ts
    SetChartUrl(refresh: true);
    return Task.CompletedTask;
  }
}
```

With these two changes:

* Clicking “Refresh” calls the same `/api/graphs/otc-chart?refresh=true&ts=...`
* Your controller regenerates (if asked), then returns the new PNG bytes directly
* The `<img>` updates immediately, no manual folder‐watching or static‐file tweaks required.
