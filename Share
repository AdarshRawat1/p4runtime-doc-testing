Perfect! Let’s quickly integrate Plotly.js v3.0.1 with your Blazor Server app to visualize your Oracle query result (like ProductName, TotalTrades) as a bar chart.


---

✅ Goal

We'll create a PlotlyChart.razor component that:

Loads Plotly.js (v3.0.1 from wwwroot)

Receives C# data (like product/trade list)

Uses JS interop to render a chart



---

✅ Step-by-Step Setup


---

1. Copy Plotly.js to wwwroot

1. Go to your downloaded NPM directory (node_modules/plotly.js-dist).


2. Copy plotly.min.js to:

wwwroot/js/plotly/plotly.min.js




---

2. Add plotly.min.js to _Layout.cshtml

At the bottom of Pages/_Layout.cshtml, before </body>:

<script src="js/plotly/plotly.min.js"></script>
<script src="js/plotlyInterop.js"></script>


---

3. Create plotlyInterop.js in wwwroot/js/

// wwwroot/js/plotlyInterop.js
window.renderPlotlyBarChart = (elementId, chartData) => {
    const trace = {
        x: chartData.labels,
        y: chartData.values,
        type: 'bar',
        marker: {
            color: 'rgba(54, 162, 235, 0.6)',
            line: {
                color: 'rgba(54, 162, 235, 1.0)',
                width: 1
            }
        }
    };

    const layout = {
        title: chartData.title,
        xaxis: { title: chartData.xLabel },
        yaxis: { title: chartData.yLabel }
    };

    Plotly.newPlot(elementId, [trace], layout);
};


---

4. Create the Razor Component

Shared/PlotlyBarChart.razor

<div id="@ChartId" style="width:100%;height:400px;"></div>

@code {
    [Parameter] public string ChartId { get; set; } = "plotlyChart";
    [Parameter] public List<string> Labels { get; set; } = new();
    [Parameter] public List<int> Values { get; set; } = new();
    [Parameter] public string Title { get; set; } = "Chart Title";
    [Parameter] public string XLabel { get; set; } = "X Axis";
    [Parameter] public string YLabel { get; set; } = "Y Axis";

    [Inject] private IJSRuntime JS { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var chartData = new
            {
                labels = Labels,
                values = Values,
                title = Title,
                xLabel = XLabel,
                yLabel = YLabel
            };

            await JS.InvokeVoidAsync("renderPlotlyBarChart", ChartId, chartData);
        }
    }
}


---

5. Use it in a Page

Example in Pages/Counter.razor or new chart page

@inject IOracleDataService DataService

@if (IsLoading)
{
    <p>Loading chart...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else
{
    <PlotlyBarChart
        ChartId="otcProductChart"
        Labels="@labels"
        Values="@values"
        Title="OTC Product Trades (Last 7 Days)"
        XLabel="Product"
        YLabel="Contracts" />
}

@code {
    private bool IsLoading = true;
    private string? ErrorMessage;
    private List<string> labels = new();
    private List<int> values = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var data = await DataService.GetOtcProductTradeAsync();
            labels = data.Select(d => d.ProductName).ToList();
            values = data.Select(d => d.TotalTrades).ToList();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }
}


---

✅ Summary


---

Would you like me to bundle this into downloadable files or build a version with stacked/line/scatter chart support too?

