// IOracleDataService.cs
using System.Collections.Generic;
using System.Threading.Tasks;
using Star.Models;

namespace Star.Services
{
    public interface IOracleDataService
    {
        Task<List<FeatureUsage>> GetFeatureUsageAsync();
        Task<List<ProductTrade>> GetOtcProductTradesAsync();
    }
}

// OracleDataService.cs
using Oracle.ManagedDataAccess.Client;
using Star.Models;
using Star.Services;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Star.Services
{
    public class OracleDataService : IOracleDataService
    {
        private readonly string _connectionString;

        public OracleDataService(IConfiguration configuration)
        {
            _connectionString = configuration.GetConnectionString("OracleDb")
                ?? throw new ArgumentNullException("Oracle connection string is not configured.");
        }

        public async Task<List<FeatureUsage>> GetFeatureUsageAsync()
        {
            var featureUsageList = new List<FeatureUsage>();

            try
            {
                using var conn = new OracleConnection(_connectionString);
                await conn.OpenAsync();

                using var cmd = conn.CreateCommand();
                cmd.CommandText = @"
                    SELECT feature, COUNT(*) AS usage_count
                    FROM star_action_audit
                    WHERE mod_dt > TRUNC(SYSDATE) - 30
                      AND feature_type = 'SEARCH'
                    GROUP BY feature
                    ORDER BY usage_count DESC
                ";

                using var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    var feature = reader["feature"]?.ToString() ?? string.Empty;
                    var usageCount = reader["usage_count"] != DBNull.Value
                        ? Convert.ToInt32(reader["usage_count"]) : 0;

                    featureUsageList.Add(new FeatureUsage
                    {
                        Feature = feature,
                        UsageCount = usageCount
                    });
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Error fetching data from Oracle DB", ex);
            }

            return featureUsageList;
        }

        public async Task<List<ProductTrade>> GetOtcProductTradesAsync()
        {
            var result = new List<ProductTrade>();

            try
            {
                using var conn = new OracleConnection(_connectionString);
                await conn.OpenAsync();

                using var cmd = conn.CreateCommand();
                cmd.CommandText = @"
                    SELECT c.prd_typ_name,
                           COUNT(c.prd_typ_name) AS total_trades
                    FROM star_workflow w
                    JOIN (
                        SELECT a.*,
                               CASE
                                  WHEN a.prd_typ_cod = 'IR1' THEN 'IR Swap (Fx/Fl)'
                                  WHEN a.prd_typ_cod = 'IR2' THEN 'IR Swap (IMM)'
                                  WHEN a.prd_typ_cod = 'IR3' THEN 'IR Swap (Fl/Fl)'
                                  WHEN a.prd_typ_cod = 'CC1' THEN 'CCY (Fx/Fl)'
                                  WHEN a.prd_typ_cod = 'CC2' THEN 'CCY (Fl/Fl)'
                                  WHEN a.prd_typ_cod = 'CC3' THEN 'CCY (Fx/Fx)'
                                  WHEN a.prd_typ_cod = 'FRA' THEN 'FRA'
                                  WHEN a.prd_typ_cod = 'CAP' THEN 'Cap'
                                  WHEN a.prd_typ_cod = 'FLR' THEN 'Floor'
                                  WHEN a.prd_typ_cod = 'CFS' THEN 'Cap/Floor Straddle'
                                  WHEN a.prd_typ_cod = 'COL' THEN 'Cap/Floor Collar'
                                  WHEN a.prd_typ_cod = 'OSP' THEN 'Swaption Pay'
                                  WHEN a.prd_typ_cod = 'OSR' THEN 'Swaption Rec'
                                  WHEN a.prd_typ_cod = 'OSS' THEN 'Swaption Strad'
                                  WHEN a.prd_typ_cod = 'DFX' THEN 'Deposit (Fixed)'
                                  WHEN a.prd_typ_cod = 'DFL' THEN 'Deposit (Float)'
                                  WHEN a.prd_typ_cod = 'CSH' THEN 'Cashflow'
                                  WHEN a.prd_typ_cod = 'BOC' THEN 'Bond Option Straddle'
                                  WHEN a.prd_typ_cod = 'BME' THEN 'Container BME'
                                  WHEN a.prd_typ_cod = 'IL1' THEN 'Inflation swap (In/Fx)'
                                  WHEN a.prd_typ_cod = 'IL2' THEN 'Inflation swap (In/Fl)'
                                  WHEN a.prd_typ_cod = 'IL3' THEN 'Inflation Fixing Lock (In)'
                                  ELSE a.prd_typ_cod
                               END AS prd_typ_name
                        FROM star_contract PARTITION(product_oth) a
                    ) c ON c.con_no = w.con_no
                    WHERE inp_dt > TRUNC(SYSDATE - 7)
                      AND c.con_no = w.con_no
                      AND c.mrr_typ_cod IN (0, 1, 6)
                    GROUP BY c.prd_typ_name
                    ORDER BY total_trades DESC
                ";

                using var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    var name = reader["prd_typ_name"]?.ToString() ?? string.Empty;
                    var count = reader["total_trades"] != DBNull.Value ? Convert.ToInt32(reader["total_trades"]) : 0;

                    result.Add(new ProductTrade
                    {
                        ProductName = name,
                        TotalTrades = count
                    });
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Error fetching OTC product trades", ex);
            }

            return result;
        }
    }
}
