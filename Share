# OTC Chart Generator & Python Script Fixes

Below are the **C# ChartGeneratorService** methods and **Python scripts** updated for your three OTC charts:

---

## 1. C#: ChartGeneratorService Methods

Add or replace these in your `ChartGeneratorService` class:

```csharp
public async Task<string> GenerateOtcIntradayRecBreaksPerWeekChartAsync(
    IEnumerable<OtcIntradayRecBreaksPerWeekCount> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir, $"otc_intraday_rec_breaks_per_week_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"otc_intraday_rec_breaks_per_week_{ts}.png");

    // 1) Write CSV
    await File.WriteAllTextAsync(csvPath,
        "Week,RecBreaks" + Environment.NewLine +
        string.Join(Environment.NewLine,
            data.Select(d => $"{d.Week:yyyy-MM-dd},{d.RecBreaks}"))
    );

    // 2) Invoke Python script
    var script = Path.Combine(_scriptDir,
        "generate_otc_intraday_rec_breaks_per_week_chart.py");
    var psi = new ProcessStartInfo("python",
            $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                     ?? throw new InvalidOperationException("Cannot start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrEmpty(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}

public async Task<string> GenerateOtcTradesSavedPerMinuteChartAsync(
    IEnumerable<OtcTradesSavedPerMinuteCount> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir, $"otc_trades_saved_per_minute_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"otc_trades_saved_per_minute_{ts}.png");

    // 1) Write CSV
    await File.WriteAllTextAsync(csvPath,
        "Minute,TradesSaved" + Environment.NewLine +
        string.Join(Environment.NewLine,
            data.Select(d => $"{d.Minute},{d.TradesSaved}"))
    );

    // 2) Invoke Python script
    var script = Path.Combine(_scriptDir,
        "generate_otc_trades_saved_per_minute_chart.py");
    var psi = new ProcessStartInfo("python",
            $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                     ?? throw new InvalidOperationException("Cannot start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrEmpty(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}

public async Task<string> GenerateOtcRecBreaksByReasonChartAsync(
    IEnumerable<OtcRecBreaksByReasonCount> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir, $"otc_rec_breaks_by_reason_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"otc_rec_breaks_by_reason_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Month,BreakReason,Breaks" + Environment.NewLine +
        string.Join(Environment.NewLine,
            data.Select(d => $"{d.Month:yyyy-MM-dd},{d.BreakReason},{d.Breaks}"))
    );

    var script = Path.Combine(_scriptDir,
        "generate_otc_rec_breaks_by_reason_chart.py");
    var psi = new ProcessStartInfo("python",
            $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };

    using var proc = Process.Start(psi)
                     ?? throw new InvalidOperationException("Cannot start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrEmpty(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}
```

---

## 2. Python: Script Fixes

### 2.1 `generate_otc_intraday_rec_breaks_per_week_chart.py`

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Usage: python script.py <in.csv> <out.png>

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Week'])
    if df.empty:
        fig = plt.figure(figsize=(8, 4))
        ax  = fig.add_subplot(111)
        ax.text(0.5, 0.5, 'No data', ha='center', va='center', fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    df = df.groupby('Week', as_index=False)['RecBreaks'].sum()
    df['EMA'] = df['RecBreaks'].ewm(span=26, adjust=False).mean()

    fig = plt.figure(figsize=(12, 6))
    ax  = fig.add_subplot(111)
    ax.plot(df['Week'], df['RecBreaks'], label='Actual', marker='o')
    ax.plot(df['Week'], df['EMA'],        label='6M EMA', linestyle='-', marker='.', color='red')
    ax.set_ylabel('Rec Breaks')
    ax.set_title('OTC Intraday Rec Breaks per Week')
    ax.legend()

    ax.xaxis.set_major_locator(mdates.WeekdayLocator(interval=2))
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%b-%d'))
    fig.autofmt_xdate()

    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print('Usage: python generate_otc_intraday_rec_breaks_per_week_chart.py <in.csv> <out.png>', file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

### 2.2 `generate_otc_trades_saved_per_minute_chart.py`

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Usage: python script.py <in.csv> <out.png>

def main(inp, outp):
    df = pd.read_csv(inp)
    # parse minute timestamps
    df['Minute'] = pd.to_datetime(df['Minute'], format='%d-%b-%Y %H:%M')
    if df.empty:
        fig = plt.figure(figsize=(8, 4))
        ax  = fig.add_subplot(111)
        ax.text(0.5, 0.5, 'No data', ha='center', va='center', fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    fig = plt.figure(figsize=(12, 6))
    ax  = fig.add_subplot(111)
    ax.scatter(df['Minute'], df['TradesSaved'], s=25, alpha=0.7)
    ax.set_ylabel('Trades Saved')
    ax.set_title('OTC Trades Saved per Minute (Last 5 days)')

    # show day labels as Month abbreviations
    ax.xaxis.set_major_locator(mdates.DayLocator(interval=1))
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))
    fig.autofmt_xdate()

    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print('Usage: python generate_otc_trades_saved_per_minute_chart.py <in.csv> <out.png>', file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

### 2.3 `generate_otc_rec_breaks_by_reason_chart.py`

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Usage: python script.py <in.csv> <out.png>

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Month'])
    if df.empty:
        fig = plt.figure(figsize=(8, 4))
        ax  = fig.add_subplot(111)
        ax.text(0.5, 0.5, 'No data', ha='center', va='center', fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    df = df.groupby(['Month','BreakReason'], as_index=False)['Breaks'].sum()
    pivot = df.pivot(index='Month', columns='BreakReason', values='Breaks').fillna(0)

    fig = plt.figure(figsize=(12, 6))
    ax  = fig.add_subplot(111)
    # plot each reason as a separate line
    for reason in pivot.columns:
        ax.plot(pivot.index, pivot[reason], marker='o', label=reason)

    ax.set_ylabel('Breaks')
    ax.set_title('OTC Rec Breaks per Week by Reason')
    ax.legend(title='Reason')

    ax.xaxis.set_major_locator(mdates.MonthLocator(interval=2))
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%b'))
    fig.autofmt_xdate()

    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print('Usage: python generate_otc_rec_breaks_by_reason_chart.py <in.csv> <out.png>', file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

