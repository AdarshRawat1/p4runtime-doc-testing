using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using StarTrends.Models;

namespace StarTrends.Services
{
    public class ChartGeneratorService : IChartGeneratorService
    {
        private readonly ILogger<ChartGeneratorService> _log;
        private readonly string _scriptDir;
        private readonly string _csvDir;
        private readonly string _chartDir;
        private const string LatestFileName = "product_trades_latest.png";

        public ChartGeneratorService(
            ILogger<ChartGeneratorService> log,
            IConfiguration config,
            IHostEnvironment env)
        {
            _log       = log;
            _scriptDir = Path.Combine(env.ContentRootPath, config["ChartScriptsPath"]);
            _csvDir    = Path.Combine(env.ContentRootPath, config["CsvOutputPath"]);
            _chartDir  = Path.Combine(env.ContentRootPath, "wwwroot", config["ChartsOutputPath"]);

            Directory.CreateDirectory(_scriptDir);
            Directory.CreateDirectory(_csvDir);
            Directory.CreateDirectory(_chartDir);
        }

        public async Task<string> GenerateProductTradeChartAsync(IEnumerable<ProductTradeCount> data)
        {
            // write CSV for traceability
            var timestamp = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
            var csvPath   = Path.Combine(_csvDir, $"product_trades_{timestamp}.csv");
            await File.WriteAllTextAsync(csvPath,
                "ProductTypeName,TotalTrades\n" +
                string.Join("\n", data.Select(d => $"{d.ProductTypeName},{d.TotalTrades}"))
            );

            // generate PNG
            var pngPath  = Path.Combine(_chartDir, $"product_trades_{timestamp}.png");
            var script   = Path.Combine(_scriptDir, "generate_product_trade_chart.py");
            if (!File.Exists(script))
                throw new FileNotFoundException("Chart script not found", script);

            var psi = new ProcessStartInfo("python", $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
            {
                RedirectStandardError = true,
                UseShellExecute       = false
            };
            using var proc = Process.Start(psi)
                          ?? throw new InvalidOperationException("Failed to start Python process");
            var err = await proc.StandardError.ReadToEndAsync();
            await proc.WaitForExitAsync();
            if (!string.IsNullOrWhiteSpace(err)) _log.LogError(err);

            // update the static 'latest' file
            var latestPath = Path.Combine(_chartDir, LatestFileName);
            File.Copy(pngPath, latestPath, overwrite: true);

            // always return the same URL
            return $"/charts/{LatestFileName}";
        }
    }
}
