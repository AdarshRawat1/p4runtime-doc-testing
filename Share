// ChartGeneratorService.cs

public async Task<string> GenerateOtcRecBreaksByReasonChartAsync(IEnumerable<OtcRecBreaksByReasonCount> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir, $"otc_rec_breaks_by_reason_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"otc_rec_breaks_by_reason_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Month,BreakReason,Breaks\n" +
        string.Join("\n", data.Select(d => $"{d.Month:yyyy-MM-dd},{d.BreakReason},{d.Breaks}"))
    );

    var script = Path.Combine(_scriptDir, "generate_otc_rec_breaks_by_reason_chart.py");
    var psi = new ProcessStartInfo("python", $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };
    using var proc = Process.Start(psi) ?? throw new InvalidOperationException("Cannot start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrEmpty(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}

public async Task<string> GenerateMwRecBreaksPerThousandChartAsync(IEnumerable<MwRecBreaksPerThousandCount> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir, $"mw_rec_breaks_per_1000_deals_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"mw_rec_breaks_per_1000_deals_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Week,RecBreaksPerThousandDeals\n" +
        string.Join("\n", data.Select(d => $"{d.Week:yyyy-MM-dd},{d.RecBreaksPerThousandDeals:F2}"))
    );

    var script = Path.Combine(_scriptDir, "generate_mw_rec_breaks_per_thousand_chart.py");
    var psi = new ProcessStartInfo("python", $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };
    using var proc = Process.Start(psi) ?? throw new InvalidOperationException("Cannot start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrEmpty(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}








# PythonScripts/generate_otc_rec_breaks_by_reason_chart.py

#!/usr/bin/env python3

import sys
import pandas as pd
import matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Month'])
    if df.empty:
        fig = plt.figure(figsize=(8,4))
        ax  = fig.add_subplot(111)
        ax.text(0.5, 0.5, 'No data', ha='center', va='center', fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    # aggregate and pivot
    df = df.groupby(['Month', 'BreakReason'], as_index=False)['Breaks'].sum()
    pivot = df.pivot(index='Month', columns='BreakReason', values='Breaks').fillna(0)

    fig = plt.figure(figsize=(12,6))
    ax  = fig.add_subplot(111)
    pivot.plot(ax=ax)
    ax.set_ylabel('Breaks')
    ax.set_title('OTC Rec Breaks per Reason')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        sys.stderr.write('Usage: python generate_otc_rec_breaks_by_reason_chart.py <in.csv> <out.png>\\n')
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])








# PythonScripts/generate_mw_rec_breaks_per_thousand_chart.py



#!/usr/bin/env python3

import sys
import pandas as pd
import matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Week'])
    if df.empty:
        fig = plt.figure(figsize=(8,4))
        ax  = fig.add_subplot(111)
        ax.text(0.5, 0.5, 'No data', ha='center', va='center', fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    fig = plt.figure(figsize=(12,6))
    ax  = fig.add_subplot(111)
    ax.plot(df['Week'], df['RecBreaksPerThousandDeals'], marker='o')
    ax.set_ylabel('Rec Breaks per 1000 Deals')
    ax.set_title('MW Rec Breaks per 1000 Deals')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        sys.stderr.write('Usage: python generate_mw_rec_breaks_per_thousand_chart.py <in.csv> <out.png>\\n')
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])

