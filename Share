Perfect! Since we‚Äôre back in rapid development mode, here‚Äôs the plan for implementing this **‚ÄúMarket Event in Last Month‚Äù** 2D graph:

---

### ‚úÖ Step-by-Step Implementation Plan

#### üìÅ 1. **Model**
Create a model file for this graph in `Star/Models/MarketEventStat.cs`:

```csharp
namespace Star.Models
{
    public class MarketEventStat
    {
        public string EventName { get; set; } = string.Empty;
        public int Contracts { get; set; }
    }
}
```

---

#### üõ†Ô∏è 2. **OracleDataService Method**
Add this to your `OracleDataService.cs`:

```csharp

public async Task<List<MarketEventStat>> GetMarketEventStatsAsync()
{
    var result = new List<MarketEventStat>();

    try
    {
        using var conn = new OracleConnection(_connectionString);
        await conn.OpenAsync();

        using var cmd = conn.CreateCommand();
        cmd.CommandText = @"
            WITH clearing AS (
              SELECT m.con_no, c.clr_org
              FROM star_mkt_ops m
              JOIN star_clearing c ON c.con_no = m.con_no
              WHERE m.mkt_evt_type = 'RPTY'
                AND m.mev_sub_type = 'UNS'
                AND m.mod_dt > (SYSDATE - 30)
                AND m.status <> 'PROP'
                AND m.mkt_evt_type <> 'UNDO'
            ),
            m AS (
              SELECT a.*,
                CASE
                  WHEN a.mkt_evt_type = 'RPTY' AND a.mev_sub_type = 'PNV' THEN 'Partial Remaining Party'
                  WHEN a.mkt_evt_type = 'RPTY' AND a.mev_sub_type = 'UNS'
                       AND EXISTS (SELECT 1 FROM clearing WHERE clr_org = 16582 AND con_no = a.con_no) THEN 'LCH. Clearnet LTD'
                  WHEN a.mkt_evt_type = 'RPTY' AND a.mev_sub_type = 'UNS'
                       AND EXISTS (SELECT 1 FROM clearing WHERE clr_org = 226198 AND con_no = a.con_no) THEN 'Japan Securities Clearing Corp'
                  WHEN a.mkt_evt_type = 'RPTY' AND a.mev_sub_type = 'UNS'
                       AND EXISTS (SELECT 1 FROM clearing WHERE clr_org = 7048 AND con_no = a.con_no) THEN 'Chicago Mercantile Exchange'
                  WHEN a.mkt_evt_type = 'RPTY' AND a.mev_sub_type = 'UNS'
                       AND EXISTS (SELECT 1 FROM clearing WHERE clr_org = 653 AND con_no = a.con_no) THEN 'Banco Central Do Brasil'
                  WHEN a.mkt_evt_type = 'RPTY' AND a.mev_sub_type = 'UNS' THEN 'Remaining Party'
                  WHEN a.mkt_evt_type = 'UWIN' THEN 'Unwind'
                  WHEN a.mkt_evt_type = 'STIN' THEN 'Step In'
                  WHEN a.mkt_evt_type = 'SOUT' THEN 'Step Out'
                  WHEN a.mkt_evt_type = 'REST' THEN 'Restructure'
                  WHEN a.mkt_evt_type = 'PTFR' THEN 'Portfolio Reassignment'
                  WHEN a.mkt_evt_type = 'EXP' THEN 'Expiry'
                  WHEN a.mkt_evt_type = 'EP' THEN 'Physical exercise'
                  WHEN a.mkt_evt_type = 'EC' THEN 'Cash exercise'
                  WHEN a.mkt_evt_type = 'DEL' THEN 'Delete'
                  WHEN a.mkt_evt_type = 'EXC' THEN 'Exercise'
                  ELSE a.mkt_evt_type
                END AS mkt_evt_name
              FROM star_mkt_ops a
            )
            SELECT m.mkt_evt_name, COUNT(m.mkt_event_id) AS MEVS
            FROM m
            JOIN star_contract PARTITION(product_oth) c ON c.con_no = m.con_no
            WHERE m.mod_dt > (SYSDATE - 30)
              AND m.status <> 'PROP'
              AND m.mkt_evt_type <> 'UNDO'
            GROUP BY m.mkt_evt_name
            ORDER BY MEVS DESC
        ";

        using var reader = await cmd.ExecuteReaderAsync();
        while (await reader.ReadAsync())
        {
            var name = reader["mkt_evt_name"]?.ToString() ?? string.Empty;
            var count = reader["MEVS"] != DBNull.Value ? Convert.ToInt32(reader["MEVS"]) : 0;

            result.Add(new MarketEventStat
            {
                EventName = name,
                Contracts = count
            });
        }
    }
    catch (Exception ex)
    {
        throw new Exception("Error fetching Market Event stats", ex);
    }

    return result;
}

```

Also add this method to `IOracleDataService.cs`:

```csharp
Task<List<MarketEventStat>> GetMarketEventStatsAsync();
```

---

#### üìä 3. **Create Component: `Shared/Charts/MarketEventChart.razor`**

```razor
@using Star.Models
@inject IOracleDataService DataService
@inject IJSRuntime JSRuntime

<h5 class="fw-semibold">Market Events in Last Month</h5>
<div class="mb-3">
    <button class="btn btn-sm btn-primary me-2" @onclick="() => GenerateGraph(false)">Show Normal</button>
    <button class="btn btn-sm btn-secondary" @onclick="() => GenerateGraph(true)">Show Zoomed</button>
</div>

@if (IsLoading)
{
    <StarLoader Message="Fetching market event statistics..." />
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<div id="marketEventChart" style="width: 100%; height: 400px;" class="@(IsLoading ? "d-none" : "")"></div>

@code {
    private bool IsLoading = false;
    private string? ErrorMessage;

    private async Task GenerateGraph(bool logScale)
    {
        IsLoading = true;
        ErrorMessage = null;

        try
        {
            var data = await DataService.GetMarketEventStatsAsync();
            var labels = data.Select(d => d.EventName).ToList();
            var values = data.Select(d => (double)d.Contracts).ToList();

            var chartData = new
            {
                labels,
                values,
                title = "Market Events in Last Month",
                xLabel = "Event",
                yLabel = "Contracts"
            };

            await JSRuntime.InvokeVoidAsync("renderPlotlyBarChart", "marketEventChart", chartData, logScale);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }
}
```

---

#### üß© 4. **Use It in Trade Page**

Go to your Trade section page (`Pages/Trade.razor`) and include:

```razor
<MarketEventChart />
```

Make sure `@using Star.Shared.Charts` is added in `_Imports.razor`.

---

### üé® Optional:
If the y-axis values vary greatly, log scale will help. If not, it still gives a better UX with the toggle buttons.

---

Once you confirm this is working, we‚Äôll repeat the same modular pattern for the next query! Ready to move?
