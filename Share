**Clarifying the graph generation process**

It looks like the user wants a Python-based graph where the image is generated and saved into a "charts" folder. Then, they want to display the graph on the webpage using a simple `<img>` tag, without any extra coding. So, Python script should generate a PNG file in the `wwwroot/charts` folder. The Blazor page or controller will point to the file location, showing the image dynamically when refreshed, but for now, they probably just need something simple. I’ll generate that file with the Python script, no extra controller steps.


Thought for 4 seconds


Okay, let’s strip it right back to pure Python → PNG → static file → `<img>` on your page. No OxyPlot, no Base64, no HttpClient calls. You’ll:

1. Have your Python script write `otc-product-types.png` into `wwwroot/charts/`.
2. Make sure `UseStaticFiles()` is on.
3. Put a plain `<img src="/charts/otc-product-types.png">` in your Blazor page.

If you ever need a fresh chart, you can still hit the refresh API; but on *startup* we’ll generate one automatically so you always have something to show.

---

## 1) Python render script

Put this in `PythonTools/render.py` (unchanged from before):

```python
#!/usr/bin/env python
import sys, json
import matplotlib.pyplot as plt

def main():
    data = json.load(sys.stdin)
    labels = [d["product"] for d in data]
    values = [d["totalTrades"] for d in data]

    fig, ax = plt.subplots(figsize=(8, 4))
    ax.bar(labels, values)
    ax.set_title("OTC Product Types (last 7 days)")
    ax.set_ylabel("Total Trades")
    plt.xticks(rotation=30, ha="right")
    plt.tight_layout()

    # write PNG to stdout
    buf = sys.stdout.buffer
    fig.savefig(buf, format="png")
    buf.flush()

if __name__ == "__main__":
    main()
```

---

## 2) GraphService (C#)

```csharp
// Services/GraphService.cs

using System.Diagnostics;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;

namespace StarTrends.Services
{
    public class GraphService
    {
        private readonly IWebHostEnvironment _env;
        private readonly string _chartPath;
        private readonly IGraphDataRepo _repo;

        public GraphService(IWebHostEnvironment env, IGraphDataRepo repo)
        {
            _env = env;
            _repo = repo;
            var chartsDir = Path.Combine(env.WebRootPath, "charts");
            Directory.CreateDirectory(chartsDir);
            _chartPath = Path.Combine(chartsDir, "otc-product-types.png");
        }

        public async Task RegenerateChartAsync()
        {
            // fetch last-7-days data
            var raw = await _repo.FetchOtcDataAsync(7);
            var payload = JsonSerializer.Serialize(raw, new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            });

            var psi = new ProcessStartInfo
            {
                FileName = "python",
                Arguments = "render.py",
                RedirectStandardInput = true,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true,
                WorkingDirectory = Path.Combine(AppContext.BaseDirectory, "PythonTools")
            };

            using var proc = Process.Start(psi)!;
            await proc.StandardInput.WriteAsync(payload);
            proc.StandardInput.Close();

            // read PNG bytes from Python’s stdout
            using var ms = new MemoryStream();
            await proc.StandardOutput.BaseStream.CopyToAsync(ms);
            await proc.WaitForExitAsync();

            // write to wwwroot/charts/otc-product-types.png
            await File.WriteAllBytesAsync(_chartPath, ms.ToArray());
        }
    }
}
```

---

## 3) GraphController (refresh endpoint)

```csharp
// Controllers/GraphController.cs

using Microsoft.AspNetCore.Mvc;
using StarTrends.Services;
using System.Threading.Tasks;

namespace StarTrends.Controllers
{
    [ApiController]
    [Route("api/graphs")]
    public class GraphController : ControllerBase
    {
        private readonly GraphService _svc;
        public GraphController(GraphService svc) => _svc = svc;

        // GET api/graphs/refresh-otc-chart
        [HttpGet("refresh-otc-chart")]
        public async Task<IActionResult> Refresh()
        {
            await _svc.RegenerateChartAsync();
            return Ok("Chart regenerated");
        }
    }
}
```

---

## 4) Program.cs (generate on startup + static files)

```csharp
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using StarTrends.Services;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();
builder.Services.AddScoped<IGraphDataRepo, OracleDataRepo>();
builder.Services.AddScoped<GraphService>();
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();

var app = builder.Build();

app.UseHttpsRedirection();
app.UseStaticFiles();     // <-- serves wwwroot/charts/otc-product-types.png
app.UseRouting();

app.MapControllers();
app.MapBlazorHub();
app.MapFallbackToPage("/_Host");

// on startup, generate the chart so it's always there
using (var scope = app.Services.CreateScope())
{
    var svc = scope.ServiceProvider.GetRequiredService<GraphService>();
    await svc.RegenerateChartAsync();
}

app.Run();
```

---

## 5) Pages/Home.razor (plain `<img>`)

```razor
@page "/"

<h3>OTC Product Types (last 7 days)</h3>

<img src="charts/otc-product-types.png"
     alt="OTC Product Types"
     style="max-width:100%; border:1px solid #ccc;" />

<p>
    <a href="api/graphs/refresh-otc-chart" target="_blank">
        Regenerate chart
    </a>
</p>
```

---

### What this does

* **On startup** your app runs the Python script and writes `wwwroot/charts/otc-product-types.png`.
* **StaticFiles** middleware serves `/charts/otc-product-types.png` directly.
* Your Home page simply embeds that PNG via a normal `<img>`.
* If you ever need a fresh one, click the “Regenerate chart” link (or call that URL in your browser), then reload the page.

That should get you right back to exactly one server‐generated PNG shown on your Blazor page, driven entirely by your Python code.
