The ORA-00923 is telling you your `FROM` clause is malformed. The easiest fix is to ditch the old-style comma join altogether and write everything as explicit `JOIN`s. For example, replace your current SQL in `GetActiveUsersByLocationAsync` with this:

```csharp
const string sql = @"
SELECT 
  lo.loc_name           AS Location,
  COUNT(DISTINCT a.supp_user) AS Users
FROM star_login_audit a
  JOIN gfit_groups g 
    ON g.emp_grp_cod = a.emp_grp_cod
  JOIN star_echo_location lo 
    ON (CASE WHEN a.adt_loc = 'NYC' THEN 'NYK' ELSE a.adt_loc END) = lo.loc_id
WHERE 
  a.mod_dt > :since
  AND a.adt_act = 'LIN'
  AND a.adt_appl = 'POL'
  AND a.supp_user = a.asmd_user
  AND a.appl_ver <> '1.0.0'
GROUP BY lo.loc_name
ORDER BY Users DESC";
```

Then your method becomes:

```csharp
public async Task<IEnumerable<ActiveUserLocationCount>> GetActiveUsersByLocationAsync(DateTime since)
{
    var list = new List<ActiveUserLocationCount>();
    await using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();

    const string sql = /* the block above */;
    await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
    cmd.Parameters.Add("since", OracleDbType.Date).Value = since;

    await using var rdr = await cmd.ExecuteReaderAsync();
    while (await rdr.ReadAsync())
    {
        list.Add(new ActiveUserLocationCount {
            Location = rdr.GetString(rdr.GetOrdinal("Location")),
            Users    = rdr.GetInt32 (rdr.GetOrdinal("Users"))
        });
    }
    return list;
}
```

This way there’s no mixing of comma-joins and ANSI `JOIN`s, and Oracle will find its `FROM` exactly where it expects.







Below are the **8 steps** for each of the three new bar-charts, following the same modular pattern:

---

## 1️⃣ Slowest Deal Enquiry Searches (Last 7 Days, Top 25)

**1. Model**

```csharp
public class SlowestDealSearch
{
    public string Search                { get; set; }
    public int    AverageTimeSeconds    { get; set; }
}
```

**2. IOracleDataService**

```csharp
Task<IEnumerable<SlowestDealSearch>> GetSlowestDealSearchesAsync(DateTime since, int topN);
```

**3. OracleDataService**

```csharp
public async Task<IEnumerable<SlowestDealSearch>> GetSlowestDealSearchesAsync(DateTime since, int topN)
{
    var list = new List<SlowestDealSearch>();
    await using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();
    const string sql = @"
SELECT Search, AverageTimeSeconds
FROM (
  SELECT NVL(a.detail,'(none)') AS Search,
         TRUNC(AVG(a.duration_ms)/1000) AS AverageTimeSeconds
    FROM star_action_audit a
   WHERE a.mod_dt > :since
     AND a.feature = 'Deal Enquiry - Run'
   GROUP BY a.detail
   HAVING COUNT(1) > 5
   ORDER BY AVG(a.duration_ms) DESC
)
WHERE ROWNUM <= :topN";
    await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
    cmd.Parameters.Add("since", OracleDbType.Date).Value = since;
    cmd.Parameters.Add("topN",  OracleDbType.Int32).Value = topN;
    await using var rdr = await cmd.ExecuteReaderAsync();
    while (await rdr.ReadAsync())
        list.Add(new SlowestDealSearch {
            Search             = rdr.GetString(rdr.GetOrdinal("Search")),
            AverageTimeSeconds = rdr.GetInt32 (rdr.GetOrdinal("AverageTimeSeconds"))
        });
    return list;
}
```

**4. IChartGeneratorService**

```csharp
Task<string> GenerateSlowestDealSearchesChartAsync(IEnumerable<SlowestDealSearch> data);
```

**5. ChartGeneratorService**

```csharp
public async Task<string> GenerateSlowestDealSearchesChartAsync(IEnumerable<SlowestDealSearch> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir,   $"slowest_searches_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"slowest_searches_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Search,AverageTimeSeconds\n" +
        string.Join("\n", data.Select(d =>
            $"{d.Search},{d.AverageTimeSeconds}")));

    var script = Path.Combine(_scriptDir, "generate_slowest_searches_chart.py");
    var psi = new ProcessStartInfo("python",
        $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    { RedirectStandardError = true, UseShellExecute = false };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Could not start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrWhiteSpace(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}
```

**6. Python script** (`generate_slowest_searches_chart.py`)

```python
import sys, pandas as pd, matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp)
    fig, ax = plt.subplots(figsize=(10,6))
    if df.empty:
        ax.text(0.5,0.5,'No data to display',ha='center',va='center',fontsize=14)
        ax.axis('off')
    else:
        ax.bar(df['Search'], df['AverageTimeSeconds'])
        for i, v in enumerate(df['AverageTimeSeconds']):
            ax.text(i, v, str(v), ha='center', va='bottom')
        plt.xticks(rotation=45, ha='right')
        plt.ylabel('Average time (s)')
        plt.tight_layout()
    plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3: sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

**7. ChartUpdaterWorker.cs**

```csharp
// ----------------------------------------------------------------
// Slowest Deal Enquiry Searches (Last 7 Days, Top 25)
// ----------------------------------------------------------------
_log.LogInformation("=== Starting slowest-deal-searches update at {Time} ===", DateTime.UtcNow);
var searches = await oracle.GetSlowestDealSearchesAsync(DateTime.UtcNow.AddDays(-7), 25);
var searchUrl = await generator.GenerateSlowestDealSearchesChartAsync(searches);
metadata["slowest_deal_searches"] = new { ImageUrl = searchUrl, LastUpdated = DateTime.UtcNow };
_log.LogInformation("Updated Chart and Meta data -> {Url}", searchUrl);
```

**8. Razor**

```razor
<GraphBox GraphID="slowest_deal_searches"
          Title="Slowest deal enquiry searches in last 7 days (Top 25)" />
```

---

## 2️⃣ Slowest User Operations (Last 7 Days, Avg >15s & >5 Occurrences)

**1. Model**

```csharp
public class SlowestUserOperation
{
    public string OperationType        { get; set; }
    public int    AverageTimeSeconds   { get; set; }
}
```

**2. IOracleDataService**

```csharp
Task<IEnumerable<SlowestUserOperation>> GetSlowestUserOperationsAsync(DateTime since);
```

**3. OracleDataService**

```csharp
public async Task<IEnumerable<SlowestUserOperation>> GetSlowestUserOperationsAsync(DateTime since)
{
    var list = new List<SlowestUserOperation>();
    await using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();
    const string sql = @"
SELECT feature AS OperationType,
       TRUNC(AVG(a.duration_ms)/1000) AS AverageTimeSeconds
  FROM star_action_audit a
 WHERE a.mod_dt > :since
 GROUP BY a.feature_type, a.feature
HAVING AVG(a.duration_ms) > 15000
   AND COUNT(1) > 5
 ORDER BY AVG(a.duration_ms) DESC";
    await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
    cmd.Parameters.Add("since", OracleDbType.Date).Value = since;
    await using var rdr = await cmd.ExecuteReaderAsync();
    while (await rdr.ReadAsync())
        list.Add(new SlowestUserOperation {
            OperationType      = rdr.GetString(rdr.GetOrdinal("OperationType")),
            AverageTimeSeconds = rdr.GetInt32 (rdr.GetOrdinal("AverageTimeSeconds"))
        });
    return list;
}
```

**4. IChartGeneratorService**

```csharp
Task<string> GenerateSlowestUserOperationsChartAsync(IEnumerable<SlowestUserOperation> data);
```

**5. ChartGeneratorService**

```csharp
public async Task<string> GenerateSlowestUserOperationsChartAsync(IEnumerable<SlowestUserOperation> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir,   $"slowest_ops_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"slowest_ops_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "OperationType,AverageTimeSeconds\n" +
        string.Join("\n", data.Select(d =>
            $"{d.OperationType},{d.AverageTimeSeconds}")));

    var script = Path.Combine(_scriptDir, "generate_slowest_ops_chart.py");
    var psi = new ProcessStartInfo("python",
        $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    { RedirectStandardError = true, UseShellExecute = false };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Could not start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrWhiteSpace(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}
```

**6. Python script** (`generate_slowest_ops_chart.py`)

```python
import sys, pandas as pd, matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp)
    fig, ax = plt.subplots(figsize=(10,6))
    if df.empty:
        ax.text(0.5,0.5,'No data to display',ha='center',va='center',fontsize=14)
        ax.axis('off')
    else:
        ax.bar(df['OperationType'], df['AverageTimeSeconds'])
        for i, v in enumerate(df['AverageTimeSeconds']):
            ax.text(i, v, str(v), ha='center', va='bottom')
        plt.xticks(rotation=45, ha='right')
        plt.ylabel('Average time (s)')
        plt.tight_layout()
    plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3: sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

**7. ChartUpdaterWorker.cs**

```csharp
// ----------------------------------------------------------------
// Slowest User Operations (Last 7 Days)
// ----------------------------------------------------------------
_log.LogInformation("=== Starting slowest-user-ops update at {Time} ===", DateTime.UtcNow);
var ops = await oracle.GetSlowestUserOperationsAsync(DateTime.UtcNow.AddDays(-7));
var opsUrl = await generator.GenerateSlowestUserOperationsChartAsync(ops);
metadata["slowest_user_operations"] = new { ImageUrl = opsUrl, LastUpdated = DateTime.UtcNow };
_log.LogInformation("Updated Chart and Meta data -> {Url}", opsUrl);
```

**8. Razor**

```razor
<GraphBox GraphID="slowest_user_operations"
          Title="Slowest user operations in last 7 days (group by type)" />
```

---

## 3️⃣ Tools Used (Last Month)

**1. Model**

```csharp
public class ToolUsage
{
    public string Tool       { get; set; }
    public int    TimesUsed  { get; set; }
}
```

**2. IOracleDataService**

```csharp
Task<IEnumerable<ToolUsage>> GetToolUsageAsync(DateTime since);
```

**3. OracleDataService**

```csharp
public async Task<IEnumerable<ToolUsage>> GetToolUsageAsync(DateTime since)
{
    var list = new List<ToolUsage>();
    await using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();
    const string sql = @"
SELECT r.feature AS Tool,
       COUNT(1)    AS TimesUsed
  FROM star_action_audit r
 WHERE r.mod_dt > :since
   AND r.feature_type = 'TOOLS'
 GROUP BY r.feature
 ORDER BY TimesUsed DESC";
    await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
    cmd.Parameters.Add("since", OracleDbType.Date).Value = since;
    await using var rdr = await cmd.ExecuteReaderAsync();
    while (await rdr.ReadAsync())
        list.Add(new ToolUsage {
            Tool      = rdr.GetString(rdr.GetOrdinal("Tool")),
            TimesUsed = rdr.GetInt32 (rdr.GetOrdinal("TimesUsed"))
        });
    return list;
}
```

**4. IChartGeneratorService**

```csharp
Task<string> GenerateToolUsageChartAsync(IEnumerable<ToolUsage> data);
```

**5. ChartGeneratorService**

```csharp
public async Task<string> GenerateToolUsageChartAsync(IEnumerable<ToolUsage> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir,   $"tool_usage_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"tool_usage_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Tool,TimesUsed\n" +
        string.Join("\n", data.Select(d =>
            $"{d.Tool},{d.TimesUsed}")));

    var script = Path.Combine(_scriptDir, "generate_tool_usage_chart.py");
    var psi = new ProcessStartInfo("python",
        $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    { RedirectStandardError = true, UseShellExecute = false };

    using var proc = Process.Start(psi)
                  ?? throw new InvalidOperationException("Could not start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrWhiteSpace(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}
```

**6. Python script** (`generate_tool_usage_chart.py`)

```python
import sys, pandas as pd, matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp)
    fig, ax = plt.subplots(figsize=(10,6))
    if df.empty:
        ax.text(0.5,0.5,'No data to display',ha='center',va='center',fontsize=14)
        ax.axis('off')
    else:
        ax.bar(df['Tool'], df['TimesUsed'])
        for i, v in enumerate(df['TimesUsed']):
            ax.text(i, v, str(v), ha='center', va='bottom')
        plt.xticks(rotation=45, ha='right')
        plt.ylabel('Times used')
        plt.tight_layout()
    plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3: sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

**7. ChartUpdaterWorker.cs**

```csharp
// ----------------------------------------------------------------
// Tools Used Last Month
// ----------------------------------------------------------------
_log.LogInformation("=== Starting tool-usage update at {Time} ===", DateTime.UtcNow);
var tools = await oracle.GetToolUsageAsync(DateTime.UtcNow.AddDays(-30));
var toolsUrl = await generator.GenerateToolUsageChartAsync(tools);
metadata["tools_usage_last_month"] = new { ImageUrl = toolsUrl, LastUpdated = DateTime.UtcNow };
_log.LogInformation("Updated Chart and Meta data -> {Url}", toolsUrl);
```

**8. Razor**

```razor
<GraphBox GraphID="tools_usage_last_month"
          Title="Tools used last month" />
```
