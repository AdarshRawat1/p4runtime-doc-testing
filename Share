// File: Services/IChartRefresher.cs
namespace StarTrends.Services
{
    public interface IChartRefresher
    {
        string ChartId { get; }
        Task<ChartMeta> RefreshAsync();
    }

    public record ChartMeta(string ImageUrl, DateTime LastUpdated);
}

// File: Services/ProductTradesChartRefresher.cs
using StarTrends.Models;

namespace StarTrends.Services
{
    public class ProductTradesChartRefresher : IChartRefresher
    {
        private readonly IOracleDataService _oracle;
        private readonly IChartGeneratorService _chartGen;

        public string ChartId => "product_trades";

        public ProductTradesChartRefresher(
            IOracleDataService oracle,
            IChartGeneratorService chartGen)
        {
            _oracle   = oracle;
            _chartGen = chartGen;
        }

        public async Task<ChartMeta> RefreshAsync()
        {
            var data = await _oracle.GetProductTradeCountsAsync(DateTime.UtcNow.AddDays(-7));
            var url  = await _chartGen.GenerateProductTradeChartAsync(data);
            return new ChartMeta(url, DateTime.UtcNow);
        }
    }
}

// File: Controllers/ChartsController.cs
using Microsoft.AspNetCore.Mvc;
using StarTrends.Services;

namespace StarTrends.Controllers
{
    [ApiController]
    [Route("api/charts")]
    public class ChartsController : ControllerBase
    {
        private readonly IEnumerable<IChartRefresher> _refreshers;

        public ChartsController(IEnumerable<IChartRefresher> refreshers)
        {
            _refreshers = refreshers;
        }

        [HttpGet("metadata")]
        public IActionResult GetMetadata()
        {
            var dict = _refreshers.ToDictionary(
                r => r.ChartId,
                r => r.RefreshAsync().Result);
            return Ok(dict);
        }

        [HttpPost("{chartId}/refresh")]
        public async Task<IActionResult> Refresh(string chartId)
        {
            var refresher = _refreshers.FirstOrDefault(r => r.ChartId == chartId);
            if (refresher == null)
                return NotFound();
            var meta = await refresher.RefreshAsync();
            return Ok(meta);
        }
    }
}

// File: Program.cs (additions)
using StarTrends.Services;

var builder = WebApplication.CreateBuilder(args);

// register refreshers
builder.Services.AddTransient<IChartRefresher, ProductTradesChartRefresher>();

builder.Services.AddControllers();

// ... other registrations (RazorPages, Blazor, HttpClient, services, hosted worker) ...

var app = builder.Build();

app.UseRouting();
app.UseEndpoints(endpoints =>
{
    endpoints.MapControllers();
    endpoints.MapRazorPages();
    endpoints.MapBlazorHub();
    endpoints.MapFallbackToPage("/_Host");
});

app.Run();
