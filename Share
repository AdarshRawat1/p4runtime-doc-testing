
@page "/feature-usage-graph"
@inject IJSRuntime JSRuntime

<h3>Feature Usage</h3>

<button class="btn btn-outline-primary me-2" @onclick="LoadData">Load Data</button>
<button class="btn btn-success" @onclick="RenderChart" disabled="@(!dataLoaded)">Render Chart</button>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger mt-3">@ErrorMessage</div>
}
else if (!string.IsNullOrEmpty(HtmlContent))
{
    <div class="mt-3">@((MarkupString)HtmlContent)</div>
    <div class="mt-4" id="featureUsageChart" style="width:100%;height:500px;"></div>
}
else if (isLoading)
{
    <p class="text-info mt-3">Loading data...</p>
}
else
{
    <p class="text-muted mt-3">Click 'Load Data' to begin.</p>
}

@code {
    private string HtmlContent = string.Empty;
    private string ErrorMessage = string.Empty;
    private List<string> labels = new();
    private List<int> values = new();
    private bool dataLoaded = false;
    private bool isLoading = false;

    private async Task LoadData()
    {
        isLoading = true;
        ErrorMessage = "";
        HtmlContent = "";
        labels.Clear();
        values.Clear();
        dataLoaded = false;

        try
        {
            using var conn = new Oracle.ManagedDataAccess.Client.OracleConnection(
                "Data Source=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=eurvlid07179.xmp.net.intra)(PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=408uk101)));User Id=star;Password=bsc123;"
            );
            await conn.OpenAsync();

            using var cmd = new Oracle.ManagedDataAccess.Client.OracleCommand(@"
                SELECT feature, COUNT(*) AS usage_count
                FROM star_action_audit
                WHERE mod_dt > TRUNC(SYSDATE) - 30
                  AND feature_type = 'SEARCH'
                GROUP BY feature
                ORDER BY usage_count DESC
            ", conn);

            using var reader = await cmd.ExecuteReaderAsync();
            HtmlContent = "<ul class='list-group'>";
            while (await reader.ReadAsync())
            {
                var feature = reader["feature"].ToString();
                var count = Convert.ToInt32(reader["usage_count"]);
                labels.Add(feature!);
                values.Add(count);
                HtmlContent += $"<li class='list-group-item d-flex justify-content-between'><span>{feature}</span><span class='badge bg-primary'>{count}</span></li>";
            }
            HtmlContent += "</ul>";
            dataLoaded = true;
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RenderChart()
    {
        if (!dataLoaded) return;

        var chartData = new
        {
            labels,
            values,
            title = "Feature Usage in Last 30 Days",
            xLabel = "Feature",
            yLabel = "Usage Count"
        };

        await JSRuntime.InvokeVoidAsync("renderPlotlyBarChart", "featureUsageChart", chartData);
    }
}


Here’s your final updated page:

Two buttons: “Load Data” and “Render Chart”

Shows "Loading data..." only during fetch

Renders HTML list and Plotly bar chart after successful


