// File: Models/RegReportCount.cs
namespace StarTrends.Models
{
    public class RegReportCount
    {
        public string Location { get; set; }
        public int Count { get; set; }
        public DateTime Hour { get; set; }
    }
}

// File: Services/IOracleDataService.cs (add method)
using StarTrends.Models;

public interface IOracleDataService
{
    // ...existing methods...
    Task<IEnumerable<RegReportCount>> GetRegReportCountsAsync(DateTime fromDate, DateTime toDate);
}

// File: Services/OracleDataService.cs (implement method)
using Oracle.ManagedDataAccess.Client;
using StarTrends.Models;

public async Task<IEnumerable<RegReportCount>> GetRegReportCountsAsync(DateTime fromDate, DateTime toDate)
{
    var list = new List<RegReportCount>();
    const string sql = @"
SELECT
  put_loc                              AS Location,
  COUNT(con_no)                       AS Count,
  TRUNC(lst_mod_dt, 'HH24')           AS Hour
FROM star_reg_report_workflow_hist
WHERE lst_mod_dt >= :fromDate
  AND lst_mod_dt <  :toDate
GROUP BY put_loc, TRUNC(lst_mod_dt, 'HH24')
ORDER BY put_loc, TRUNC(lst_mod_dt, 'HH24')";

    await using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();
    await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
    cmd.Parameters.Add(new OracleParameter("fromDate", fromDate));
    cmd.Parameters.Add(new OracleParameter("toDate",   toDate));

    await using var reader = await cmd.ExecuteReaderAsync();
    while (await reader.ReadAsync())
    {
        list.Add(new RegReportCount
        {
            Location = reader.GetString(0),
            Count    = reader.GetInt32(1),
            Hour     = reader.GetDateTime(2)
        });
    }
    return list;
}

// File: Services/IChartGeneratorService.cs (add method)
using StarTrends.Models;

public interface IChartGeneratorService
{
    // ...existing methods...
    Task<string> GenerateRegReportChartAsync(IEnumerable<RegReportCount> data);
}

// File: Services/ChartGeneratorService.cs (implement method)
using System.Diagnostics;
using StarTrends.Models;

public async Task<string> GenerateRegReportChartAsync(IEnumerable<RegReportCount> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir,   $"reg_report_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"reg_report_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Location,Count,Hour\n" +
        string.Join("\n", data.Select(d => $"{d.Location},{d.Count},{d.Hour:yyyy-MM-dd HH:mm:ss}"))
    );

    var script = Path.Combine(_scriptDir, "generate_reg_report_chart.py");
    var psi = new ProcessStartInfo("python", $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };
    using var proc = Process.Start(psi) ?? throw new InvalidOperationException("Cannot start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrWhiteSpace(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}

// File: PythonScripts/generate_reg_report_chart.py
import sys
import pandas as pd
import matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Hour'])
    pivot = df.pivot(index='Hour', columns='Location', values='Count').fillna(0)
    pivot.plot(kind='bar', figsize=(10,6))
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Usage: python generate_reg_report_chart.py <in.csv> <out.png>", file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])

// File: ChartUpdaterWorker.cs (inside ExecuteAsync)
var rrData = await oracle.GetRegReportCountsAsync(
    DateTime.UtcNow.AddHours(-48),
    DateTime.UtcNow
);
var rrUrl  = await chartGen.GenerateRegReportChartAsync(rrData);
metadata["reg_report"] = new { ImageUrl = rrUrl, LastUpdated = DateTime.UtcNow };
CleanupOldFiles(_chartDir, "reg_report_*.png", MaxKeep);
CleanupOldFiles(_csvDir,   "reg_report_*.csv", MaxKeep);

// Usage in UI
<GraphViewer GraphId="reg_report" Title="Reg Report Deals per Hour by Location (Last 48h)" />




































// File: Models/StpWorkflowCount.cs
namespace StarTrends.Models
{
    public class StpWorkflowCount
    {
        public DateTime Week { get; set; }
        public int StpDeals { get; set; }
    }
}

// File: Services/IOracleDataService.cs (add method)
using StarTrends.Models;

public interface IOracleDataService
{
    // ...existing methods...
    Task<IEnumerable<StpWorkflowCount>> GetStpWorkflowTradesByWeekAsync(DateTime fromDate, DateTime toDate);
}

// File: Services/OracleDataService.cs (implement method)
using Oracle.ManagedDataAccess.Client;
using StarTrends.Models;

public async Task<IEnumerable<StpWorkflowCount>> GetStpWorkflowTradesByWeekAsync(DateTime fromDate, DateTime toDate)
{
    var list = new List<StpWorkflowCount>();
    const string sql = @"
WITH otc_workflow_hist AS (
  SELECT *
  FROM star_workflow_hist
  WHERE con_no IN (SELECT con_no FROM star_contract PARTITION(product_oth))
), manu AS (
  SELECT con_no FROM otc_workflow_hist WHERE ops_sts_cod = 'NOT'
), stp AS (
  SELECT DISTINCT con_no
  FROM otc_workflow_hist
  MINUS
  SELECT con_no FROM manu
), first_ops AS (
  SELECT h.con_no, MIN(h.lst_mod_dt) AS lst_mod_dt
  FROM otc_workflow_hist h
  WHERE h.con_no IN (SELECT con_no FROM stp)
  GROUP BY h.con_no
)
SELECT
  TRUNC(f.lst_mod_dt, 'IW') AS week,
  COUNT(*)             AS stp_deals
FROM first_ops f
WHERE f.lst_mod_dt >= :fromDate
  AND f.lst_mod_dt <  :toDate
GROUP BY TRUNC(f.lst_mod_dt, 'IW')
ORDER BY week ASC";

    await using var conn = new OracleConnection(_connectionString);
    await conn.OpenAsync();
    await using var cmd = new OracleCommand(sql, conn) { BindByName = true };
    cmd.Parameters.Add(new OracleParameter("fromDate", fromDate));
    cmd.Parameters.Add(new OracleParameter("toDate",   toDate));

    await using var reader = await cmd.ExecuteReaderAsync();
    while (await reader.ReadAsync())
    {
        list.Add(new StpWorkflowCount
        {
            Week     = reader.GetDateTime(0),
            StpDeals = reader.GetInt32(1)
        });
    }
    return list;
}

// File: Services/IChartGeneratorService.cs (add method)
using StarTrends.Models;

public interface IChartGeneratorService
{
    // ...existing methods...
    Task<string> GenerateStpWorkflowChartAsync(IEnumerable<StpWorkflowCount> data);
}

// File: Services/ChartGeneratorService.cs (implement method)
using System.Diagnostics;
using StarTrends.Models;

public async Task<string> GenerateStpWorkflowChartAsync(IEnumerable<StpWorkflowCount> data)
{
    var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
    var csvPath = Path.Combine(_csvDir,   $"stp_workflow_{ts}.csv");
    var pngPath = Path.Combine(_chartDir, $"stp_workflow_{ts}.png");

    await File.WriteAllTextAsync(csvPath,
        "Week,StpDeals\n" +
        string.Join("\n", data.Select(d => $"{d.Week:yyyy-MM-dd},{d.StpDeals}"))
    );

    var script = Path.Combine(_scriptDir, "generate_stp_workflow_chart.py");
    var psi = new ProcessStartInfo("python", $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
    {
        RedirectStandardError = true,
        UseShellExecute       = false
    };
    using var proc = Process.Start(psi) ?? throw new InvalidOperationException("Cannot start Python");
    var err = await proc.StandardError.ReadToEndAsync();
    await proc.WaitForExitAsync();
    if (!string.IsNullOrWhiteSpace(err)) _log.LogError(err);

    return $"/charts/{Path.GetFileName(pngPath)}";
}

// File: PythonScripts/generate_stp_workflow_chart.py
import sys
import pandas as pd
import matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Week'])
    df.sort_values('Week', inplace=True)
    plt.figure(figsize=(10,6))
    plt.plot(df['Week'], df['StpDeals'], marker='o')
    plt.xlabel('Week')
    plt.ylabel('STP Deals')
    plt.title('OTC STP Workflow Trades per Week (Last 4 Years)')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Usage: python generate_stp_workflow_chart.py <in.csv> <out.png>", file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])

// File: ChartUpdaterWorker.cs (inside ExecuteAsync)
var stpData = await oracle.GetStpWorkflowTradesByWeekAsync(
    DateTime.UtcNow.AddYears(-4),
    DateTime.UtcNow
);
var stpUrl  = await chartGen.GenerateStpWorkflowChartAsync(stpData);
metadata["stp_workflow"] = new { ImageUrl = stpUrl, LastUpdated = DateTime.UtcNow };
CleanupOldFiles(_chartDir, "stp_workflow_*.png", MaxKeep);
CleanupOldFiles(_csvDir,   "stp_workflow_*.csv", MaxKeep);

// Usage in UI
<GraphViewer GraphId="stp_workflow" Title="OTC STP Workflow Trades per Week (Last 4y)" />

