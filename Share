// File: Shared/GraphViewer.razor
@using System.Net.Http.Json
@inject HttpClient Http
@namespace StarTrends.Shared

<div class="card mb-4">
  <div class="card-header">
    <h5>@Title</h5>
  </div>
  <div class="card-body">
    @if (isLoading)
    {
      <p>Loading chart…</p>
    }
    else if (!string.IsNullOrEmpty(error))
    {
      <div class="alert alert-danger">@error</div>
    }
    else
    {
      <img src="@imageUrl" class="img-fluid" alt="@Title" />
      <p class="mt-2 text-muted small">
        Last updated: @meta.LastUpdated.ToLocalTime().ToString("f")
      </p>
      <button class="btn btn-outline-primary" @onclick="Refresh" disabled="isLoading">
        @(isLoading ? "Refreshing…" : "Refresh")
      </button>
    }
  </div>
</div>

@code {
  [Parameter] public string GraphId { get; set; }
  [Parameter] public string Title { get; set; }

  private bool isLoading;
  private string imageUrl;
  private string error;
  private ChartMeta meta;

  protected override async Task OnInitializedAsync()
  {
    // initial image (static latest)
    imageUrl = $"/charts/{GraphId}_latest.png";
    await LoadMetadata();
  }

  private async Task LoadMetadata()
  {
    isLoading = true;
    try
    {
      var dict = await Http.GetFromJsonAsync<Dictionary<string, ChartMeta>>("charts/metadata.json");
      if (dict != null && dict.TryGetValue(GraphId, out var m))
      {
        meta = m;
        imageUrl = meta.ImageUrl;
      }
      else
      {
        error = $"No metadata found for '{GraphId}'";
      }
    }
    catch (Exception ex)
    {
      error = ex.Message;
    }
    finally
    {
      isLoading = false;
    }
  }

  private async Task Refresh()
  {
    isLoading = true;
    try
    {
      var resp = await Http.PostAsync($"/api/charts/{GraphId}/refresh", null);
      resp.EnsureSuccessStatusCode();
      meta = await resp.Content.ReadFromJsonAsync<ChartMeta>();
      imageUrl = meta.ImageUrl;
      error = null;
    }
    catch (Exception ex)
    {
      error = ex.Message;
    }
    finally
    {
      isLoading = false;
    }
  }

  public class ChartMeta
  {
    public string ImageUrl { get; set; }
    public DateTime LastUpdated { get; set; }
  }
}

// ----------------------------------------
// Usage in Pages/Index.razor (or any page)
// ----------------------------------------
@page "/"
@using StarTrends.Shared

<h3>Dashboard</h3>

<GraphViewer GraphId="productTrade" Title="Product Trades (Last 7 Days)" />
<GraphViewer GraphId="anotherGraph" Title="Another Chart Title" />
