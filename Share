@page "/chart"
@inject HttpClient Http

<h3>Product Trades in Last 7 Days</h3>

@if (metadata == null)
{
    <p>Loading chart…</p>
}
else
{
    <img src="@metadata.ImageUrl" alt="Product Trades Chart"
         style="max-width:100%; height:auto;" />
    <p>
      <small>Last updated:
        @metadata.LastUpdated.ToLocalTime().ToString("f")
      </small>
    </p>
    <button class="btn btn-outline-primary" @onclick="Refresh">
      @(isRefreshing ? "Refreshing…" : "Refresh")
    </button>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
}

@code {
    private ChartMeta metadata;
    private bool isRefreshing;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadMetadata();
    }

    private async Task LoadMetadata()
    {
        try
        {
            metadata = await Http.GetFromJsonAsync<ChartMeta>("charts/metadata.json");
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = "Could not load chart: " + ex.Message;
        }
    }

    private async Task Refresh()
    {
        isRefreshing = true;
        try
        {
            var resp = await Http.PostAsync("/api/charts/productTrade/refresh", null);
            resp.EnsureSuccessStatusCode();
            metadata = await resp.Content.ReadFromJsonAsync<ChartMeta>();
        }
        catch (Exception ex)
        {
            errorMessage = "Refresh failed: " + ex.Message;
        }
        finally
        {
            isRefreshing = false;
        }
    }

    public class ChartMeta
    {
        public string ImageUrl { get; set; }
        public DateTime LastUpdated { get; set; }
    }
}
