Great! Here's your **final updated Razor file** for the OTC Product Trades chart using Plotly.js, with:

âœ… Modular design  
âœ… UI-enhanced loader (wave + message)  
âœ… Error handling  
âœ… Click-based rendering with `IsLoading` control  
âœ… No Bootstrap/3rd-party dependency  

---

### âœ… `Shared/Charts/ProductTradeChart.razor`

```razor
@inject IOracleDataService DataService
@inject IJSRuntime JSRuntime
@using Star.Models
@using Star.Shared.Components

<h5 class="fw-semibold">ðŸ“ˆ OTC Product Types Booked (Last 7 Days)</h5>

<div class="mb-3">
    <button class="btn btn-sm btn-primary me-2" @onclick="() => GenerateGraph(false)">Show Normal</button>
    <button class="btn btn-sm btn-secondary" @onclick="() => GenerateGraph(true)">Show Zoomed</button>
</div>

@if (IsLoading)
{
    <div class="graph-loader">
        <LoaderMarkup />
        <p class="loading-message">Loading data and rendering graph...</p>
    </div>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert-box">@ErrorMessage</div>
}
else
{
    <div id="productTradeChart" class="graph-container"></div>
}

@code {
    private bool IsLoading = false;
    private string? ErrorMessage;

    private async Task GenerateGraph(bool logScale)
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;

            var data = await DataService.GetOtcProductTradesAsync();
            var labels = data.Select(d => d.ProductName).ToList();
            var values = data.Select(d => (double)d.TotalTrades).ToList();

            var chartData = new
            {
                labels,
                values,
                title = "OTC Product Types Booked in Last 7 Days",
                xLabel = "Product Type",
                yLabel = "Contracts"
            };

            await JSRuntime.InvokeVoidAsync("renderPlotlyBarChart", "productTradeChart", chartData, logScale);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }
}
```

---

### âœ… `LoaderMarkup.razor` (in `Shared/Components/`)

```razor
<div class="wave-loader">
    <div class="bar"></div>
    <div class="bar"></div>
    <div class="bar"></div>
    <div class="bar"></div>
    <div class="bar"></div>
</div>

<style>
    .wave-loader {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 60px;
        gap: 6px;
    }

    .wave-loader .bar {
        width: 6px;
        height: 40px;
        background-color: #3498db;
        animation: wave 1.2s infinite ease-in-out;
    }

    .wave-loader .bar:nth-child(2) { animation-delay: 0.1s; }
    .wave-loader .bar:nth-child(3) { animation-delay: 0.2s; }
    .wave-loader .bar:nth-child(4) { animation-delay: 0.3s; }
    .wave-loader .bar:nth-child(5) { animation-delay: 0.4s; }

    @keyframes wave {
        0%, 100% { transform: scaleY(1); }
        50% { transform: scaleY(2); }
    }

    .loading-message {
        margin-top: 12px;
        font-size: 1rem;
        color: #333;
        font-weight: 500;
    }

    .alert-box {
        padding: 0.75rem 1rem;
        border-radius: 6px;
        background-color: #f8d7da;
        color: #842029;
        border: 1px solid #f5c2c7;
        margin-bottom: 1rem;
    }

    .graph-container {
        width: 100%;
        height: 400px;
        transition: opacity 0.3s ease-in-out;
    }
</style>
```

---

### âœ… To Use in Main Page (`Counter.razor` or elsewhere)

```razor
<ProductTradeChart />
```

âœ” That's it. This will now:
- Show loading animation with message
- Render the Plotly chart on button click
- Handle errors cleanly
- Stay modular and clean

Let me know if you want to do this for the Feature Usage graph as well!
