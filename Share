public interface IChartGeneratorService
{
    // … existing signatures …
    Task<string> GenerateOtcIntradayRecBreaksPerWeekChartAsync(
        IEnumerable<OtcIntradayRecBreaksPerWeekCount> data);

    Task<string> GenerateOtcTradesSavedPerMinuteChartAsync(
        IEnumerable<OtcTradesSavedPerMinuteCount> data);
}

public class ChartGeneratorService : IChartGeneratorService
{
    private readonly string _csvDir;
    private readonly string _chartDir;
    private readonly string _scriptDir;
    private readonly ILogger<ChartGeneratorService> _log;

    public ChartGeneratorService(
        IConfiguration config,
        ILogger<ChartGeneratorService> log)
    {
        _csvDir    = config["Paths:CsvDir"];
        _chartDir  = config["Paths:ChartDir"];
        _scriptDir = config["Paths:PythonScripts"];
        _log       = log;
    }

    public async Task<string> GenerateOtcIntradayRecBreaksPerWeekChartAsync(
        IEnumerable<OtcIntradayRecBreaksPerWeekCount> data)
    {
        var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
        var csvPath = Path.Combine(_csvDir, $"otc_intraday_rec_breaks_per_week_{ts}.csv");
        var pngPath = Path.Combine(_chartDir, $"otc_intraday_rec_breaks_per_week_{ts}.png");

        // 1) write the CSV
        await File.WriteAllTextAsync(csvPath,
            "Week,RecBreaks\n" +
            string.Join("\n", data.Select(d =>
                $"{d.Week:yyyy-MM-dd},{d.RecBreaks}"))
        );

        // 2) call the Python script
        var script = Path.Combine(_scriptDir,
            "generate_otc_intraday_rec_breaks_per_week_chart.py");
        var psi = new ProcessStartInfo("python",
                $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
        {
            RedirectStandardError = true,
            UseShellExecute        = false,
            RedirectStandardInput  = false
        };

        using var proc = Process.Start(psi)
                         ?? throw new InvalidOperationException("Cannot start Python");
        var err = await proc.StandardError.ReadToEndAsync();
        await proc.WaitForExitAsync();
        if (!string.IsNullOrEmpty(err))
            _log.LogError(err);

        return $"/charts/{Path.GetFileName(pngPath)}";
    }

    public async Task<string> GenerateOtcTradesSavedPerMinuteChartAsync(
        IEnumerable<OtcTradesSavedPerMinuteCount> data)
    {
        var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
        var csvPath = Path.Combine(_csvDir, $"otc_trades_saved_per_minute_{ts}.csv");
        var pngPath = Path.Combine(_chartDir, $"otc_trades_saved_per_minute_{ts}.png");

        await File.WriteAllTextAsync(csvPath,
            "Minute,TradesSaved\n" +
            string.Join("\n", data.Select(d =>
                $"{d.Minute:yyyy-MM-dd HH:mm},{d.TradesSaved}"))
        );

        var script = Path.Combine(_scriptDir,
            "generate_otc_trades_saved_per_minute_chart.py");
        var psi = new ProcessStartInfo("python",
                $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
        {
            RedirectStandardError = true,
            UseShellExecute        = false,
            RedirectStandardInput  = false
        };

        using var proc = Process.Start(psi)
                         ?? throw new InvalidOperationException("Cannot start Python");
        var err = await proc.StandardError.ReadToEndAsync();
        await proc.WaitForExitAsync();
        if (!string.IsNullOrEmpty(err))
            _log.LogError(err);

        return $"/charts/{Path.GetFileName(pngPath)}";
    }

    // … the rest of your generator methods …
}
