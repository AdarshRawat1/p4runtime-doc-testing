// ChartDashboard/Program.cs
using ChartDashboard.Data;
using ChartDashboard.Services;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

var builder = WebApplication.CreateBuilder(args);

// 1. Register core services
builder.Services.AddControllers();
builder.Services.AddMemoryCache();

// 2. Register Oracle + Chart services
builder.Services.AddScoped<IGraphDataRepo, OracleDataRepo>();
builder.Services.AddScoped<IGraphService, GraphService>();
builder.Services.AddHostedService<ChartWarmupService>();

// 3. Add Blazor Server
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();

var app = builder.Build();

// 4. Configure middleware
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseRouting();

// 5. Configure endpoints
app.MapControllers();
app.MapBlazorHub();
app.MapFallbackToPage("/_Host");

app.Run();

// ============================
// ChartDashboard/Models/OtcData.cs
namespace ChartDashboard.Models
{
    public class OtcData
    {
        public string Product { get; set; } = default!;
        public int TotalTrades { get; set; }
    }
}

// ============================
// ChartDashboard/Data/IGraphDataRepo.cs
using ChartDashboard.Models;
namespace ChartDashboard.Data
{
    public interface IGraphDataRepo
    {
        Task<List<OtcData>> FetchOtcDataAsync(int days);
    }
}

// ============================
// ChartDashboard/Data/OracleDataRepo.cs
using System.Data;
using ChartDashboard.Models;
using Oracle.ManagedDataAccess.Client;
using Microsoft.Extensions.Configuration;

namespace ChartDashboard.Data
{
    public class OracleDataRepo : IGraphDataRepo
    {
        private readonly string _connStr;
        public OracleDataRepo(IConfiguration config)
        {
            _connStr = config.GetConnectionString("OracleDb") ?? throw new InvalidOperationException("Missing OracleDb connection string");
        }

        public async Task<List<OtcData>> FetchOtcDataAsync(int days)
        {
            var result = new List<OtcData>();
            const string sql = @"SELECT 'IR Swap (Fx/Fl)' AS Product, 120 AS TotalTrades FROM DUAL"; // Replace with real query

            await using var conn = new OracleConnection(_connStr);
            await conn.OpenAsync();
            await using var cmd = new OracleCommand(sql, conn);
            await using var reader = await cmd.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                result.Add(new OtcData
                {
                    Product = reader.GetString(0),
                    TotalTrades = reader.GetInt32(1)
                });
            }
            return result;
        }
    }
}

// ============================
// ChartDashboard/Services/IGraphService.cs
namespace ChartDashboard.Services
{
    public interface IGraphService
    {
        Task<byte[]> GenerateOtcProductTypesChartAsync();
    }
}

// ============================
// ChartDashboard/Services/GraphService.cs
using System.Diagnostics;
using System.Text.Json;
using ChartDashboard.Data;

namespace ChartDashboard.Services
{
    public class GraphService : IGraphService
    {
        private readonly IGraphDataRepo _repo;
        public GraphService(IGraphDataRepo repo) => _repo = repo;

        public async Task<byte[]> GenerateOtcProductTypesChartAsync()
        {
            var data = await _repo.FetchOtcDataAsync(7);
            var json = JsonSerializer.Serialize(data);

            var psi = new ProcessStartInfo("python", "PythonTools/render.py")
            {
                RedirectStandardInput = true,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true,
                WorkingDirectory = AppContext.BaseDirectory
            };

            using var proc = Process.Start(psi)!;
            await proc.StandardInput.WriteAsync(json);
            proc.StandardInput.Close();

            using var ms = new MemoryStream();
            await proc.StandardOutput.BaseStream.CopyToAsync(ms);

            await proc.WaitForExitAsync();
            return ms.ToArray();
        }
    }
}

// ============================
// ChartDashboard/Services/ChartWarmupService.cs
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace ChartDashboard.Services
{
    public class ChartWarmupService : IHostedService
    {
        private readonly IGraphService _svc;
        private readonly ILogger<ChartWarmupService> _log;

        public ChartWarmupService(IGraphService svc, ILogger<ChartWarmupService> log)
        {
            _svc = svc;
            _log = log;
        }

        public async Task StartAsync(CancellationToken cancellationToken)
        {
            try
            {
                var png = await _svc.GenerateOtcProductTypesChartAsync();
                _log.LogInformation("Warmup chart generated: {Length} bytes", png.Length);
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "Warmup chart generation failed.");
            }
        }

        public Task StopAsync(CancellationToken cancellationToken) => Task.CompletedTask;
    }
}
