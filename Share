Great — now let’s set up your Plotly.js graph from scratch using manual JS interop in your Blazor Server (.NET 6) app. You don’t need any Blazor component libraries — we’ll do everything cleanly step-by-step.


---

✅ Final Working Setup: Plotly + Blazor via JS Interop

1. Add plotly.min.js to wwwroot

If your plotly.min.js is in dist/ from npm:

Copy it to:

wwwroot/js/plotly/plotly.min.js



---

2. Create JS interop file

In wwwroot/js/plotlyInterop.js, add:

window.renderPlotlyBarChart = (elementId, chartData) => {
    const trace = {
        x: chartData.labels,
        y: chartData.values,
        type: 'bar',
        marker: {
            color: 'rgba(54, 162, 235, 0.6)',
            line: {
                color: 'rgba(54, 162, 235, 1.0)',
                width: 1
            }
        }
    };

    const layout = {
        title: chartData.title,
        xaxis: { title: chartData.xLabel },
        yaxis: { title: chartData.yLabel }
    };

    Plotly.newPlot(elementId, [trace], layout);
};


---

3. Reference both JS files in _Layout.cshtml

In Pages/_Layout.cshtml, add before </body>:

<script src="js/plotly/plotly.min.js"></script>
<script src="js/plotlyInterop.js"></script>


---

4. Add a chart <div> and render it with JS interop

In any .razor page (like Pages/FetchData.razor):

@inject IJSRuntime JS
@inject IOracleDataService DataService

<h3>OTC Product Trades</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(error))
{
    <p class="text-danger">@error</p>
}
else
{
    <div id="otcChart" style="height: 400px; width: 100%;"></div>
}

@code {
    private bool isLoading = true;
    private string? error;
    private List<string> labels = new();
    private List<int> values = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var data = await DataService.GetOtcProductTradeAsync();

            labels = data.Select(x => x.ProductName).ToList();
            values = data.Select(x => x.TotalTrades).ToList();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && string.IsNullOrEmpty(error))
        {
            var chartData = new
            {
                labels = labels,
                values = values,
                title = "OTC Product Types (Last 7 Days)",
                xLabel = "Product",
                yLabel = "Contracts"
            };

            await JS.InvokeVoidAsync("renderPlotlyBarChart", "otcChart", chartData);
        }
    }
}


---

✅ Done!

You now have a working dynamic Plotly bar chart rendering your Oracle data with:

No NuGet dependencies

Full manual JS control

Clean Blazor Server .NET 6 structure



---

If you want I can:

Help you convert this into a reusable component (like <PlotlyBarChart />)

Help with other chart types (line, pie, scatter, 3D)

Fix layout, responsiveness, or interactivity


Just drop the next graph or need and I’ll wire it up.

