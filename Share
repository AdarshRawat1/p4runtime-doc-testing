 <div class="col-md-6">
    <ChartBox GraphId="otc_top5_rec_breaks_3d"
              Title="OTC Top 5 Rec Breaks by Product & Reason (3D)" />
  </div>
  <div class="col-md-6">
    <ChartBox GraphId="mtm_contracts_booked"
              Title="MTM Contracts Booked per Week" />
  </div>
  <div class="col-md-6">
    <ChartBox GraphId="otc_contracts_booked_vs_avg"
              Title="OTC Contracts Booked per Week vs. 4-Week Avg" />


Below are the **full, drop‐in** implementations for the first **four** charts in your list.  We’ll handle the remaining ones in the next chat.

---

## 1. Models

Create one C# model class per graph under `StarTrends/Models/`:

```csharp
// Models/DeletionsOnMurexCount.cs
namespace StarTrends.Models
{
    public class DeletionsOnMurexCount
    {
        public DateTime Week   { get; set; }
        public int      Deals  { get; set; }
    }
}

// Models/OtcTop5RecBreaksCount.cs
namespace StarTrends.Models
{
    public class OtcTop5RecBreaksCount
    {
        public string  Product     { get; set; }
        public int     RecBreaks   { get; set; }
        public string  BreakReason { get; set; }
    }
}

// Models/MtmContractsBookedCount.cs
namespace StarTrends.Models
{
    public class MtmContractsBookedCount
    {
        public DateTime Week              { get; set; }
        public int      ContractsBooked   { get; set; }
    }
}

// Models/OtcContractsBookedVsAvgCount.cs
namespace StarTrends.Models
{
    public class OtcContractsBookedVsAvgCount
    {
        public DateTime Week        { get; set; }
        public int      DealsBooked { get; set; }
        public double   AvgDeals    { get; set; }
    }
}
```

---

## 2. Service interface

Add these four methods to your `IChartGeneratorService` in `StarTrends/Services/IChartGeneratorService.cs`:

```csharp
using StarTrends.Models;

namespace StarTrends.Services
{
    public interface IChartGeneratorService
    {
        // … existing methods …

        Task<string> GenerateDeletionsOnMurexChartAsync(
            IEnumerable<DeletionsOnMurexCount> data);

        Task<string> GenerateOtcTop5RecBreaks3dChartAsync(
            IEnumerable<OtcTop5RecBreaksCount> data);

        Task<string> GenerateMtmContractsBookedPerWeekChartAsync(
            IEnumerable<MtmContractsBookedCount> data);

        Task<string> GenerateOtcContractsBookedVsAvgChartAsync(
            IEnumerable<OtcContractsBookedVsAvgCount> data);
    }
}
```

---

## 3. Service implementation

In `StarTrends/Services/ChartGeneratorService.cs`, implement the four new methods alongside your existing generators:

```csharp
using System.Diagnostics;
using System.Text.Json;
using StarTrends.Models;

namespace StarTrends.Services
{
    public class ChartGeneratorService : IChartGeneratorService
    {
        private readonly string _csvDir;
        private readonly string _chartDir;
        private readonly string _scriptDir;
        private readonly ILogger<ChartGeneratorService> _log;

        public ChartGeneratorService(
            IConfiguration config,
            ILogger<ChartGeneratorService> log)
        {
            _csvDir    = config["Paths:CsvDir"];
            _chartDir  = config["Paths:ChartDir"];
            _scriptDir = config["Paths:PythonScripts"];
            _log       = log;
        }

        public async Task<string> GenerateDeletionsOnMurexChartAsync(
            IEnumerable<DeletionsOnMurexCount> data)
        {
            var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
            var csvPath = Path.Combine(_csvDir, $"deletions_murex_{ts}.csv");
            var pngPath = Path.Combine(_chartDir, $"deletions_murex_{ts}.png");

            // 1) write CSV
            await File.WriteAllTextAsync(csvPath,
                "Week,Deals\n" +
                string.Join("\n", data.Select(d =>
                    $"{d.Week:yyyy-MM-dd},{d.Deals}"))
            );

            // 2) invoke Python
            var script = Path.Combine(_scriptDir, "generate_deletions_on_murex_chart.py");
            var psi = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
            {
                RedirectStandardError = true,
                UseShellExecute       = false,
                RedirectStandardInput = false
            };

            using var proc = Process.Start(psi)
                             ?? throw new InvalidOperationException("Cannot start Python");
            var err = await proc.StandardError.ReadToEndAsync();
            await proc.WaitForExitAsync();
            if (!string.IsNullOrEmpty(err))
                _log.LogError(err);

            return $"/charts/{Path.GetFileName(pngPath)}";
        }

        public async Task<string> GenerateOtcTop5RecBreaks3dChartAsync(
            IEnumerable<OtcTop5RecBreaksCount> data)
        {
            var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
            var csvPath = Path.Combine(_csvDir, $"otc_top5_rec_breaks_3d_{ts}.csv");
            var pngPath = Path.Combine(_chartDir, $"otc_top5_rec_breaks_3d_{ts}.png");

            await File.WriteAllTextAsync(csvPath,
                "Product,RecBreaks,BreakReason\n" +
                string.Join("\n", data.Select(d =>
                    $"{d.Product},{d.RecBreaks},{d.BreakReason}"))
            );

            var script = Path.Combine(_scriptDir, "generate_otc_top5_rec_breaks_3d_chart.py");
            var psi = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
            {
                RedirectStandardError = true,
                UseShellExecute       = false,
                RedirectStandardInput = false
            };

            using var proc = Process.Start(psi)
                             ?? throw new InvalidOperationException("Cannot start Python");
            var err = await proc.StandardError.ReadToEndAsync();
            await proc.WaitForExitAsync();
            if (!string.IsNullOrEmpty(err))
                _log.LogError(err);

            return $"/charts/{Path.GetFileName(pngPath)}";
        }

        public async Task<string> GenerateMtmContractsBookedPerWeekChartAsync(
            IEnumerable<MtmContractsBookedCount> data)
        {
            var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
            var csvPath = Path.Combine(_csvDir, $"mtm_contracts_booked_{ts}.csv");
            var pngPath = Path.Combine(_chartDir, $"mtm_contracts_booked_{ts}.png");

            await File.WriteAllTextAsync(csvPath,
                "Week,ContractsBooked\n" +
                string.Join("\n", data.Select(d =>
                    $"{d.Week:yyyy-MM-dd},{d.ContractsBooked}"))
            );

            var script = Path.Combine(_scriptDir, "generate_mtm_contracts_booked_chart.py");
            var psi = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
            {
                RedirectStandardError = true,
                UseShellExecute       = false,
                RedirectStandardInput = false
            };

            using var proc = Process.Start(psi)
                             ?? throw new InvalidOperationException("Cannot start Python");
            var err = await proc.StandardError.ReadToEndAsync();
            await proc.WaitForExitAsync();
            if (!string.IsNullOrEmpty(err))
                _log.LogError(err);

            return $"/charts/{Path.GetFileName(pngPath)}";
        }

        public async Task<string> GenerateOtcContractsBookedVsAvgChartAsync(
            IEnumerable<OtcContractsBookedVsAvgCount> data)
        {
            var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
            var csvPath = Path.Combine(_csvDir, $"otc_contracts_booked_vs_avg_{ts}.csv");
            var pngPath = Path.Combine(_chartDir, $"otc_contracts_booked_vs_avg_{ts}.png");

            await File.WriteAllTextAsync(csvPath,
                "Week,DealsBooked,AvgDeals\n" +
                string.Join("\n", data.Select(d =>
                    $"{d.Week:yyyy-MM-dd},{d.DealsBooked},{d.AvgDeals:F1}"))
            );

            var script = Path.Combine(_scriptDir, "generate_otc_contracts_booked_vs_avg_chart.py");
            var psi = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
            {
                RedirectStandardError = true,
                UseShellExecute       = false,
                RedirectStandardInput = false
            };

            using var proc = Process.Start(psi)
                             ?? throw new InvalidOperationException("Cannot start Python");
            var err = await proc.StandardError.ReadToEndAsync();
            await proc.WaitForExitAsync();
            if (!string.IsNullOrEmpty(err))
                _log.LogError(err);

            return $"/charts/{Path.GetFileName(pngPath)}";
        }
    }
}
```

---

## 4. Python scripts

Place these four files in your `ChartUpdater/PythonScripts/` folder. Make sure each is saved with UTF-8 encoding.

### a) `generate_deletions_on_murex_chart.py`

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Deletions on contracts passed to Murex per week (line chart)

import sys
import pandas as pd
import matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Week'])
    if df.empty:
        fig = plt.figure(figsize=(8,4))
        ax  = fig.add_subplot(111)
        ax.text(0.5,0.5,'No data',ha='center',va='center',fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    fig = plt.figure(figsize=(10,5))
    ax  = fig.add_subplot(111)
    ax.plot(df['Week'], df['Deals'], marker='o')
    ax.set_title('Deletions on Murex per Week')
    ax.set_ylabel('Deals')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv)!=3:
        print("Usage: python generate_deletions_on_murex_chart.py <in.csv> <out.png>", file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

### b) `generate_otc_top5_rec_breaks_3d_chart.py`

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# OTC Top 5 Products Causing Intraday Rec Breaks (3D bar chart)

import sys
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def main(inp, outp):
    df = pd.read_csv(inp)
    if df.empty:
        fig = plt.figure(figsize=(8,4))
        ax  = fig.add_subplot(111)
        ax.text(0.5,0.5,'No data',ha='center',va='center',fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    products   = df['Product'].unique()
    reasons    = df['BreakReason'].unique()
    xpos       = range(len(products))
    ypos       = range(len(reasons))

    # build matrix of RecBreaks
    Z = []
    for r in reasons:
        row = []
        for p in products:
            val = df.query("Product==@p and BreakReason==@r")['RecBreaks'].sum()
            row.append(val)
        Z.append(row)

    X, Y = np.meshgrid(xpos, ypos)
    Z     = np.array(Z)

    fig = plt.figure(figsize=(12,6))
    ax  = fig.add_subplot(111, projection='3d')
    ax.bar3d(X.flatten(), Y.flatten(), np.zeros_like(Z).flatten(),
             0.5, 0.5, Z.flatten())

    ax.set_xticks(xpos)
    ax.set_xticklabels(products, rotation=45, ha='right')
    ax.set_yticks(ypos)
    ax.set_yticklabels(reasons)
    ax.set_zlabel('Rec Breaks')
    ax.set_title('OTC Top 5 Rec Breaks by Product & Reason')
    plt.tight_layout()
    plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3:
        print("Usage: python generate_otc_top5_rec_breaks_3d_chart.py <in.csv> <out.png>", file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

### c) `generate_mtm_contracts_booked_chart.py`

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# MTM contracts booked per week, last 4 years (line chart)

import sys
import pandas as pd
import matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Week'])
    if df.empty:
        fig = plt.figure(figsize=(8,4))
        ax  = fig.add_subplot(111)
        ax.text(0.5,0.5,'No data',ha='center',va='center',fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    fig = plt.figure(figsize=(10,5))
    ax  = fig.add_subplot(111)
    ax.plot(df['Week'], df['ContractsBooked'], linestyle='-', marker='o')
    ax.set_title('MTM Contracts Booked per Week')
    ax.set_ylabel('Contracts Booked')
    plt.xticks(rotation=45,ha='right')
    plt.tight_layout()
    plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3:
        print("Usage: python generate_mtm_contracts_booked_chart.py <in.csv> <out.png>", file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

### d) `generate_otc_contracts_booked_vs_avg_chart.py`

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# OTC contracts booked per week vs 4-week rolling average (multi-line)

import sys
import pandas as pd
import matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Week'])
    if df.empty:
        fig = plt.figure(figsize=(8,4))
        ax  = fig.add_subplot(111)
        ax.text(0.5,0.5,'No data',ha='center',va='center',fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    fig = plt.figure(figsize=(10,6))
    ax  = fig.add_subplot(111)
    ax.plot(df['Week'], df['DealsBooked'], label='Weekly Deals', marker='o')
    ax.plot(df['Week'], df['AvgDeals'],    label='4-week Avg', linestyle='--')
    ax.set_title('OTC Contracts Booked per Week (vs Avg)')
    ax.set_ylabel('Contracts')
    ax.legend()
    plt.xticks(rotation=45,ha='right')
    plt.tight_layout()
    plt.savefig(outp)

if __name__=='__main__':
    if len(sys.argv)!=3:
        print("Usage: python generate_otc_contracts_booked_vs_avg_chart.py <in.csv> <out.png>", file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

---

### 5. Clean & rebuild

Finally, in your solution folder:

```powershell
dotnet clean
dotnet build
```

Then start your worker (`dotnet run` or via VS) and these four new graphs will be generated from their disk-based CSVs into PNGs, with **no STDIN** piping and no “file not found” or “pipe closed” errors.

In our next message we’ll add the remaining charts (bar charts, slowest searches, Active Users, etc.) following the same pattern.


























Below is the **complete, drop-in implementation** for the *next four* charts (5–8). Copy each into your project under the indicated paths.

---

## 1. Models

Create these four files in `StarTrends/Models/`:

```csharp
// Models/ActiveUsersByRoleCount.cs
namespace StarTrends.Models
{
    public class ActiveUsersByRoleCount
    {
        public string UserRole   { get; set; }
        public int    UserCount  { get; set; }
    }
}

// Models/ActiveUsersByLocationCount.cs
namespace StarTrends.Models
{
    public class ActiveUsersByLocationCount
    {
        public string Location   { get; set; }
        public int    UserCount  { get; set; }
    }
}

// Models/SlowestDealEnquirySearchCount.cs
namespace StarTrends.Models
{
    public class SlowestDealEnquirySearchCount
    {
        public string Search                 { get; set; }
        public int    AverageTimeSeconds     { get; set; }
    }
}

// Models/SlowestUserOperationCount.cs
namespace StarTrends.Models
{
    public class SlowestUserOperationCount
    {
        public string OperationType          { get; set; }
        public int    AverageTimeSeconds     { get; set; }
    }
}
```

---

## 2. Service interface

In `StarTrends/Services/IChartGeneratorService.cs`, add under the existing methods:

```csharp
using StarTrends.Models;

namespace StarTrends.Services
{
    public interface IChartGeneratorService
    {
        // … your existing methods …

        Task<string> GenerateActiveUsersByRoleChartAsync(
            IEnumerable<ActiveUsersByRoleCount> data);

        Task<string> GenerateActiveUsersByLocationChartAsync(
            IEnumerable<ActiveUsersByLocationCount> data);

        Task<string> GenerateSlowestDealEnquirySearchesChartAsync(
            IEnumerable<SlowestDealEnquirySearchCount> data);

        Task<string> GenerateSlowestUserOperationsChartAsync(
            IEnumerable<SlowestUserOperationCount> data);
    }
}
```

---

## 3. Service implementation

Drop these four methods into your `ChartGeneratorService` (in `StarTrends/Services/ChartGeneratorService.cs`):

```csharp
using System.Diagnostics;
using StarTrends.Models;

namespace StarTrends.Services
{
    public class ChartGeneratorService : IChartGeneratorService
    {
        // … existing ctor and fields …

        public async Task<string> GenerateActiveUsersByRoleChartAsync(
            IEnumerable<ActiveUsersByRoleCount> data)
        {
            var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
            var csvPath = Path.Combine(_csvDir, $"active_users_by_role_{ts}.csv");
            var pngPath = Path.Combine(_chartDir, $"active_users_by_role_{ts}.png");

            await File.WriteAllTextAsync(csvPath,
                "UserRole,UserCount\n" +
                string.Join("\n", data.Select(d =>
                    $"{d.UserRole},{d.UserCount}"))
            );

            var script = Path.Combine(_scriptDir, "generate_active_users_by_role_chart.py");
            var psi = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
            {
                RedirectStandardError = true,
                UseShellExecute        = false
            };

            using var proc = Process.Start(psi) 
                             ?? throw new InvalidOperationException("Cannot start Python");
            var err = await proc.StandardError.ReadToEndAsync();
            await proc.WaitForExitAsync();
            if (!string.IsNullOrEmpty(err)) _log.LogError(err);

            return $"/charts/{Path.GetFileName(pngPath)}";
        }

        public async Task<string> GenerateActiveUsersByLocationChartAsync(
            IEnumerable<ActiveUsersByLocationCount> data)
        {
            var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
            var csvPath = Path.Combine(_csvDir, $"active_users_by_location_{ts}.csv");
            var pngPath = Path.Combine(_chartDir, $"active_users_by_location_{ts}.png");

            await File.WriteAllTextAsync(csvPath,
                "Location,UserCount\n" +
                string.Join("\n", data.Select(d =>
                    $"{d.Location},{d.UserCount}"))
            );

            var script = Path.Combine(_scriptDir, "generate_active_users_by_location_chart.py");
            var psi = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
            {
                RedirectStandardError = true,
                UseShellExecute        = false
            };

            using var proc = Process.Start(psi) 
                             ?? throw new InvalidOperationException("Cannot start Python");
            var err = await proc.StandardError.ReadToEndAsync();
            await proc.WaitForExitAsync();
            if (!string.IsNullOrEmpty(err)) _log.LogError(err);

            return $"/charts/{Path.GetFileName(pngPath)}";
        }

        public async Task<string> GenerateSlowestDealEnquirySearchesChartAsync(
            IEnumerable<SlowestDealEnquirySearchCount> data)
        {
            var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
            var csvPath = Path.Combine(_csvDir, $"slowest_deal_enquiry_searches_{ts}.csv");
            var pngPath = Path.Combine(_chartDir, $"slowest_deal_enquiry_searches_{ts}.png");

            await File.WriteAllTextAsync(csvPath,
                "Search,AverageTimeSeconds\n" +
                string.Join("\n", data.Select(d =>
                    $"{d.Search},{d.AverageTimeSeconds}"))
            );

            var script = Path.Combine(_scriptDir, "generate_slowest_deal_enquiry_searches_chart.py");
            var psi = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
            {
                RedirectStandardError = true,
                UseShellExecute        = false
            };

            using var proc = Process.Start(psi) 
                             ?? throw new InvalidOperationException("Cannot start Python");
            var err = await proc.StandardError.ReadToEndAsync();
            await proc.WaitForExitAsync();
            if (!string.IsNullOrEmpty(err)) _log.LogError(err);

            return $"/charts/{Path.GetFileName(pngPath)}";
        }

        public async Task<string> GenerateSlowestUserOperationsChartAsync(
            IEnumerable<SlowestUserOperationCount> data)
        {
            var ts      = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
            var csvPath = Path.Combine(_csvDir, $"slowest_user_operations_{ts}.csv");
            var pngPath = Path.Combine(_chartDir, $"slowest_user_operations_{ts}.png");

            await File.WriteAllTextAsync(csvPath,
                "OperationType,AverageTimeSeconds\n" +
                string.Join("\n", data.Select(d =>
                    $"{d.OperationType},{d.AverageTimeSeconds}"))
            );

            var script = Path.Combine(_scriptDir, "generate_slowest_user_operations_chart.py");
            var psi = new ProcessStartInfo("python",
                    $"\"{script}\" \"{csvPath}\" \"{pngPath}\"")
            {
                RedirectStandardError = true,
                UseShellExecute        = false
            };

            using var proc = Process.Start(psi) 
                             ?? throw new InvalidOperationException("Cannot start Python");
            var err = await proc.StandardError.ReadToEndAsync();
            await proc.WaitForExitAsync();
            if (!string.IsNullOrEmpty(err)) _log.LogError(err);

            return $"/charts/{Path.GetFileName(pngPath)}";
        }

        // … other existing methods …
    }
}
```

---

## 4. Python scripts

Save each of these under your `ChartUpdater/PythonScripts/` folder (make sure they’re UTF-8 encoded).

---

### a) `generate_active_users_by_role_chart.py`

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Active users by role last month (bar chart)

import sys
import pandas as pd
import matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp)
    if df.empty:
        fig = plt.figure(figsize=(8,4))
        ax  = fig.add_subplot(111)
        ax.text(0.5,0.5,'No data', ha='center', va='center', fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    fig = plt.figure(figsize=(10,6))
    ax  = fig.add_subplot(111)
    ax.bar(df['UserRole'], df['UserCount'])
    ax.set_title('Active Users by Role (Last Month)')
    ax.set_ylabel('Number of Users')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Usage: python generate_active_users_by_role_chart.py <in.csv> <out.png>", file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

---

### b) `generate_active_users_by_location_chart.py`

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Active users per location last month (bar chart)

import sys
import pandas as pd
import matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp)
    if df.empty:
        fig = plt.figure(figsize=(8,4))
        ax  = fig.add_subplot(111)
        ax.text(0.5,0.5,'No data', ha='center', va='center', fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    fig = plt.figure(figsize=(10,6))
    ax  = fig.add_subplot(111)
    ax.bar(df['Location'], df['UserCount'])
    ax.set_title('Active Users per Location (Last Month)')
    ax.set_ylabel('Number of Users')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Usage: python generate_active_users_by_location_chart.py <in.csv> <out.png>", file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

---

### c) `generate_slowest_deal_enquiry_searches_chart.py`

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Slowest deal enquiry searches in last 7 days (top 25) (bar chart)

import sys
import pandas as pd
import matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp)
    if df.empty:
        fig = plt.figure(figsize=(8,4))
        ax  = fig.add_subplot(111)
        ax.text(0.5,0.5,'No data', ha='center', va='center', fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    fig = plt.figure(figsize=(12,6))
    ax  = fig.add_subplot(111)
    ax.barh(df['Search'], df['AverageTimeSeconds'])
    ax.set_title('Slowest Deal Enquiry Searches (Last 7 Days)')
    ax.set_xlabel('Average Time (s)')
    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Usage: python generate_slowest_deal_enquiry_searches_chart.py <in.csv> <out.png>", file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

---

### d) `generate_slowest_user_operations_chart.py`

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Slowest user operations in last 7 days (bar chart)

import sys
import pandas as pd
import matplotlib.pyplot as plt

def main(inp, outp):
    df = pd.read_csv(inp)
    if df.empty:
        fig = plt.figure(figsize=(8,4))
        ax  = fig.add_subplot(111)
        ax.text(0.5,0.5,'No data', ha='center', va='center', fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    fig = plt.figure(figsize=(12,6))
    ax  = fig.add_subplot(111)
    ax.barh(df['OperationType'], df['AverageTimeSeconds'])
    ax.set_title('Slowest User Operations (Last 7 Days)')
    ax.set_xlabel('Average Time (s)')
    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Usage: python generate_slowest_user_operations_chart.py <in.csv> <out.png>", file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

---

### 5. Clean & build

```bash
dotnet clean
dotnet build
```

Your worker will now correctly generate these four new bar charts from CSV → PNG. In the next step we can add the remaining charts (Tools used, Markets set, Blotter 3D, etc.) following the same pattern.




