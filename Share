Thought for a couple of seconds


Your Blazor Server app needs to restore the “host page” plumbing that was silently in place before. Here’s the *minimal* `Program.cs` that will get your UI loading again, alongside your chart‐API endpoints:

```csharp
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using StarTrends.Services;

var builder = WebApplication.CreateBuilder(args);

// 1) Register Razor Pages + Blazor Server
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();

// 2) Your existing services
builder.Services.AddScoped<IOracleDataService, OracleDataService>();
builder.Services.AddScoped<IChartGeneratorService, ChartGeneratorService>();

// (If you have any HTTP-client–based calls in components)
// builder.Services.AddHttpClient();

var app = builder.Build();

// 3) Static files + routing
app.UseStaticFiles();
app.UseRouting();

// 4) Your chart “API” endpoints (optional—if you still need them)
app.MapGet("/api/charts/metadata", (IHostEnvironment env) =>
{
    var meta = Path.Combine(env.ContentRootPath, "wwwroot", "charts", "metadata.json");
    return Results.File(meta, "application/json");
});
app.MapPost("/api/charts/{chartId}/refresh",
    async (string chartId,
           IOracleDataService oracle,
           IChartGeneratorService chartGen) =>
    {
        if (chartId != "productTrade") return Results.NotFound();
        var data = await oracle.GetProductTradeCountsAsync(DateTime.Now.AddDays(-7));
        var url  = await chartGen.GenerateProductTradeChartAsync(data);
        return Results.Ok(new { ImageUrl = url, LastUpdated = DateTime.UtcNow });
    });

// 5) **Restore the Blazor Server endpoints**  
app.MapRazorPages();             // ← makes Pages/*.cshtml discoverable  
app.MapBlazorHub();              // ← SignalR hub for Blazor Server  
app.MapFallbackToPage("/_Host"); // ← the catch-all fallback into _Host.cshtml  

app.Run();
```

And make sure you have **Pages/\_Host.cshtml** in your project root under **Pages/** (not `Components/Pages`). A barebones `_Host.cshtml` looks like:

```cshtml
@page "/"
@namespace StarTrends.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html>
<head>
  <base href="~/" />
  <title>StarTrends</title>
  <link href="css/site.css" rel="stylesheet" />
</head>
<body>
  <component type="typeof(App)" render-mode="ServerPrerendered" />
  <script src="_framework/blazor.server.js"></script>
</body>
</html>
```

### What changed and why

* **You removed** the calls that wire up Razor Pages and the Blazor Hub, so ASP NET Core no longer knew how to serve `_Host.cshtml` at `/`.
* By re-adding:

  ```csharp
  builder.Services.AddRazorPages();
  builder.Services.AddServerSideBlazor();
  …
  app.MapRazorPages();
  app.MapBlazorHub();
  app.MapFallbackToPage("/_Host");
  ```

  you restore the fallback endpoint that any route (like `/`) falls into, which then boots your Blazor Server app.

With these pieces in place, your site will render immediately (using the pre-generated PNG) without throwing the “Cannot find the fallback endpoint” error.
