Awesome — here’s your new **file-based chart setup** for instant loading and async refresh.

---

## ✅ Folder Structure

```
StarTrends/
├── wwwroot/
│   └── charts/
│       └── otc-product-types.png   ← saved image
├── Services/
│   └── GraphService.cs             ← saves chart here
├── Shared/
│   └── ChartViewer.razor          ← displays from file path
```

---

## ✅ 1. `GraphService.cs`

```csharp
public class GraphService : IGraphService
{
    private readonly IGraphDataRepo _repo;
    private readonly string _chartPath;

    public GraphService(IGraphDataRepo repo)
    {
        _repo = repo;
        _chartPath = Path.Combine("wwwroot", "charts", "otc-product-types.png");
    }

    public async Task<byte[]> GetCachedChartAsync()
    {
        var path = Path.Combine(AppContext.BaseDirectory, _chartPath);
        return await File.ReadAllBytesAsync(path);
    }

    public async Task RegenerateChartAsync()
    {
        var raw = await _repo.FetchOtcDataAsync(7);
        var payload = JsonSerializer.Serialize(raw, new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        });

        var psi = new ProcessStartInfo
        {
            FileName = "python",
            Arguments = $"PythonTools/render.py {_chartPath}",
            RedirectStandardInput = true,
            RedirectStandardError = true,
            UseShellExecute = false,
            CreateNoWindow = true,
            WorkingDirectory = AppContext.BaseDirectory
        };

        using var proc = Process.Start(psi);
        await proc.StandardInput.WriteAsync(payload);
        proc.StandardInput.Close();

        var error = await proc.StandardError.ReadToEndAsync();
        if (!string.IsNullOrWhiteSpace(error))
            Console.WriteLine("PYTHON ERROR: " + error);

        await proc.WaitForExitAsync();
    }
}
```

---

## ✅ 2. `render.py` (modified to accept file path)

```python
import sys, json
import matplotlib.pyplot as plt

def main():
    try:
        out_path = sys.argv[1]  # <- accept output PNG path
        data = json.load(sys.stdin)
        labels = [d["product"] for d in data]
        values = [d["totalTrades"] for d in data]

        fig, ax = plt.subplots(figsize=(8, 4))
        ax.bar(labels, values)
        ax.set_title("OTC Product Types (Last 7 days)")
        ax.set_ylabel("Total Trades")
        plt.xticks(rotation=30, ha="right")
        plt.tight_layout()

        fig.savefig(out_path, format="png")
        plt.close(fig)
        print("Rendered OK", file=sys.stderr)

    except Exception as e:
        print(f"Python Error: {e}", file=sys.stderr)

if __name__ == "__main__":
    main()
```

---

## ✅ 3. `ChartViewer.razor` (fast loading via `<img>`)

```razor
@inject NavigationManager Nav
@inject HttpClient Http

<h4>OTC Product Types</h4>

@if (_loading)
{
    <p>Loading chart…</p>
}
else
{
    <img src="@_chartUrl" style="max-width: 100%" />
}

<button @onclick="RefreshChart">Refresh Chart</button>

@code {
    private string _chartUrl = "";
    private bool _loading = true;

    protected override void OnInitialized()
    {
        _chartUrl = $"{Nav.BaseUri}charts/otc-product-types.png?ts={DateTimeOffset.UtcNow.ToUnixTimeSeconds()}";
        _loading = false;
    }

    private async Task RefreshChart()
    {
        _loading = true;
        StateHasChanged();

        await Http.GetAsync("api/graphs/refresh-otc-chart");

        _chartUrl = $"{Nav.BaseUri}charts/otc-product-types.png?ts={DateTimeOffset.UtcNow.ToUnixTimeSeconds()}";
        _loading = false;
    }
}
```

---

## ✅ 4. `GraphController.cs` (new API)

```csharp
[HttpGet("refresh-otc-chart")]
public async Task<IActionResult> RefreshOtc()
{
    await _svc.RegenerateChartAsync();
    return Ok();
}
```

---

Let me know and I’ll zip this up or extend this system to multiple chart types, or even 5-min polling support.

