# File: generate_deletions_on_murex_chart.py
```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Week'])
    if df.empty:
        fig, ax = plt.subplots(figsize=(8, 4))
        ax.text(0.5, 0.5, 'No data', ha='center', va='center', fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    # aggregate duplicates if any
    df = df.groupby('Week', as_index=False)['Deals'].sum()

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(df['Week'], df['Deals'], marker='o', linestyle='-')
    ax.set_ylabel('Deals')
    ax.set_title('Deletions on Murex per Day')

    ax.xaxis.set_major_locator(mdates.DayLocator(interval=1))
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
    fig.autofmt_xdate()

    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print('Usage: python generate_deletions_on_murex_chart.py <csv> <png>', file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

# File: generate_otc_intraday_rec_breaks_per_week_chart.py
```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Week'])
    if df.empty:
        fig, ax = plt.subplots(figsize=(8, 4))
        ax.text(0.5, 0.5, 'No data', ha='center', va='center', fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    df = df.groupby('Week', as_index=False)['RecBreaks'].sum()
    df['EMA'] = df['RecBreaks'].ewm(span=26, adjust=False).mean()

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(df['Week'], df['RecBreaks'], marker='o', label='Actual')
    ax.plot(df['Week'], df['EMA'], color='red', linewidth=2, label='6M EMA')
    ax.set_ylabel('Rec Breaks')
    ax.set_title('OTC Intraday Rec Breaks per Week')
    ax.legend()

    ax.xaxis.set_major_locator(mdates.MonthLocator(interval=3))
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%b'))
    fig.autofmt_xdate()

    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print('Usage: python generate_otc_intraday_rec_breaks_per_week_chart.py <csv> <png>', file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

# File: generate_otc_trades_saved_per_minute_chart.py
```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

def main(inp, outp):
    df = pd.read_csv(inp)
    df['Minute'] = pd.to_datetime(df['Minute'], format='%d-%b-%Y %H:%M')
    if df.empty:
        fig, ax = plt.subplots(figsize=(8, 4))
        ax.text(0.5, 0.5, 'No data', ha='center', va='center', fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.scatter(df['Minute'], df['TradesSaved'], alpha=0.6, s=20)
    ax.set_ylabel('Trades Saved')
    ax.set_title('OTC Trades Saved per Minute')

    ax.xaxis.set_major_locator(mdates.HourLocator(interval=6))
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b %H:%M'))
    fig.autofmt_xdate()

    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print('Usage: python generate_otc_trades_saved_per_minute_chart.py <csv> <png>', file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

# File: generate_otc_rec_breaks_by_reason_chart.py
```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Month'])
    if df.empty:
        fig, ax = plt.subplots(figsize=(8, 4))
        ax.text(0.5, 0.5, 'No data', ha='center', va='center', fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    df = df.groupby(['Month', 'BreakReason'], as_index=False)['Breaks'].sum()
    pivot = df.pivot(index='Month', columns='BreakReason', values='Breaks').fillna(0)

    fig, ax = plt.subplots(figsize=(12, 6))
    pivot.plot(ax=ax)
    ax.set_ylabel('Breaks')
    ax.set_title('OTC Intraday Rec Breaks by Reason')
    ax.legend(title='Break Reason')

    ax.xaxis.set_major_locator(mdates.MonthLocator(interval=2))
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%b'))
    fig.autofmt_xdate()

    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print('Usage: python generate_otc_rec_breaks_by_reason_chart.py <csv> <png>', file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
```

# File: generate_mw_rec_breaks_per_thousand_chart.py
```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

def main(inp, outp):
    df = pd.read_csv(inp, parse_dates=['Week'])
    if df.empty:
        fig, ax = plt.subplots(figsize=(8, 4))
        ax.text(0.5, 0.5, 'No data', ha='center', va='center', fontsize=14)
        ax.axis('off')
        plt.savefig(outp)
        return

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(df['Week'], df['RecBreaksPerThousandDeals'], marker='o')
    ax.set_ylabel('Rec Breaks per 1000 Deals')
    ax.set_title('MW Rec Breaks per 1000 Deals')

    ax.xaxis.set_major_locator(mdates.MonthLocator(interval=3))
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%b'))
    fig.autofmt_xdate()

    plt.tight_layout()
    plt.savefig(outp)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print('Usage: python generate_mw_rec_breaks_per_thousand_chart.py <csv> <png>', file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
