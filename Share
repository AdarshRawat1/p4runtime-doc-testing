public class GraphService : IGraphService
{
    private readonly IGraphDataRepo _repo;
    private readonly string _chartPath;

    public GraphService(IGraphDataRepo repo)
    {
        _repo = repo;
        _chartPath = Path.Combine("wwwroot", "charts", "otc-product-types.png");
    }

    public async Task<byte[]> GetCachedChartAsync()
    {
        var path = Path.Combine(AppContext.BaseDirectory, _chartPath);
        return await File.ReadAllBytesAsync(path);
    }

    public async Task RegenerateChartAsync()
    {
        var raw = await _repo.FetchOtcDataAsync(7);
        var payload = JsonSerializer.Serialize(raw, new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        });

        var psi = new ProcessStartInfo
        {
            FileName = "python",
            Arguments = $"PythonTools/render.py {_chartPath}",
            RedirectStandardInput = true,
            RedirectStandardError = true,
            UseShellExecute = false,
            CreateNoWindow = true,
            WorkingDirectory = AppContext.BaseDirectory
        };

        using var proc = Process.Start(psi);
        await proc.StandardInput.WriteAsync(payload);
        proc.StandardInput.Close();

        var error = await proc.StandardError.ReadToEndAsync();
        if (!string.IsNullOrWhiteSpace(error))
            Console.WriteLine("PYTHON ERROR: " + error);

        await proc.WaitForExitAsync();
    }
}
