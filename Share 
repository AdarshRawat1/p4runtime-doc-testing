
Great — let’s break it down and get your Oracle connection working in a Blazor Server app step by step. You’ll need to create/edit a few files in your project.


---

✅ 1. Where to put the connection logic

You can put the connection test in the following file:

File: Pages/FetchData.razor

(or create a new one like Pages/OracleTest.razor)

Paste this sample code:

@page "/oracle-test"
@inject NavigationManager NavManager

<h3>Oracle DB Connection Test</h3>

@if (!string.IsNullOrEmpty(result))
{
    <p>@((MarkupString)result)</p>
}
else
{
    <p>Loading...</p>
}

@code {
    private string result;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var conn = new Oracle.ManagedDataAccess.Client.OracleConnection(
                "User Id=star;Password=bsc123;Data Source=STA1UKD;"
            );
            await conn.OpenAsync();

            using var cmd = new Oracle.ManagedDataAccess.Client.OracleCommand(@"
                SELECT feature, COUNT(*) AS usage_count
                FROM star_action_audit
                WHERE mod_dt > TRUNC(SYSDATE) - 30
                  AND feature_type = 'SEARCH'
                GROUP BY feature
                ORDER BY usage_count DESC
            ", conn);

            using var reader = await cmd.ExecuteReaderAsync();
            result = "<ul>";
            while (await reader.ReadAsync())
            {
                result += $"<li>{reader["feature"]}: {reader["usage_count"]}</li>";
            }
            result += "</ul>";
        }
        catch (Exception ex)
        {
            result = $"<strong>Error:</strong> {ex.Message}<br/><pre>{ex.StackTrace}</pre>";
        }
    }
}


---

✅ 2. Where to add the package reference

If you can’t use dotnet add package, manually add this to your .csproj file (usually named like Stats.csproj):

File: Stats.csproj

<ItemGroup>
  <PackageReference Include="Oracle.ManagedDataAccess" Version="19.17.0" />
</ItemGroup>

Then rebuild the project. If you're manually copying DLLs instead of using NuGet, I can guide that too.


---

✅ 3. If using tnsnames.ora

Place your tnsnames.ora file inside a folder like:
C:\oracle\network\admin

Set environment variable TNS_ADMIN to that folder path.

Restart Visual Studio / terminal if needed.



---

✅ 4. Add the page route to navigation

Open:

File: Shared/NavMenu.razor

Add this where the other menu items are:

<NavLink class="nav-link" href="oracle-test">
    <span class="oi oi-database" aria-hidden="true"></span> Oracle Test
</NavLink>


---

Once this is all set up, run your Blazor app, navigate to /oracle-test and it should show either:

A list of features and usage counts

Or the exact error if connection failed (like missing Oracle DLLs, bad TNS config, etc.)



---

Let me know if:

You can’t install the Oracle package and need a local .dll copy

You're stuck on any file placement

You want a ZIP of a working template project


I can help tailor based on your system access.

