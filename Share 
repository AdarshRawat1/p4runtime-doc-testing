huwonamespace Stats.Models;

public class FeatureUsage
{
    public string Search { get; set; } = string.Empty;
    public int TimesUsed { get; set; }
}








using Oracle.ManagedDataAccess.Client;
using Stats.Models;

namespace Stats.Services;

public class FeatureUsageService
{
    private readonly IConfiguration _config;

    public FeatureUsageService(IConfiguration config)
    {
        _config = config;
    }

    public async Task<List<FeatureUsage>> GetFeatureUsageAsync()
    {
        var results = new List<FeatureUsage>();
        var query = @"
            SELECT r.feature AS ""Search"", COUNT(1) AS ""Times used""
            FROM star_action_audit r
            WHERE r.mod_dt > TRUNC(SYSDATE) - 30
              AND feature_type IN ('SEARCH')
            GROUP BY r.feature
            ORDER BY ""Times used"" DESC";

        using var conn = new OracleConnection(_config.GetConnectionString("OracleDb"));
        await conn.OpenAsync();

        using var cmd = new OracleCommand(query, conn);
        using var reader = await cmd.ExecuteReaderAsync();

        while (await reader.ReadAsync())
        {
            results.Add(new FeatureUsage
            {
                Search = reader.GetString(0),
                TimesUsed = reader.GetInt32(1)
            });
        }

        return results;
    }
}








using Stats.Services;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();
builder.Services.AddSingleton<FeatureUsageService>(); // Add this line

var app = builder.Build();

// existing code remains unchanged









@page "/"
@inject FeatureUsageService UsageService

<h3>Search Feature Usage (Last 30 Days)</h3>

@if (usages == null)
{
    <p><em>Loading...</em></p>
}
else if (!usages.Any())
{
    <p>No data found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Search</th>
                <th>Times Used</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in usages)
            {
                <tr>
                    <td>@item.Search</td>
                    <td>@item.TimesUsed</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<FeatureUsage>? usages;

    protected override async Task OnInitializedAsync()
    {
        usages = await UsageService.GetFeatureUsageAsync();
    }
}






using System;
using Oracle.ManagedDataAccess.Client;

class Program
{
    static void Main()
    {
        string connectionString = "User Id=star;Password=bsc123;Data Source=STA1UKD";

        using (var conn = new OracleConnection(connectionString))
        {
            try
            {
                conn.Open();
                Console.WriteLine("Connection successful!");

                string query = @"
                    SELECT r.feature AS Search, COUNT(1) AS TimesUsed
                    FROM star_action_audit r
                    WHERE r.mod_dt > TRUNC(SYSDATE)-30
                    AND feature_type IN ('SEARCH')
                    GROUP BY r.feature
                    ORDER BY TimesUsed DESC";

                using (var cmd = new OracleCommand(query, conn))
                using (var reader = cmd.ExecuteReader())
                {
                    Console.WriteLine("\nSearch | TimesUsed");
                    Console.WriteLine("-------------------");

                    while (reader.Read())
                    {
                        Console.WriteLine($"{reader["Search"],-20} | {reader["TimesUsed"]}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Connection or query failed:");
                Console.WriteLine(ex.Message);
            }
        }
    }
}






<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Diagnostics.DiagnosticSource" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-6.0.2.0" newVersion="6.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>


<ItemGroup>
  <None Update="app.config">
    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
  </None>
</ItemGroup>


