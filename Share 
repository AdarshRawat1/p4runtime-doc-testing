Perfect — you're referring to using TNS (Transparent Network Substrate), which is Oracle's way of defining how to connect to databases using a TNS alias like:

sqlplus username/password@TNS_ALIAS

To replicate that in your Blazor Server app, we’ll use ODP.NET (Oracle.ManagedDataAccess) or ODBC with a TNS-based connection string.


---

✅ Option 1: Using ODP.NET with TNS

If you have a tnsnames.ora file with an entry like:

STA1UKD =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = some-host)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = your_service)
    )
  )

Then your C# connection string becomes:

string connStr = "User Id=star;Password=bsc123;Data Source=STA1UKD;";

And you use this with the Oracle client:

using Oracle.ManagedDataAccess.Client;

using var conn = new OracleConnection(connStr);
conn.Open();

Make sure:

Oracle.ManagedDataAccess.dll is referenced.

tnsnames.ora is in a directory included in the TNS_ADMIN environment variable or in the default Oracle client path.



---

✅ Option 2: Using ODBC with DSN (less preferred for Oracle)

If a DSN named MyOracleDSN is set up in ODBC Data Source Administrator:

string connStr = "DSN=MyOracleDSN;Uid=star;Pwd=bsc123;";
using var conn = new OdbcConnection(connStr);
conn.Open();

But for Oracle, ODP.NET is preferred — it's more reliable and supports advanced Oracle features better.


---

✅ Minimum Code Sample (ODP.NET)

@code {
    private string result;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var conn = new OracleConnection("User Id=star;Password=bsc123;Data Source=STA1UKD;");
            await conn.OpenAsync();

            using var cmd = new OracleCommand("SELECT feature, COUNT(*) AS usage_count FROM star_action_audit WHERE mod_dt > TRUNC(SYSDATE) - 30 AND feature_type = 'SEARCH' GROUP BY feature", conn);
            using var reader = await cmd.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                result += $"{reader["feature"]}: {reader["usage_count"]}<br/>";
            }
        }
        catch (Exception ex)
        {
            result = "Error: " + ex.ToString();
        }
    }
}

This will verify if your TNS-based Oracle connection is working.


---

Let me know if:

You need help placing the tnsnames.ora

You want to check if your Blazor server app picks up Oracle DLLs correctly

Or you’d like a minimal working .csproj with everything pre-configured


